package nl.tudelft.mutated_rers;
/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 15 11:35:14 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.StringReader;

public class Problem7_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("=R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.a341832027 = "o0j}YyV0=Pn1lSiQq&";
      problem7_0.a1005771223 = 426;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("t9|+o2|^,3_s)SH:a~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iK");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iK");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("<iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iC");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iL");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iL");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iL");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iL");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iL");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iD");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f";
      stringArray0[2] = "f";
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(14, problem7_1.a1239294920);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      String string0 = "E/v";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("ix5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // SystemInUtil.addInputLine(" &Q*j!=*:%vq");
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iK");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iI");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iK");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iI");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.a817884456 = "f";
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertNotNull(problem7_0);
      
      problem7_0.a1732526862 = "iL";
      problem7_0.calculateOutput("iF");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("oU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iN");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iN");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("rt;i4aBxYY?JF?p.1s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iM");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iL");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      String string0 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 2;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iB");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iB");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iK");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iK");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iF");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a209620869 = "f";
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Sro#k(p:%M'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      String string0 = "iC";
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      String string0 = "iC";
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("922#|oJtAEdKjj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1732430115 = "iL";
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      problem7_0.a209620869 = "Q2d\"/YWJ9Lq#@# B?U";
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Q2d\"/YWJ9Lq#@# B?U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.a2060119244 = 395;
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iJ");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iJ");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iC");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i.G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "iC";
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iM");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iB");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iB");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iB");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.a574706436 = 10;
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iH");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("V;^Rg,uF@Zmpkba");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iI");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      String string0 = "iG";
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.a198173171 = 7;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iF");
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      //  Problem7.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iE");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iE");
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(12, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(12, problem7_0.a156010946);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a657049678);
      assertTrue(problem7_1.cf);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(9, problem7_2.a771295278);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(6, problem7_2.a198173171);
      assertTrue(problem7_2.cf);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(10, problem7_2.a1362296972);
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertNotNull(problem7_2);
      
      Problem7 problem7_3 = new Problem7();
      assertEquals(2, problem7_3.a540411294);
      assertEquals(6, problem7_3.a198173171);
      assertTrue(problem7_3.cf);
      assertEquals(7, problem7_3.a13954874);
      assertEquals(1, problem7_3.a1691041769);
      assertEquals(15, problem7_3.a311198162);
      assertEquals(7, problem7_3.a1509708421);
      assertEquals(4, problem7_3.a563946643);
      assertEquals(15, problem7_3.a1197405602);
      assertEquals(14, problem7_3.a1239294920);
      assertEquals(8, problem7_3.a2024001419);
      assertEquals(9, problem7_3.a771295278);
      assertEquals(10, problem7_3.a156010946);
      assertEquals(15, problem7_3.a1766290607);
      assertEquals(10, problem7_3.a657049678);
      assertEquals(7, problem7_3.a677365707);
      assertEquals(15, problem7_3.a1005771223);
      assertEquals(6, problem7_3.a1183069670);
      assertEquals(13, problem7_3.a1159114160);
      assertEquals(5, problem7_3.a2060119244);
      assertEquals(10, problem7_3.a1362296972);
      assertEquals(3, problem7_3.a574706436);
      assertFalse(problem7_3.equals((Object)problem7_2));
      assertFalse(problem7_3.equals((Object)problem7_1));
      assertFalse(problem7_3.equals((Object)problem7_0));
      assertNotNull(problem7_3);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iN");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      String string0 = "iI";
      problem7_0.calculateOutput("iI");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iiD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("Cb+T{A]:i\"5CeCD\"l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iI");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iI");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput(">{KU^,T!l^8gejR/h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iE");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a657049678);
      assertTrue(problem7_1.cf);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(3, problem7_1.a574706436);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.a771295278 = 6;
      problem7_0.a1732430115 = "iC";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iI");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      String[] stringArray0 = new String[1];
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a209620869 = "h";
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("3Mgx&*U+lOXuN");
      problem7_0.calculateOutput("iH");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iD");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("3Mgx&*U+lOXuN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a198173171);
      assertTrue(problem7_1.cf);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.a82043083 = "!hnGeLVVwFQq&v%&#";
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iF");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iL");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iL");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("iI");
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iI");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(3, problem7_1.a574706436);
      assertTrue(problem7_1.cf);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      // SystemInUtil.addInputLine("3Mgx&*U+lOXuN");
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iD");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iA");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iI");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iD");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iI");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iI");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a574706436);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      // SystemInUtil.addInputLine("iA");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iD");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.a1498325992 = "iD";
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iD");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iK");
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iK");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      String string0 = "iC";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.a574706436 = (-613);
      // SystemInUtil.addInputLine("iI");
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals((-613), problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals((-613), problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals((-613), problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals((-613), problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.a574706436 = 6;
      // SystemInUtil.addInputLine("iI");
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "f";
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("p.(7#/?c=-nN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("-H{38Bf-U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i";
      stringArray0[1] = "f";
      //  Problem7.main(stringArray0);
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iF");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iF");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iH");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      String string0 = "iC";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // SystemInUtil.addInputLine("nH)sqpX");
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertNotNull(problem7_0);
      
      problem7_0.a677365707 = (-1266);
      problem7_0.calculateOutput("iE");
      assertEquals((-1266), problem7_0.a677365707);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("kq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // SystemInUtil.addInputLine("iC");
      // SystemInUtil.addInputLine("iK");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f";
      stringArray0[1] = "f";
      stringArray0[2] = "h";
      // SystemInUtil.addInputLine("6M&#:]+M4v");
      //  Problem7.main(stringArray0);
      //  Problem7.main(stringArray0);
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i)j?g?rFgo%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      String string0 = "p";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.a1732526862 = "oY";
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(3, problem7_1.a574706436);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      String string0 = "iG";
      problem7_0.a374718793 = "iG";
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      String string1 = null;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(17, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(17, problem7_0.a1197405602);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.a771295278 = 6;
      problem7_0.a1732430115 = "iC";
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(3, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("0yy!j8?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.a574706436 = 2;
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iE");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a574706436);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iF");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iE");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      String string0 = "M+a`%";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("5gI_stU`98`t/QJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("P28R~Urlvf@ 3W$");
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("P28R~Urlvf@ 3W$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("jDY!^RT1(;A3GKF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      
      problem7_0.a574706436 = 2;
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("O?SL3Bqqg7L1^&Dth");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a574706436 = 2;
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.a1498325992 = "iD";
      // SystemInUtil.addInputLine("i");
      // SystemInUtil.addInputLine("somy%]a}OEQZz|vd?Zk");
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      // SystemInUtil.addInputLine("");
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("-H{38Bf-U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      String string0 = "V)";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("V)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      String string0 = "iL";
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput(":lP|N[eDSsp~b1cc3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.a1732430115 = "iC";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iF");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      String string0 = ":lP|N[eDSsp~b1cc3";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput(":lP|N[eDSsp~b1cc3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.a1159114160 = 15;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      String[] stringArray0 = new String[0];
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      String string0 = "iO";
      // SystemInUtil.addInputLine("");
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iF");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iF");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iE");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.a1005771223 = (-123618273);
      problem7_0.calculateOutput("iD");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals((-123618273), problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals((-123618273), problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a763551610 = "iL";
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "h";
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iL");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(12, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(12, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(12, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      String string0 = "z1t0;Fc";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("z1t0;Fc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      String string0 = "O(X";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("O(X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      String string0 = null;
      problem7_0.calculateOutput("iI");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      // SystemInUtil.addInputLine("e");
      String string1 = "f";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iD");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a1498325992 = "iD";
      // SystemInUtil.addInputLine("i");
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iD");
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iL");
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(12, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(12, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iL");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iO");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iE");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("_K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 3;
      String string0 = "&Wf?";
      String string1 = "iC";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("oX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iE");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      // SystemInUtil.addInputLine((String) null);
      problem7_0.a1498325992 = null;
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iK");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f";
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iI");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iI");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(4, problem7_2.a563946643);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(3, problem7_2.a574706436);
      assertTrue(problem7_2.cf);
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(15, problem7_2.a1197405602);
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_2.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a13954874 = (-14482067);
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals((-14482067), problem7_0.a13954874);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals((-14482067), problem7_0.a13954874);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(6, problem7_1.a198173171);
      assertTrue(problem7_1.cf);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.a209620869 = "iC";
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("*7)g>u]P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iA");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a198173171);
      assertTrue(problem7_1.cf);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a1509708421);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("^s5o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("h");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a431518964 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iM");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.a1183069670 = 7;
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iI");
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "iM";
      stringArray0[2] = "iN";
      stringArray0[3] = "i";
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iN");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a1183069670);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      String string0 = "iE";
      problem7_0.calculateOutput("iE");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      // SystemInUtil.addInputLine("");
      problem7_0.a338324946 = "iE";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iN");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("CP!X:y$r'J+c\"wKxs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      String string0 = "iA";
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      String string1 = "Current state has no transition for this input!";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("~'*FIsv7c`!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Pu:X3@R|In5So");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iK");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // SystemInUtil.addInputLine("iO");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iN");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(17, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(17, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(17, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertTrue(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iN");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      String[] stringArray0 = new String[0];
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_1.calculateOutput("iJ");
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(8, problem7_1.a198173171);
      assertFalse(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.equals((Object)problem7_1));
      assertNotSame(problem7_0, problem7_1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iA");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(4, problem7_1.a563946643);
      assertTrue(problem7_1.cf);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.a1197405602 = 8;
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iF");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iA");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a431518964 = "f";
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iA");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("oW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("')HhP");
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a657049678);
      assertTrue(problem7_1.cf);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      String string0 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      String string1 = "iC";
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("\"s]rTXy|sM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.a599457660 = "yqrbl0V,6D(V";
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iO");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iG");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("h");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iL");
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iL");
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iE");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("SHIgaY}zU?1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      String string0 = "iG";
      problem7_0.calculateOutput("iG");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      StringReader stringReader0 = new StringReader("f");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      String[] stringArray0 = new String[0];
      problem7_0.a13954874 = 4;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.a209620869 = "iC";
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("v)");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("v)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.a209620869 = "iC";
      problem7_0.a431518964 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      String string0 = "iC";
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a2060119244);
      
      String string0 = "iJ";
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a771295278);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("tSy~i$eKP]F.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      
      String string0 = "e+BcnZ<muqQFA5!a/`";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e+BcnZ<muqQFA5!a/`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("sTR:*CDG=]+0S?&SE P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      String string0 = "iC";
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iM");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.a1732526862 = "t*K3c";
      String string1 = "iE";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      String string0 = "iL";
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iH");
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("iL");
      problem7_0.calculateOutput("iL");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      String string1 = "g";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      String string0 = "iN";
      problem7_0.calculateOutput("iN");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iC");
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      //  Problem7.main((String[]) null);
      problem7_0.calculateOutput(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      
      // SystemInUtil.addInputLine("40R");
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput(".0=Ps{;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.a1498325992 = "iD";
      // SystemInUtil.addInputLine("i");
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iD");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      String string0 = "!y<WKA!>+P";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("!y<WKA!>+P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a1183069670);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(7, problem7_2.a677365707);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(9, problem7_2.a771295278);
      assertTrue(problem7_2.cf);
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Yx5kT#'AGR{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a209620869 = "iC";
      problem7_0.a431518964 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iA");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // SystemInUtil.addInputLine("iC");
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iN");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.a1005771223 = 0;
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(0, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iN");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(0, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(0, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a817884456 = "f";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e";
      problem7_0.a1769465339 = stringArray0[1];
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iC");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iC");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iM");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iF");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iC");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("iG");
      problem7_0.calculateOutput("iG");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iG");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1005771223);
      assertTrue(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a13954874);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.a771295278 = 6;
      problem7_0.a1732430115 = "iC";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("xwS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.a771295278 = 6;
      problem7_0.a1732430115 = "iC";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iG");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("by&");
      problem7_0.calculateOutput("iN");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iG");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iN");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.a1197405602 = 8;
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iA");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iA");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      //  Problem7.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iG");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iF");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertTrue(problem7_1.cf);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_0.calculateOutput("iF");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.equals((Object)problem7_1));
      assertNotSame(problem7_0, problem7_1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(17, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(17, problem7_0.a1197405602);
      
      //  Problem7.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a1183069670);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a311198162);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(14, problem7_1.a1239294920);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a13954874);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1005771223);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput(".q>lR\"hUiP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      String string0 = "iA";
      String string1 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iA");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("~'*FIsv7c`!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iM");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.cf = problem7_0.cf;
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.cf = problem7_0.cf;
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.cf = true;
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.cf = true;
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("gR3VQg4YX3#m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i";
      stringArray0[1] = "f";
      stringArray0[2] = "h";
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.a1197405602 = 8;
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      String string0 = "E/#,kxi!xQO@";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("E/#,kxi!xQO@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.a431518964 = "f";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iN");
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a657049678);
      assertTrue(problem7_1.cf);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a156010946);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iN");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iF");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iE");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(3, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput(",C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      String string0 = "iG";
      problem7_0.calculateOutput("iG");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iN");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      String[] stringArray0 = null;
      //  Problem7.main((String[]) null);
      //  Problem7.main(stringArray0);
      problem7_0.calculateOutput(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("");
      problem7_0.calculateOutput("iN");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iN");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iN");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iN");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.a1732430115 = null;
      String string0 = "D0p@2@(=9OVeq|Xb?";
      problem7_0.a1315245095 = "D0p@2@(=9OVeq|Xb?";
      String string1 = "iJ";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iE");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iK");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iE");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "g";
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("f");
      String string0 = "iE";
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iE");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // SystemInUtil.addInputLine("iA");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iC";
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      
      problem7_0.a817884456 = "D";
      String[] stringArray0 = new String[10];
      stringArray0[0] = "e";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      
      String string0 = "V)";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("V)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iH");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iF");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iA");
      assertEquals(2, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput(" t_FJ^GG^A1Hd)(/M~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // SystemInUtil.addInputLine("iC");
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iN");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iN");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iN");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("i");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("XEKdq]]/t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iH");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iM");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_1.a1239294920 = (-1319);
      problem7_1.calculateOutput("iJ");
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals((-1319), problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(8, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a1509708421);
      assertFalse(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
      
      problem7_0.calculateOutput("iK");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.equals((Object)problem7_1));
      assertNotSame(problem7_0, problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      String string0 = "iH";
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      // SystemInUtil.addInputLine("i");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a13954874);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_1.calculateOutput("iE");
      assertEquals(7, problem7_1.a1509708421);
      assertFalse(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(8, problem7_1.a198173171);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
      
      problem7_1.calculateOutput("iA");
      assertEquals(7, problem7_1.a1509708421);
      assertFalse(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(5, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      BufferedReader bufferedReader0 = Problem7.stdin;
      assertNotNull(bufferedReader0);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1732430115 = "h";
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.a1769465339 = "h";
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iK");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iE");
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.a1732430115 = "vVBH09t!w(!S)";
      problem7_0.calculateOutput("iL");
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("_K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iF");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iF");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iF");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      String string0 = "iE";
      problem7_0.calculateOutput("iE");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iK");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iE");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.a1197405602 = 8;
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iF");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iA");
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iN");
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iF");
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      
      //  Problem7.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iE");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iI");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iI");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("R_9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.a1769465339 = "";
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      String string0 = "iI";
      problem7_0.calculateOutput("iI");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iI");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.a763551610 = "";
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      String string0 = "iK";
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iH");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iL");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertTrue(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("X\"FJ:?HNpx_RRf@f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      String string0 = "11q\\W2}/<fP8gq}";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("11qW2}/<fP8gq}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.a156010946 = 879;
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(879, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      String string0 = "iF";
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(879, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(879, problem7_0.a156010946);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(879, problem7_0.a156010946);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iB");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      //  Problem7.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iB");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      BufferedReader bufferedReader0 = Problem7.stdin;
      assertNotNull(bufferedReader0);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("L>XZ]>X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iI");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      
      // SystemInUtil.addInputLine("e");
      String string0 = "f";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iH");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      String[] stringArray0 = new String[4];
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      String string0 = "iA";
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("6#mY9Bg+LnA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.a1183069670 = 7;
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iK");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a2060119244);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("TDVMbME)f'FtJqCQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iI");
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iI");
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      
      String string0 = "iI";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iI");
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iI");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("soL$ST<");
      problem7_0.calculateOutput("iI");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iF");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iD");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("i");
      // SystemInUtil.addInputLine("i");
      String string0 = "iH";
      problem7_0.calculateOutput("iH");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iA");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertTrue(problem7_1.cf);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(2, problem7_2.a540411294);
      assertTrue(problem7_2.cf);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(15, problem7_2.a1766290607);
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a2024001419 = 9;
      problem7_0.a1732430115 = "TDVMbME)f'FtJqCQ";
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iG");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iG");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e";
      problem7_0.calculateOutput("iC");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iM");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iM");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iM");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("iM");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      String string0 = "v)";
      // SystemInUtil.addInputLine("v)");
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a1732430115 = "$rK";
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("v)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.a209620869 = "iC";
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.cf = true;
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      //  Problem7.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.cf = problem7_0.cf;
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iB");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iE");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.calculateOutput("iO");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iB");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      String[] stringArray0 = null;
      //  Problem7.main((String[]) null);
      //  Problem7.main(stringArray0);
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iI");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iD");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Ct+v-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      BufferedReader bufferedReader0 = Problem7.stdin;
      assertNotNull(bufferedReader0);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("oU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.a82043083 = "!hnGeLVVwFQq&v%&#";
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      String[] stringArray0 = new String[17];
      stringArray0[0] = "g";
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("'_!V9#*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("v)");
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_1.calculateOutput("iI");
      assertEquals(8, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertFalse(problem7_1.cf);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      
      String string0 = "iJ";
      problem7_0.calculateOutput("iJ");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.a1197405602 = 8;
      String string0 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      String string1 = "iE";
      problem7_0.calculateOutput("iE");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iE");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("0TNd[|<B!c3eP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("X80b ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(7, problem7_2.a677365707);
      assertTrue(problem7_2.cf);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(14, problem7_2.a1239294920);
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_2.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a156010946);
      assertTrue(problem7_1.cf);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(6, problem7_1.a198173171);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(10, problem7_2.a156010946);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(6, problem7_2.a198173171);
      assertTrue(problem7_2.cf);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(15, problem7_2.a1197405602);
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iB");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iB");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iB");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iB");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iB");
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a13954874);
      assertTrue(problem7_1.cf);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      String string0 = "iH";
      problem7_0.calculateOutput("iH");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iH");
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("KvHP;p?HOsdC/HQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      String string0 = "iA";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.a209620869 = "iC";
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iF");
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.a792851820 = "CP!X:y$r'J+c\"wKxs";
      String string0 = "iH";
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      // SystemInUtil.addInputLine("iH");
      // SystemInUtil.addInputLine("e");
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      String string0 = "iK";
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.a771295278 = 6;
      problem7_0.a1732430115 = "iC";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iI");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("IW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(11, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("]oFiCO\"E:+'&B|J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iA");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("~`32rb|`YeZ+R!F3>VJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // SystemInUtil.addInputLine("iC");
      // SystemInUtil.addInputLine("iC");
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iB");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iN");
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iM");
      assertEquals(12, problem7_0.a311198162);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iN");
      assertEquals(12, problem7_0.a311198162);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("g");
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertTrue(problem7_1.cf);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      // SystemInUtil.addInputLine("iO");
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // SystemInUtil.addInputLine("iA");
      String[] stringArray0 = new String[23];
      stringArray0[1] = "iA";
      // SystemInUtil.addInputLine("UVO^u2+~$");
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a13954874);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_1.calculateOutput("iI");
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(8, problem7_1.a198173171);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertFalse(problem7_1.cf);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      String string0 = "iL";
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      String string1 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1732430115 = "h";
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a1769465339 = "h";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput(",O3NK_<a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      String[] stringArray0 = null;
      //  Problem7.main((String[]) null);
      //  Problem7.main(stringArray0);
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.equals((Object)problem7_1));
      assertNotSame(problem7_0, problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      String string0 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      
      //  Problem7.main((String[]) null);
      problem7_0.calculateOutput(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iE");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iE");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iO");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iA");
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      String string0 = "iB";
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("F7va+%C3G  V_Jz2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iE");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      // SystemInUtil.addInputLine((String) null);
      problem7_0.calculateOutput("iD");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("zB-8zyw{%I7E{(${^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a198173171);
      assertTrue(problem7_1.cf);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_1.calculateOutput("iF");
      assertEquals(8, problem7_1.a198173171);
      assertFalse(problem7_1.cf);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(9, problem7_2.a771295278);
      assertTrue(problem7_2.cf);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(4, problem7_2.a563946643);
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertNotNull(problem7_2);
      
      problem7_0.calculateOutput("iD");
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertFalse(problem7_0.equals((Object)problem7_2));
      assertFalse(problem7_0.equals((Object)problem7_1));
      assertNotSame(problem7_0, problem7_2);
      assertNotSame(problem7_0, problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      String string0 = "iL";
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iK");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iL");
      assertEquals(8, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("5W./_'8FSwLTQ55");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iO");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iG");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iF");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(5, problem7_1.a2060119244);
      assertTrue(problem7_1.cf);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      String string0 = "iK";
      // SystemInUtil.addInputLine("iK");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      
      // SystemInUtil.addInputLine("iK");
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1159114160);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.cf = true;
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(13, problem7_1.a1159114160);
      assertTrue(problem7_1.cf);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iE");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.a1005771223 = 3270;
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      
      String string0 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("/wZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iF");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("2u9tD0?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      String string0 = "iG";
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.cf = false;
      problem7_0.calculateOutput("iK");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(10, problem7_1.a156010946);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // SystemInUtil.addInputLine("h");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.a1769465339 = "V";
      // SystemInUtil.addInputLine("f");
      problem7_0.a574706436 = (-2607);
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals((-2607), problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iK");
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a574706436);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      String string0 = "iL";
      problem7_0.calculateOutput("iL");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      String string1 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iE");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iH");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("k%\".Sn?;z&Qa \"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iB");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      
      BufferedReader bufferedReader0 = Problem7.stdin;
      assertNotNull(bufferedReader0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iB");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iB");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      
      int int0 = 754;
      problem7_0.a563946643 = 754;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iA");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iH");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iH");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("h");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("yqrbl0V,6D(V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("e");
      problem7_0.a374718793 = "iO";
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Problem7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iI");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(1, problem7_1.a1691041769);
      assertTrue(problem7_1.cf);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iE");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a574706436);
      assertEquals(2, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.a156010946 = (-1340);
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals((-1340), problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals((-1340), problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iF");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals((-1340), problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals((-1340), problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("^x''ROu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iN");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iN");
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Qgv$M$n[$>v+kPByA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertNotNull(problem7_0);
      
      String string0 = "iH";
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(3, problem7_1.a574706436);
      assertTrue(problem7_1.cf);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      String string0 = "\"B Eb@Ym";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.equals((Object)problem7_1));
      assertNotSame(problem7_0, problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.a13954874 = (-14482067);
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals((-14482067), problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("cEYej^IBYMfec_8!");
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iI");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals((-14482067), problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g";
      stringArray0[1] = "h";
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.a1005771223 = 3270;
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.a1005771223 = 3270;
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      String[] stringArray0 = new String[0];
      //  Problem7.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.a1848973330 = "iL";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iH");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iK");
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      
      String string0 = "iE";
      Problem7 problem7_1 = new Problem7();
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(17, problem7_0.a1197405602);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a1005771223);
      assertTrue(problem7_1.cf);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_1.calculateOutput("iO");
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(2, problem7_1.a198173171);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(12, problem7_1.a1239294920);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(9, problem7_1.a1362296972);
      assertFalse(problem7_1.cf);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a1005771223);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iG");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      
      String string0 = "oX";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("oX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iK");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(6, problem7_1.a198173171);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.a1005771223 = 3270;
      problem7_0.calculateOutput("iE");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("17,'ku{*5$#4E%S#r`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      String string0 = "iG";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a198173171 = 7;
      problem7_0.cf = false;
      problem7_0.a431518964 = "iC";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iE");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("sTR:*CDG=]+0S?&SE P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iO");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iK");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iK");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a1183069670);
      assertFalse(problem7_0.cf);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(15, problem7_0.a311198162);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a657049678);
      assertTrue(problem7_1.cf);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(13, problem7_1.a1159114160);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(2, problem7_1.a540411294);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      String string0 = "iH";
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      String string1 = "iE";
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.a599457660 = "yqrbl0V,6D(V";
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e";
      stringArray0[1] = "f";
      // SystemInUtil.addInputLine("v)");
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertTrue(problem7_1.cf);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(15, problem7_2.a311198162);
      assertEquals(6, problem7_2.a1183069670);
      assertTrue(problem7_2.cf);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(10, problem7_2.a1362296972);
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_2.calculateOutput("v)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.cf = false;
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.cf = false;
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      
      //  Problem7.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.cf = false;
      String string0 = "iH";
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iH");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iG");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iK");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(12, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iD");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iH");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("");
      problem7_0.a2024001419 = (-18548323);
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iB");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iN");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      
      // SystemInUtil.addInputLine("oV");
      Problem7 problem7_1 = new Problem7();
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // SystemInUtil.addInputLine("\\+BL9O+");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("`A3v&SN~<(RdxN?ThR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      
      String string0 = "iE";
      problem7_0.calculateOutput("iE");
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.a431518964 = "iL";
      // SystemInUtil.addInputLine("oW");
      problem7_0.a1005771223 = 3270;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      
      String string0 = "9[vKVIkr3T1PJ!$Vy[";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("9[vKVIkr3T1PJ!$Vy[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("v)");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a198173171);
      assertTrue(problem7_1.cf);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(15, problem7_1.a1766290607);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(13, problem7_2.a1159114160);
      assertTrue(problem7_2.cf);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(2, problem7_2.a540411294);
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_2.calculateOutput("v)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      
      String string0 = "oW";
      problem7_0.a1005771223 = 3270;
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iN");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iG");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e";
      stringArray0[1] = "f";
      // SystemInUtil.addInputLine("e");
      problem7_0.calculateOutput("iJ");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iC");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(10, problem7_2.a1362296972);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(5, problem7_2.a2060119244);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(10, problem7_2.a156010946);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(15, problem7_2.a311198162);
      assertTrue(problem7_2.cf);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(7, problem7_2.a13954874);
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertNotNull(problem7_2);
      
      // Undeclared exception!
      try { 
        problem7_2.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.a1159114160 = 15;
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iK");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iK");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iG");
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(5, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("Current state has no transition for this input!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1197405602 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iA");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.a599457660 = "iA";
      problem7_0.calculateOutput("iN");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.a599457660 = "iO";
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iO");
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iK");
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iK");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(17, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(17, problem7_0.a1197405602);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("`#*$ /?Va5R<n~}on");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iN");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertFalse(problem7_0.cf);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("N[2-Wl+[aB%|0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iE");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("oW");
      problem7_0.a1005771223 = 3270;
      problem7_0.calculateOutput("iE");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3270, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("yA>fk(+tjai");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(12, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("P9 N77Wy Vt3R\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      
      problem7_0.calculateOutput("iD");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("");
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("q1SM-P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("AI(j&$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iB");
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      
      BufferedReader bufferedReader0 = Problem7.stdin;
      assertNotNull(bufferedReader0);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("SU&sGQM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iO");
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      
      problem7_0.calculateOutput("iO");
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iE");
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      
      String string0 = "vJEz7#wvGr";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("/`.NV/,*4rk7%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.a1769465339 = "";
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.cf = false;
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      
      String string0 = "iE";
      problem7_0.calculateOutput("iE");
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("2wc~<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      
      // SystemInUtil.addInputLine("iH");
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iH");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(13, problem7_0.a1159114160);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("\"CGq|t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      String string0 = "iG";
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a1239294920);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertNotNull(problem7_0);
      
      String string0 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      
      String string1 = "iK";
      problem7_0.a1362296972 = 12;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a198173171 = 9;
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.a1732526862 = "iA";
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iH");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iI");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      
      String string0 = "oX";
      problem7_0.calculateOutput("iA");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("w-N-d^v{)'k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(11, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("i");
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(8, problem7_1.a2024001419);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // SystemInUtil.addInputLine("h");
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a657049678);
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a1509708421);
      assertTrue(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.a574706436 = (-14482067);
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals((-14482067), problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iK");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(4, problem7_0.a198173171);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iB");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      String string0 = "iF";
      problem7_0.calculateOutput("iF");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1362296972 = 9;
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iG");
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iG");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1005771223);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1005771223);
      assertTrue(problem7_1.cf);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(2, problem7_1.a540411294);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_1.calculateOutput("J{]vm`Ng4B0\u0000UffN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      problem7_0.a1159114160 = 15;
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iK");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.a338324946 = "iB";
      // SystemInUtil.addInputLine("f");
      problem7_0.a1159114160 = 1153;
      problem7_0.calculateOutput("iL");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iD");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iJ");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iB");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a574706436);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertTrue(problem7_0.cf);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertNotNull(problem7_0);
      
      problem7_0.a1159114160 = 15;
      problem7_0.calculateOutput("iC");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iL");
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.a341832027 = "iL";
      problem7_0.calculateOutput("iD");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      
      problem7_0.calculateOutput("iB");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
      
      problem7_0.calculateOutput("iL");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a1197405602);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      // SystemInUtil.addInputLine("iM");
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iM");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      String string0 = "iM";
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iC");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      String string1 = "iN";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("2a^,@.z6U2H(iNweg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertTrue(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1732430115 = "h";
      problem7_0.calculateOutput("iC");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.a1769465339 = "h";
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertTrue(problem7_1.cf);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      problem7_0.calculateOutput("iG");
      assertEquals(4, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.equals((Object)problem7_1));
      assertNotSame(problem7_0, problem7_1);
      
      problem7_1.calculateOutput("iA");
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertEquals(6, problem7_1.a2060119244);
      assertEquals(9, problem7_1.a771295278);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a657049678);
      assertFalse(problem7_1.cf);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(8, problem7_1.a198173171);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotSame(problem7_1, problem7_0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      
      problem7_0.calculateOutput("iM");
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a156010946);
      
      // SystemInUtil.addInputLine("5/~a,{bR$");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("5/~a,{bR$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertNotNull(problem7_0);
      
      problem7_0.a1159114160 = 15;
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iK");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1159114160 = 1153;
      problem7_0.calculateOutput("iL");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iD");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iK");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a540411294);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("sn ^tBv?}S=~G0YS+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iH");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      
      String string0 = "iE";
      problem7_0.calculateOutput("iE");
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(4, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a198173171);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("@~!::ILZnG{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.a771295278 = 6;
      problem7_0.a1732430115 = "iC";
      // SystemInUtil.addInputLine("f");
      problem7_0.calculateOutput("iI");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iI");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iC");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iI");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iI");
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iO");
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iN");
      assertEquals(12, problem7_0.a771295278);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a198173171);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iB");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      problem7_0.calculateOutput("iB");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(11, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      
      Problem7 problem7_1 = new Problem7();
      assertEquals(6, problem7_1.a1183069670);
      assertEquals(15, problem7_1.a1005771223);
      assertEquals(15, problem7_1.a1766290607);
      assertEquals(7, problem7_1.a13954874);
      assertEquals(15, problem7_1.a311198162);
      assertEquals(2, problem7_1.a540411294);
      assertEquals(10, problem7_1.a156010946);
      assertEquals(6, problem7_1.a198173171);
      assertEquals(15, problem7_1.a1197405602);
      assertEquals(14, problem7_1.a1239294920);
      assertEquals(8, problem7_1.a2024001419);
      assertEquals(7, problem7_1.a677365707);
      assertEquals(13, problem7_1.a1159114160);
      assertEquals(4, problem7_1.a563946643);
      assertEquals(1, problem7_1.a1691041769);
      assertEquals(10, problem7_1.a657049678);
      assertEquals(7, problem7_1.a1509708421);
      assertEquals(9, problem7_1.a771295278);
      assertTrue(problem7_1.cf);
      assertEquals(5, problem7_1.a2060119244);
      assertEquals(10, problem7_1.a1362296972);
      assertEquals(3, problem7_1.a574706436);
      assertFalse(problem7_1.equals((Object)problem7_0));
      assertNotNull(problem7_1);
      
      Problem7 problem7_2 = new Problem7();
      assertEquals(10, problem7_2.a156010946);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(15, problem7_2.a1197405602);
      assertEquals(14, problem7_2.a1239294920);
      assertEquals(6, problem7_2.a198173171);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(10, problem7_2.a1362296972);
      assertTrue(problem7_2.cf);
      assertEquals(5, problem7_2.a2060119244);
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertNotNull(problem7_2);
      
      problem7_2.calculateOutput("iH");
      assertEquals(10, problem7_2.a156010946);
      assertEquals(3, problem7_2.a574706436);
      assertEquals(15, problem7_2.a1766290607);
      assertEquals(6, problem7_2.a1183069670);
      assertEquals(4, problem7_2.a563946643);
      assertEquals(8, problem7_2.a2024001419);
      assertEquals(15, problem7_2.a311198162);
      assertEquals(10, problem7_2.a1239294920);
      assertEquals(2, problem7_2.a198173171);
      assertEquals(15, problem7_2.a1197405602);
      assertFalse(problem7_2.cf);
      assertEquals(1, problem7_2.a1691041769);
      assertEquals(7, problem7_2.a1509708421);
      assertEquals(7, problem7_2.a13954874);
      assertEquals(7, problem7_2.a677365707);
      assertEquals(2, problem7_2.a540411294);
      assertEquals(13, problem7_2.a1159114160);
      assertEquals(15, problem7_2.a1005771223);
      assertEquals(10, problem7_2.a657049678);
      assertEquals(9, problem7_2.a771295278);
      assertEquals(9, problem7_2.a1362296972);
      assertEquals(5, problem7_2.a2060119244);
      assertFalse(problem7_2.equals((Object)problem7_0));
      assertFalse(problem7_2.equals((Object)problem7_1));
      assertNotSame(problem7_2, problem7_0);
      assertNotSame(problem7_2, problem7_1);
      
      // Undeclared exception!
      try { 
        problem7_2.calculateOutput("v)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a540411294);
      assertTrue(problem7_0.cf);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.a1159114160 = 15;
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iK");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(3, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iC");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(15, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.a599457660 = "iC";
      // SystemInUtil.addInputLine("f");
      problem7_0.a1159114160 = 1153;
      problem7_0.calculateOutput("iL");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      
      problem7_0.calculateOutput("iK");
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(5, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a13954874);
      assertEquals(1153, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("YCL4#@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      String string0 = "iH";
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(1, problem7_0.a1691041769);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iH");
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(12, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a563946643);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(6, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      String string1 = "(`7[JAtSj";
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("(`7[JAtSj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      String string0 = "iL";
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iB");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iF");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iF");
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(8, problem7_0.a2024001419);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      String string1 = "";
      problem7_0.a1159114160 = 16;
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertNotNull(problem7_0);
      
      String string0 = "iO";
      String string1 = "iA";
      String string2 = "iO";
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iA");
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      problem7_0.calculateOutput("iO");
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("A}Yv6^;Gdq6(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      // SystemInUtil.addInputLine("i");
      problem7_0.calculateOutput("iL");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iH");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a677365707);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(6, problem7_0.a2060119244);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("PV$U,BW:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iH");
      assertEquals(8, problem7_0.a198173171);
      assertEquals(7, problem7_0.a1509708421);
      assertFalse(problem7_0.cf);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iM");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(9, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a2024001419);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(10, problem7_0.a657049678);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertTrue(problem7_0.cf);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(2, problem7_0.a198173171);
      
      problem7_0.calculateOutput("iO");
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iN");
      assertEquals(5, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.calculateOutput("iC");
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      problem7_0.a341832027 = ":4ghQUJTq";
      problem7_0.calculateOutput("iI");
      assertEquals(8, problem7_0.a198173171);
      assertFalse(problem7_0.cf);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(10, problem7_0.a1159114160);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(3, problem7_0.a2060119244);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(12, problem7_0.a771295278);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(3, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(17, problem7_0.a1197405602);
      assertEquals(14, problem7_0.a1239294920);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("tqr9V_2sB:^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertTrue(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a1362296972);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iO");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      
      problem7_0.calculateOutput("iM");
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(6, problem7_0.a574706436);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iG");
      assertEquals(6, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("f");
      problem7_0.a1362296972 = 9;
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      // SystemInUtil.addInputLine("");
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iB");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      problem7_0.calculateOutput("iO");
      assertEquals(10, problem7_0.a657049678);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(8, problem7_0.a1691041769);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(8, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertFalse(problem7_0.cf);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a574706436);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(9, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(9, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(2, problem7_0.a540411294);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertTrue(problem7_0.cf);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      assertNotNull(problem7_0);
      
      problem7_0.calculateOutput("iM");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(15, problem7_0.a1005771223);
      
      problem7_0.calculateOutput("iM");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      String string0 = "iK";
      problem7_0.calculateOutput("iM");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iC");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iK");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      problem7_0.calculateOutput("iM");
      assertFalse(problem7_0.cf);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(8, problem7_0.a2024001419);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(13, problem7_0.a1005771223);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(13, problem7_0.a1362296972);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(11, problem7_0.a311198162);
      assertEquals(7, problem7_0.a13954874);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(8, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      
      // SystemInUtil.addInputLine("");
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Problem7 problem7_0 = new Problem7();
      assertEquals(7, problem7_0.a13954874);
      assertTrue(problem7_0.cf);
      assertEquals(15, problem7_0.a1005771223);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertEquals(10, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(14, problem7_0.a1239294920);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(6, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      assertNotNull(problem7_0);
      
      problem7_0.a1005771223 = 10;
      problem7_0.a792851820 = "T8M{t";
      String string0 = "iM";
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(5, problem7_0.a2060119244);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(2, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.a817884456 = "iM";
      problem7_0.calculateOutput("iJ");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(7, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      problem7_0.calculateOutput("iO");
      assertEquals(7, problem7_0.a13954874);
      assertEquals(6, problem7_0.a1183069670);
      assertEquals(2, problem7_0.a540411294);
      assertEquals(15, problem7_0.a311198162);
      assertFalse(problem7_0.cf);
      assertEquals(9, problem7_0.a2060119244);
      assertEquals(9, problem7_0.a1362296972);
      assertEquals(3, problem7_0.a574706436);
      assertEquals(10, problem7_0.a657049678);
      assertEquals(9, problem7_0.a771295278);
      assertEquals(13, problem7_0.a1159114160);
      assertEquals(4, problem7_0.a563946643);
      assertEquals(12, problem7_0.a1239294920);
      assertEquals(7, problem7_0.a677365707);
      assertEquals(1, problem7_0.a1691041769);
      assertEquals(7, problem7_0.a1509708421);
      assertEquals(15, problem7_0.a1766290607);
      assertEquals(10, problem7_0.a1005771223);
      assertEquals(10, problem7_0.a156010946);
      assertEquals(4, problem7_0.a198173171);
      assertEquals(15, problem7_0.a1197405602);
      assertEquals(8, problem7_0.a2024001419);
      
      // Undeclared exception!
      try { 
        problem7_0.calculateOutput("k-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem7", e);
      }
  }
}
