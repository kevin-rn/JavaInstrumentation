package nl.tudelft.mutated_rers;
/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 15 13:08:52 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;

public class Problem11_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a168638684 = 10;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a1023470345 = 14;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a990334020 = "g";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.a399501280 = 12;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.a894128990 = "f";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.a1537379265 = 10;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.a1575755525 = 15;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a1980207818 = "e";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a1370900715 = 9;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a780728121 = "e";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      
      problem11_0.calculateOutput("E");
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a919251806);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a553209804);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.calculateOutput("F");
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }


  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a1537379265 = 8;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      
      problem11_0.a729595174 = "i";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.a1537379265 = 15;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("2s6XV QJO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.a1537379265 = 9;
      problem11_0.calculateOutput("e");
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a553209804);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a419289115 = 5;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      
      problem11_0.a1283870923 = "g";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.a2128642633 = 9;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      
      Problem11 problem11_1 = new Problem11();
      assertFalse(problem11_1.equals((Object)problem11_0));
      assertNotNull(problem11_1);
      assertEquals(8, problem11_1.a399501280);
      assertEquals(4, problem11_1.a521273111);
      assertEquals(9, problem11_1.a1209890889);
      assertEquals(10, problem11_1.a1575755525);
      assertEquals(10, problem11_1.a1565409750);
      assertEquals(10, problem11_1.a1370900715);
      assertEquals(11, problem11_1.a547511656);
      assertEquals(12, problem11_1.a2128642633);
      assertEquals(8, problem11_1.a2021551447);
      assertEquals(9, problem11_1.a1023470345);
      assertEquals(14, problem11_1.a1537379265);
      assertEquals(10, problem11_1.a419289115);
      assertEquals(14, problem11_1.a1735071167);
      assertEquals(9, problem11_1.a823314445);
      assertEquals(13, problem11_1.a1824730115);
      assertEquals(5, problem11_1.a553209804);
      assertEquals(5, problem11_1.a919251806);
      assertEquals(12, problem11_1.a1392217129);
      assertEquals(15, problem11_1.a71487061);
      assertTrue(problem11_1.cf);
      assertEquals(6, problem11_1.a553986020);
      assertEquals(15, problem11_1.a168638684);
      
      problem11_1.a419289115 = 12;
      // Undeclared exception!
      try { 
        problem11_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.calculateOutput("B");
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.calculateOutput("F");
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a1824730115 = 12;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.a1367961664 = "h";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.a168638684 = 12;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a1392217129 = 15;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.a71487061 = 14;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      
      problem11_0.a1537379265 = 11;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      
      problem11_0.calculateOutput("B");
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(12, problem11_0.a1824730115);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.calculateOutput("I");
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(15, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(12, problem11_0.a1824730115);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("B");
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("I");
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a1537379265);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("B");
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.a894128990 = "i";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a1283870923 = "h";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.a1537379265 = 13;
      problem11_0.calculateOutput("i");
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.a71487061 = 11;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.a553209804 = 8;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.a1643269988 = "h";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.a1565409750 = 9;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.a1367961664 = "g";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.a823314445 = 12;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.a894128990 = "e";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a1735071167 = 10;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      
      problem11_0.a1370900715 = 15;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a71487061 = 17;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      
      problem11_0.a894128990 = "f";
      problem11_0.a1735071167 = 12;
      problem11_0.calculateOutput("B");
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(12, problem11_0.a1735071167);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1824730115);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      
      Problem11 problem11_1 = new Problem11();
      assertFalse(problem11_1.equals((Object)problem11_0));
      assertNotNull(problem11_1);
      assertEquals(11, problem11_1.a547511656);
      assertEquals(4, problem11_1.a521273111);
      assertEquals(9, problem11_1.a1023470345);
      assertEquals(15, problem11_1.a168638684);
      assertEquals(10, problem11_1.a1370900715);
      assertEquals(14, problem11_1.a1735071167);
      assertEquals(9, problem11_1.a823314445);
      assertEquals(14, problem11_1.a1537379265);
      assertEquals(15, problem11_1.a71487061);
      assertEquals(10, problem11_1.a419289115);
      assertEquals(5, problem11_1.a553209804);
      assertEquals(5, problem11_1.a919251806);
      assertTrue(problem11_1.cf);
      assertEquals(6, problem11_1.a553986020);
      assertEquals(10, problem11_1.a1575755525);
      assertEquals(10, problem11_1.a1565409750);
      assertEquals(12, problem11_1.a2128642633);
      assertEquals(8, problem11_1.a399501280);
      assertEquals(9, problem11_1.a1209890889);
      assertEquals(13, problem11_1.a1824730115);
      assertEquals(12, problem11_1.a1392217129);
      assertEquals(8, problem11_1.a2021551447);
      
      problem11_0.a1735071167 = 10;
      problem11_1.a1575755525 = 8;
      // Undeclared exception!
      try { 
        problem11_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.a521273111 = 2;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.a780728121 = "i0yQl";
      problem11_0.a894128990 = "i";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.a1304806974 = "f";
      problem11_0.calculateOutput("F");
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.a547511656 = 6;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.a76449788 = "f";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // SystemInUtil.addInputLine("mo~T/H");
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      
      problem11_0.a1360225377 = "h";
      problem11_0.a1824730115 = 10;
      problem11_0.a572079232 = "h";
      problem11_0.a270033534 = "h";
      problem11_0.a894128990 = "h";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("B");
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("H");
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.a512217640 = "h";
      problem11_0.calculateOutput("B");
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("H");
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("H");
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.a1735071167 = 13;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertFalse(problem11_0.cf);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.calculateOutput("A");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertFalse(problem11_0.cf);
      assertEquals(13, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i";
      problem11_0.a1537379265 = 97;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.calculateOutput("F");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.calculateOutput("J");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.calculateOutput("F");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.calculateOutput("F");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.calculateOutput("B");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.calculateOutput("F");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.a1537379265 = 5;
      problem11_0.a1824730115 = 15;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.a168638684 = 8;
      problem11_0.calculateOutput("i");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(8, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1209890889);
      
      Problem11 problem11_1 = new Problem11();
      assertFalse(problem11_1.equals((Object)problem11_0));
      assertNotNull(problem11_1);
      assertTrue(problem11_1.cf);
      assertEquals(9, problem11_1.a823314445);
      assertEquals(5, problem11_1.a919251806);
      assertEquals(13, problem11_1.a1824730115);
      assertEquals(5, problem11_1.a553209804);
      assertEquals(14, problem11_1.a1735071167);
      assertEquals(12, problem11_1.a1392217129);
      assertEquals(10, problem11_1.a1370900715);
      assertEquals(12, problem11_1.a2128642633);
      assertEquals(9, problem11_1.a1023470345);
      assertEquals(10, problem11_1.a419289115);
      assertEquals(10, problem11_1.a1565409750);
      assertEquals(10, problem11_1.a1575755525);
      assertEquals(8, problem11_1.a399501280);
      assertEquals(8, problem11_1.a2021551447);
      assertEquals(9, problem11_1.a1209890889);
      assertEquals(11, problem11_1.a547511656);
      assertEquals(14, problem11_1.a1537379265);
      assertEquals(6, problem11_1.a553986020);
      assertEquals(15, problem11_1.a71487061);
      assertEquals(4, problem11_1.a521273111);
      assertEquals(15, problem11_1.a168638684);
      
      problem11_1.a1209890889 = 6;
      // Undeclared exception!
      try { 
        problem11_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.a1735071167 = 10;
      problem11_0.a168638684 = 13;
      problem11_0.calculateOutput("h");
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(13, problem11_0.a168638684);
      assertFalse(problem11_0.cf);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a1370900715 = 13;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.a1023470345 = 11;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.a1537379265 = 386;
      problem11_0.a1304806974 = "g";
      problem11_0.a168638684 = 8;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1209890889);
      
      problem11_0.a1304806974 = "]+$jYLv#&HVKJ";
      problem11_0.a1392217129 = 15;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.a1360225377 = "h";
      problem11_0.a1537379265 = 8;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      
      problem11_0.a399501280 = 13;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.a61085062 = "i";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      
      problem11_0.a1283870923 = "h";
      problem11_0.a894128990 = "h";
      problem11_0.a1537379265 = 11;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      
      Problem11 problem11_1 = new Problem11();
      assertFalse(problem11_1.equals((Object)problem11_0));
      assertNotNull(problem11_1);
      assertEquals(8, problem11_1.a399501280);
      assertEquals(10, problem11_1.a1575755525);
      assertEquals(10, problem11_1.a1565409750);
      assertEquals(9, problem11_1.a1209890889);
      assertEquals(4, problem11_1.a521273111);
      assertEquals(12, problem11_1.a2128642633);
      assertEquals(8, problem11_1.a2021551447);
      assertEquals(15, problem11_1.a168638684);
      assertTrue(problem11_1.cf);
      assertEquals(6, problem11_1.a553986020);
      assertEquals(14, problem11_1.a1735071167);
      assertEquals(5, problem11_1.a919251806);
      assertEquals(12, problem11_1.a1392217129);
      assertEquals(15, problem11_1.a71487061);
      assertEquals(13, problem11_1.a1824730115);
      assertEquals(5, problem11_1.a553209804);
      assertEquals(9, problem11_1.a823314445);
      assertEquals(9, problem11_1.a1023470345);
      assertEquals(14, problem11_1.a1537379265);
      assertEquals(10, problem11_1.a419289115);
      assertEquals(11, problem11_1.a547511656);
      assertEquals(10, problem11_1.a1370900715);
      
      problem11_0.a1360225377 = "f";
      // SystemInUtil.addInputLine("h");
      problem11_0.a553986020 = 8;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a2021551447);
      
      problem11_0.calculateOutput("B");
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a2021551447);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a2021551447);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(8, problem11_0.a2021551447);
      
      problem11_0.a919251806 = 10;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.calculateOutput("B");
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.a419289115 = 9;
      problem11_0.calculateOutput("J");
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.calculateOutput("F");
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.calculateOutput("J");
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a419289115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      
      Problem11 problem11_1 = new Problem11();
      assertFalse(problem11_1.equals((Object)problem11_0));
      assertNotNull(problem11_1);
      assertTrue(problem11_1.cf);
      assertEquals(10, problem11_1.a419289115);
      assertEquals(14, problem11_1.a1735071167);
      assertEquals(13, problem11_1.a1824730115);
      assertEquals(5, problem11_1.a553209804);
      assertEquals(12, problem11_1.a2128642633);
      assertEquals(9, problem11_1.a823314445);
      assertEquals(10, problem11_1.a1370900715);
      assertEquals(15, problem11_1.a71487061);
      assertEquals(10, problem11_1.a1565409750);
      assertEquals(9, problem11_1.a1023470345);
      assertEquals(11, problem11_1.a547511656);
      assertEquals(9, problem11_1.a1209890889);
      assertEquals(4, problem11_1.a521273111);
      assertEquals(8, problem11_1.a2021551447);
      assertEquals(14, problem11_1.a1537379265);
      assertEquals(12, problem11_1.a1392217129);
      assertEquals(8, problem11_1.a399501280);
      assertEquals(10, problem11_1.a1575755525);
      assertEquals(15, problem11_1.a168638684);
      assertEquals(5, problem11_1.a919251806);
      assertEquals(6, problem11_1.a553986020);
      
      problem11_1.a1209890889 = 11;
      // Undeclared exception!
      try { 
        problem11_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      
      Problem11 problem11_1 = new Problem11();
      assertFalse(problem11_1.equals((Object)problem11_0));
      assertNotNull(problem11_1);
      assertEquals(9, problem11_1.a1209890889);
      assertEquals(15, problem11_1.a168638684);
      assertEquals(4, problem11_1.a521273111);
      assertEquals(10, problem11_1.a1565409750);
      assertEquals(15, problem11_1.a71487061);
      assertEquals(14, problem11_1.a1537379265);
      assertEquals(11, problem11_1.a547511656);
      assertEquals(9, problem11_1.a1023470345);
      assertEquals(10, problem11_1.a1370900715);
      assertEquals(5, problem11_1.a553209804);
      assertEquals(13, problem11_1.a1824730115);
      assertEquals(14, problem11_1.a1735071167);
      assertTrue(problem11_1.cf);
      assertEquals(9, problem11_1.a823314445);
      assertEquals(10, problem11_1.a419289115);
      assertEquals(6, problem11_1.a553986020);
      assertEquals(12, problem11_1.a2128642633);
      assertEquals(8, problem11_1.a2021551447);
      assertEquals(12, problem11_1.a1392217129);
      assertEquals(8, problem11_1.a399501280);
      assertEquals(10, problem11_1.a1575755525);
      assertEquals(5, problem11_1.a919251806);
      
      problem11_0.a1360225377 = "f";
      problem11_0.a553986020 = 10;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      
      problem11_0.calculateOutput("F");
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      
      problem11_0.calculateOutput("J");
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(13, problem11_0.a1537379265);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.calculateOutput("B");
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.calculateOutput("B");
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.calculateOutput("F");
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.calculateOutput("J");
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.calculateOutput("F");
      assertEquals(12, problem11_0.a168638684);
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.calculateOutput("B");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1537379265);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a1360225377 = "e";
      problem11_0.a1537379265 = 8;
      problem11_0.calculateOutput("e");
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a1537379265);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // SystemInUtil.addInputLine("G7csS-'7/");
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.a1283870923 = "h";
      problem11_0.a270033534 = "G7csS-'7/";
      problem11_0.a894128990 = "h";
      problem11_0.a919251806 = 4;
      problem11_0.a2021551447 = 14;
      problem11_0.a1537379265 = 12;
      problem11_0.calculateOutput("h");
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(4, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a2021551447);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a1367961664 = "e";
      problem11_0.a1304806974 = "e";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertTrue(problem11_0.cf);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.a547511656 = 7;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.a2128642633 = 11;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("B");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1537379265);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(17, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // SystemInUtil.addInputLine("G7csS-'7/");
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.a1824730115 = 41;
      problem11_0.a1283870923 = "h";
      problem11_0.a894128990 = "h";
      problem11_0.a919251806 = 6;
      problem11_0.a1735071167 = 10;
      problem11_0.a1537379265 = 11;
      problem11_0.a71487061 = 11;
      problem11_0.calculateOutput("h");
      assertEquals(10, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(6, problem11_0.a919251806);
      assertEquals(11, problem11_0.a71487061);
      assertEquals(41, problem11_0.a1824730115);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("B");
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("F");
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      problem11_0.calculateOutput("G");
      assertEquals(15, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.a2021551447 = 5;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.a1575755525 = 7;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("B/0Lo2^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a270033534 = "f";
      problem11_0.a553986020 = 1496;
      problem11_0.a894128990 = "f";
      problem11_0.a1537379265 = 11;
      problem11_0.a71487061 = 11;
      problem11_0.calculateOutput("X");
      assertEquals(1496, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a1537379265);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a71487061);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // SystemInUtil.addInputLine("mo~T/H");
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.a1283870923 = "i";
      problem11_0.a1537379265 = 12;
      problem11_0.a270033534 = "h";
      problem11_0.calculateOutput("mo~T/H");
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.calculateOutput("B");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.calculateOutput("F");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.calculateOutput("G");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(15, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1735071167);
      
      problem11_0.calculateOutput("B");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(15, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1735071167);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      
      // SystemInUtil.addInputLine("f");
      problem11_0.a823314445 = 16;
      problem11_0.a553986020 = 9;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      
      problem11_0.a1980207818 = "e";
      problem11_0.a71487061 = 11;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a2021551447 = 6;
      problem11_0.a71487061 = 0;
      problem11_0.calculateOutput("E");
      assertEquals(9, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(0, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a2021551447);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertTrue(problem11_0.cf);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.calculateOutput("B");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a1392217129 = 10;
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(17, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(17, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertTrue(problem11_0.cf);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a2021551447 = 7;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertTrue(problem11_0.cf);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.calculateOutput("J");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      
      problem11_0.calculateOutput("F");
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("E");
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a919251806);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("I");
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a919251806);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.a1824730115 = 9;
      problem11_0.a1283870923 = "g";
      problem11_0.a894128990 = "f";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      
      problem11_0.calculateOutput("E");
      assertEquals(9, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      
      problem11_0.calculateOutput("C");
      assertEquals(11, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.calculateOutput("F");
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.calculateOutput("J");
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.calculateOutput("F");
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.calculateOutput("F");
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      
      problem11_0.calculateOutput("J");
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a1370900715);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.a1360225377 = "";
      problem11_0.a61085062 = "i";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      
      problem11_0.calculateOutput("E");
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1537379265);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      
      problem11_0.a2007907442 = "E";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a547511656 = 7;
      problem11_0.a521273111 = 7;
      problem11_0.a553209804 = 7;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertTrue(problem11_0.cf);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.a270033534 = "f";
      problem11_0.a553986020 = 5;
      problem11_0.a894128990 = "f";
      problem11_0.a1537379265 = 10;
      problem11_0.a71487061 = 11;
      problem11_0.calculateOutput("X");
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a71487061);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a553986020);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a1392217129);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      
      problem11_0.a1023470345 = 16;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      
      problem11_0.a919251806 = 10;
      problem11_0.a547511656 = 8;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.a1304806974 = "g";
      problem11_0.a1392217129 = 17;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.a780728121 = "e";
      problem11_0.calculateOutput("B");
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.calculateOutput("F");
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a1537379265);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      problem11_0.calculateOutput("A");
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a419289115);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.a2021551447 = 7;
      problem11_0.a71487061 = 7;
      problem11_0.calculateOutput("E");
      assertEquals(7, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(7, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(11, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.a1283870923 = "h";
      problem11_0.a894128990 = "f";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.calculateOutput("B");
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(5, problem11_0.a919251806);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a2021551447 = 0;
      problem11_0.a547511656 = (-1);
      problem11_0.calculateOutput("F");
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(0, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a919251806);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals((-1), problem11_0.a547511656);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.calculateOutput("D");
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(15, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1392217129);
      assertEquals(0, problem11_0.a2021551447);
      assertEquals(5, problem11_0.a919251806);
      assertFalse(problem11_0.cf);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals((-1), problem11_0.a547511656);
      assertEquals(5, problem11_0.a553209804);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.calculateOutput("F");
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.calculateOutput("J");
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(13, problem11_0.a1537379265);
      
      problem11_0.calculateOutput("F");
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.calculateOutput("B");
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
      
      problem11_0.calculateOutput("F");
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a1023470345);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(4, problem11_0.a521273111);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a553209804);
      
      problem11_0.a1824730115 = 15;
      problem11_0.a168638684 = (-1749);
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput(")2p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertTrue(problem11_0.cf);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("B");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("J");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      
      problem11_0.calculateOutput("G");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(8, problem11_0.a2021551447);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.calculateOutput("B");
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      
      problem11_0.calculateOutput("I");
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(15, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a547511656);
      
      problem11_0.calculateOutput("B");
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      
      problem11_0.calculateOutput("C");
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a521273111);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a1209890889);
      assertFalse(problem11_0.cf);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(11, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertTrue(problem11_0.cf);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.a919251806 = 8;
      problem11_0.a521273111 = 7;
      problem11_0.a553209804 = 7;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("F");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("J");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("F");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("F");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(11, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a919251806);
      
      problem11_0.calculateOutput("I");
      assertEquals(15, problem11_0.a168638684);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertFalse(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(5, problem11_0.a919251806);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertTrue(problem11_0.cf);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.calculateOutput("F");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.calculateOutput("J");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1537379265);
      assertFalse(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.a2007907442 = "p]w";
      problem11_0.calculateOutput("I");
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertFalse(problem11_0.cf);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(4, problem11_0.a521273111);
      
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(6, problem11_0.a553986020);
      assertTrue(problem11_0.cf);
      assertEquals(4, problem11_0.a521273111);
      
      problem11_0.a1980207818 = "g";
      problem11_0.a71487061 = 11;
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertTrue(problem11_0.cf);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      
      problem11_0.calculateOutput("F");
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      
      // SystemInUtil.addInputLine((String) null);
      problem11_0.calculateOutput("J");
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
      
      // SystemInUtil.addInputLine("f");
      problem11_0.calculateOutput("E");
      assertEquals(14, problem11_0.a1392217129);
      assertEquals(10, problem11_0.a168638684);
      assertEquals(15, problem11_0.a71487061);
      assertFalse(problem11_0.cf);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(7, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(6, problem11_0.a553986020);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertTrue(problem11_0.cf);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(12, problem11_0.a1392217129);
      
      problem11_0.calculateOutput("F");
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      
      // SystemInUtil.addInputLine((String) null);
      problem11_0.calculateOutput("J");
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(13, problem11_0.a1537379265);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
      
      problem11_0.calculateOutput("H");
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a71487061);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a1537379265);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(14, problem11_0.a1392217129);
      assertFalse(problem11_0.cf);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(10, problem11_0.a419289115);
      assertTrue(problem11_0.cf);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(15, problem11_0.a168638684);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(15, problem11_0.a71487061);
      
      problem11_0.a1367961664 = "h";
      problem11_0.a1304806974 = "e";
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("&tE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Problem11 problem11_0 = new Problem11();
      assertNotNull(problem11_0);
      assertEquals(11, problem11_0.a547511656);
      assertEquals(8, problem11_0.a399501280);
      assertEquals(9, problem11_0.a1209890889);
      assertEquals(8, problem11_0.a2021551447);
      assertEquals(14, problem11_0.a1537379265);
      assertEquals(15, problem11_0.a71487061);
      assertEquals(10, problem11_0.a1370900715);
      assertEquals(10, problem11_0.a1565409750);
      assertEquals(9, problem11_0.a1023470345);
      assertEquals(10, problem11_0.a419289115);
      assertEquals(5, problem11_0.a553209804);
      assertEquals(5, problem11_0.a919251806);
      assertEquals(14, problem11_0.a1735071167);
      assertEquals(12, problem11_0.a2128642633);
      assertEquals(9, problem11_0.a823314445);
      assertEquals(13, problem11_0.a1824730115);
      assertEquals(12, problem11_0.a1392217129);
      assertEquals(6, problem11_0.a553986020);
      assertEquals(10, problem11_0.a1575755525);
      assertEquals(4, problem11_0.a521273111);
      assertEquals(15, problem11_0.a168638684);
      assertTrue(problem11_0.cf);
      
      problem11_0.a270033534 = "";
      problem11_0.a1735071167 = 12;
      problem11_0.a512217640 = "h";
      // SystemInUtil.addInputLine("f");
      // Undeclared exception!
      try { 
        problem11_0.calculateOutput("tE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem11", e);
      }
  }
}
