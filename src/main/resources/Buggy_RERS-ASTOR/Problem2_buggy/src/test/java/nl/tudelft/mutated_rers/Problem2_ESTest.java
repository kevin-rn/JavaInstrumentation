package nl.tudelft.mutated_rers;

/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 15 14:43:12 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedReader;

public class Problem2_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("oZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.a1232164262 = 0;
      problem2_0.a1937683863 = 0;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a139631443 = 128;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("U1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      
      String string0 = "z`";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("z`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Invalid input: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a1527387912 = (-211);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.calculateOutput("iB");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a820621035 = "iB";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      problem2_0.a158034514 = "6ZU^";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("oZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iA");
      assertEquals(270, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(194, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-76), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iA");
      assertEquals(93, problem2_0.a139631443);
      assertEquals(273, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(143, problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(218, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.a929601760 = "QtjO)F;Dr";
      String string0 = "iC";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertNotNull(problem2_0);
      
      problem2_0.a929601760 = "iA";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(236, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-11784), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-16087), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-29842), problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-13168), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(75, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(190, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(121, problem2_0.a857832659);
      assertEquals(39, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(75, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(190, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(121, problem2_0.a857832659);
      assertEquals(39, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a820621035 = "$d{d*e\"r{ZV";
      String string0 = "iC";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a857832659 = 33;
      String string0 = "iI";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a861570395 = "iA";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("r wb&`CK7TmzKO+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a1658575004 = 4300;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a1740312253 = (-10866);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 186;
      problem2_0.a291872378 = "iG";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("oU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 1331;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("sW\">E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a861570395 = "@XSq'%4v7B";
      problem2_0.a291872378 = "@XSq'%4v7B";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(106, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(267, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(241, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      BufferedReader bufferedReader0 = Problem2.stdin;
      assertNotNull(bufferedReader0);
      
      Problem2.stdin = bufferedReader0;
      problem2_0.a1763547350 = (-142);
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iH");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("w&9764s`YY a>s$,a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);

      problem2_0.calculateOutput("iA");
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput(">LE'U%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(76, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(76, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);

      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iB");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-26170), problem2_0.a857832659);
      assertEquals((-21678), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-29233), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-26131), problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-5068), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-26170), problem2_0.a857832659);
      assertEquals((-21678), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-29233), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-26131), problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-5068), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-26170), problem2_0.a857832659);
      assertEquals((-21678), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-29233), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-26131), problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-5068), problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-7587), problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(79, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-20), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(41, problem2_0.a1937683863);
      assertEquals(135, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iF");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(174, problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(320, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(265, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(92, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(174, problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(320, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(265, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(92, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iF");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(174, problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(320, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(265, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(92, problem2_0.a139631443);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iG");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(79, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(72, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(243, problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(30, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("XUU6GQcIy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a2000761798 = 4490;
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4490, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.a861570395 = "iVyL7Jp[Ocgq#t";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertNotNull(problem2_0);
      
      problem2_0.a860422652 = 5;
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a571734306);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(100, problem2_0.a857832659);
      assertEquals((-69), problem2_0.a139631443);

      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("\"~_}_X.|84b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      String string0 = "iD";
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-69), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("a;r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iF");
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(76, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(60, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iF");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(89, problem2_0.a139631443);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(288, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(153, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("xEwl~h~l:M^\"H:%Ip");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(76, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-22857), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-16487), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-23134), problem2_0.a1937683863);
      assertEquals((-10921), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-21995), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-22857), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-16487), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-23134), problem2_0.a1937683863);
      assertEquals((-10921), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-21995), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(8, problem2_1.a38407862);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iH");
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(13, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(13, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(13, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(13, problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      problem2_0.calculateOutput("iC");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a857832659);
      assertEquals(134, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-89), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a857832659);
      assertEquals(134, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-89), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 1;
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(300, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(113, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(59, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(178, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(56, problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      String string0 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(75, problem2_0.a1937683863);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("p3a^nGrcA!GxdQ%WUB&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("~r|0oa??");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.a763381965 = 12;
      problem2_0.calculateOutput("iG");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a763381965);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iF");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(165, problem2_0.a1652194002);
      assertEquals(103, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a763381965);
      assertEquals((-109), problem2_0.a139631443);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("w&9764s`YY a>s$,a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iG");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(237, problem2_0.a857832659);
      assertEquals(131, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(258, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("mXC?b}OMnlX#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iG");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iG");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(219, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(117, problem2_0.a857832659);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(267, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(252, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(151, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(267, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(252, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(151, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iE");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      
      String string0 = "iD";
      problem2_0.a1573617288 = "iD";
      problem2_0.a1232164262 = (-2427);
      problem2_0.cf = false;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine(",=");
      problem2_0.calculateOutput("iA");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      
      String string0 = "iC";
      problem2_0.a1232164262 = 206;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(8, problem2_1.a1232164262);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(10, problem2_1.a1527387912);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(50, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(264, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(319, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(179, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(99, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(68, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-88), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(191, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals(93, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(233, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a2000761798);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(7, problem2_1.a857832659);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a1232164262);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(128, problem2_1.a1763547350);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(264, problem2_0.a1652194002);
      assertEquals(129, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(310, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(23, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(114, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(15, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(162, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("@&,_f5Mbf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(68, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(190, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(90, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-40), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(92, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(274, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(195, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(268, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iF");
      assertEquals(92, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(274, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(195, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(268, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iI");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(182, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(68, problem2_0.a139631443);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(24, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(126, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(182, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(68, problem2_0.a139631443);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(24, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(126, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iE");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iE");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(123, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(30, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(83, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(42, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(123, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(30, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(83, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(42, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(99, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(323, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(268, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(147, problem2_0.a1937683863);
      
      problem2_0.a861570395 = "1>&";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("6.&8U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(32, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(204, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(183, problem2_0.a1937683863);
      assertEquals(254, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(92, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("%s./u/c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(32, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(32, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(93, problem2_0.a857832659);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(8, problem2_1.a1232164262);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iF");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-26248), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iF");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-26248), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iF");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-26248), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 7;
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(8, problem2_1.a38407862);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertNotNull(problem2_1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.a1765418173 = "1t";
      problem2_0.a38407862 = 1;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("pp7[CQ>^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a1527387912 = (-2013809715);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-14), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-14), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(254, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(102, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(313, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(149, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(254, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(102, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(313, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(149, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iG");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.a176163228 = 3;
      problem2_0.a763381965 = 3;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("r2M{*'; ;");
      problem2_0.a1937683863 = 7;
      problem2_0.calculateOutput("iE");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iE");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(219, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(42, problem2_0.a139631443);
      assertEquals(67, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(83, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iJ");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.a509774514 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(174, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(127, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-35), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(32, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(174, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(127, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-35), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(32, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iJ");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(174, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(127, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-35), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(32, problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(76, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(38, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-23134), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-10921), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-21995), problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals((-22857), problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-16487), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-23134), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-10921), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-21995), problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals((-22857), problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-16487), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-23134), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-10921), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-21995), problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals((-22857), problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-16487), problem2_0.a139631443);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      String string0 = "iF";
      problem2_0.calculateOutput("iF");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(32, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(92, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(183, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(204, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(254, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      
      problem2_0.a1937683863 = 2123;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("%s./u/c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a139631443 = 14;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("f");
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(93, problem2_0.a139631443);
      assertEquals(143, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(273, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(218, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(93, problem2_0.a139631443);
      assertEquals(143, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(273, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(218, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iG");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.a1652194002 = 4;
      problem2_0.calculateOutput("iG");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(71, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(159, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iF");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(267, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(141, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(255, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iG");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(267, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(141, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(255, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a176163228);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.a1740312253 = 7;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-16204), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-29780), problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-1077), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-21792), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-49), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(69, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(17, problem2_0.a1937683863);
      assertEquals(114, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-49), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(69, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(17, problem2_0.a1937683863);
      assertEquals(114, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-49), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(69, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(17, problem2_0.a1937683863);
      assertEquals(114, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-49), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(69, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(17, problem2_0.a1937683863);
      assertEquals(114, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-12839), problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iF");
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(76, problem2_0.a857832659);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(103, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(289, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(112, problem2_0.a1937683863);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(103, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(289, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(112, problem2_0.a1937683863);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(103, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(289, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(112, problem2_0.a1937683863);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(103, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(289, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(112, problem2_0.a1937683863);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("0J/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "";
      problem2_0.calculateOutput("iF");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(32, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(254, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(183, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(204, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(92, problem2_0.a139631443);
      
      problem2_0.a1740312253 = 16;
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.a857832659 = 11;
      problem2_0.calculateOutput("iI");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(242, problem2_0.a1652194002);
      assertEquals((-66), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.a1937683863 = 11;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.cf = false;
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(28, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(146, problem2_0.a1652194002);
      assertEquals(141, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-63), problem2_0.a139631443);
      
      problem2_0.a139631443 = (-2511);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      String string0 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iI");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-13944), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iI");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iI");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(141, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(62, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-27), problem2_0.a139631443);
      assertEquals(44, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(141, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(62, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-27), problem2_0.a139631443);
      assertEquals(44, problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iB");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(62, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(13, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(62, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(13, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(62, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(13, problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iF");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(37, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(87, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(37, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(87, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(39, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(16, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(79, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(39, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(16, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(79, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-2747), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(31, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(240, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(37, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(147, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("IaPO*Jh(S4kJm|Y>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-25082), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals((-26301), problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-25082), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals((-26301), problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("mSiP~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      
      // SystemInUtil.addInputLine("iB");
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iB");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-27240), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-14641), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-11326), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-12620), problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-22726), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(11, problem2_1.a176163228);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(8, problem2_1.a38407862);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("u)SU9ub(_L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-4822), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-24057), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-14111), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-14267), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iG");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(32, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(197, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-125), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(114, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(32, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(197, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-125), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(114, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iA");
      assertEquals(332, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(270, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(141, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-63), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(146, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(28, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(277, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(96, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(256, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(260, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("l6yU\"US6A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iG");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iG");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(66, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(219, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(117, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iG");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(66, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(219, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(117, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iG");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(260, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(317, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(246, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(109, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      String string0 = "iF";
      problem2_0.a139631443 = (-264);
      problem2_0.calculateOutput("iG");
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-264), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iG");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(219, problem2_0.a1652194002);
      assertEquals((-50), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(117, problem2_0.a857832659);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.a1937683863 = (-1);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI~(Hw\"C6Zh: 8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-69), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-13730), problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-16312), problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-17396), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-15146), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(269, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(114, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iD");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(269, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(114, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iI");
      assertEquals(8, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iI");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iA");
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a2000761798 = 10;
      problem2_0.calculateOutput("iH");
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(146, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(28, problem2_0.a1937683863);
      assertEquals(141, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-63), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertNotNull(problem2_1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(209, problem2_0.a1652194002);
      assertEquals(148, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(0, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iB");
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(83, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(83, problem2_0.a1937683863);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(8, problem2_1.a38407862);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      Problem2 problem2_2 = new Problem2();
      assertFalse(problem2_2.equals((Object)problem2_1));
      assertFalse(problem2_2.equals((Object)problem2_0));
      assertEquals(12, problem2_2.a2000761798);
      assertTrue(problem2_2.cf);
      assertEquals(8, problem2_2.a38407862);
      assertEquals(4, problem2_2.a1658575004);
      assertEquals(341, problem2_2.a582062018);
      assertEquals(8, problem2_2.a1232164262);
      assertEquals((-15), problem2_2.a1087532558);
      assertEquals(11, problem2_2.a1301170684);
      assertEquals((-132), problem2_2.a139631443);
      assertEquals(11, problem2_2.a176163228);
      assertEquals(7, problem2_2.a285406335);
      assertEquals(14, problem2_2.a571734306);
      assertEquals(10, problem2_2.a1527387912);
      assertEquals(2, problem2_2.a763381965);
      assertEquals((-8), problem2_2.a1937683863);
      assertEquals(27, problem2_2.a1652194002);
      assertEquals(3, problem2_2.a1167917671);
      assertEquals((-142), problem2_2.a1221761684);
      assertEquals(133, problem2_2.a860422652);
      assertEquals(1, problem2_2.a1740312253);
      assertEquals(163, problem2_2.a1420659483);
      assertEquals(7, problem2_2.a857832659);
      assertEquals(128, problem2_2.a1763547350);
      assertNotNull(problem2_2);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iB");
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("_?)bMk[c {\"lsf|e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertEquals(300, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(22, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(52, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(198, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(22, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(52, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(198, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(22, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(52, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(198, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a176163228);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a139631443);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(83, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a139631443);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(83, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "h";
      problem2_0.a1420659483 = (-1994871756);
      problem2_0.a2000761798 = 3;
      problem2_0.a1221761684 = 170;
      problem2_0.calculateOutput("iC");
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-1994871756), problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iC");
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-1994871756), problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      String string0 = "iI";
      problem2_0.calculateOutput("iC");
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(30, problem2_0.a139631443);
      assertEquals((-1994871756), problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      
      problem2_0.a857832659 = (-2093064);
      problem2_0.a860422652 = 170;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(262, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(245, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(201, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(262, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(245, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(201, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      String string0 = "iF";
      problem2_0.calculateOutput("iF");
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iF");
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(76, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.a291872378 = "iH";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-5687), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-22150), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-28623), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-17332), problem2_0.a1937683863);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(100, problem2_0.a857832659);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-26822), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-22181), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15532), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-5610), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iE");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-26822), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-22181), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15532), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-5610), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iI");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-17332), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-22150), problem2_0.a857832659);
      assertEquals((-28623), problem2_0.a1652194002);
      assertEquals((-5687), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-17332), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-22150), problem2_0.a857832659);
      assertEquals((-28623), problem2_0.a1652194002);
      assertEquals((-5687), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(12, problem2_1.a2000761798);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      String string0 = "iD";
      problem2_0.calculateOutput("iD");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.a1652194002 = (-697);
      problem2_0.a1420659483 = (-1994811865);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-14), problem2_0.a139631443);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-14), problem2_0.a139631443);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-14), problem2_0.a139631443);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-14), problem2_0.a139631443);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-29073), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-29073), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      String string0 = "iI";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("n4cm^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(263, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(22, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(198, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(52, problem2_0.a139631443);
      assertEquals(94, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(22, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(198, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(52, problem2_0.a139631443);
      assertEquals(94, problem2_0.a857832659);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iH");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a857832659);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a857832659);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      String string0 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a857832659);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("2D)\"#\"eU+;`>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iD");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(180, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(49, problem2_0.a857832659);
      assertEquals(73, problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(70, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("TE[%D1 ^`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-29408), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(99, problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(184, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-13730), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-16312), problem2_0.a1937683863);
      assertEquals((-17396), problem2_0.a857832659);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15146), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(269, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(114, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(107, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput(">LE'U%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8365, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-18126), problem2_0.a1652194002);
      assertEquals((-2011), problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-23405), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-18978), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8365, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(79, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-36), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(175, problem2_0.a1652194002);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("HnngsI>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(48, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(127, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(157, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-35), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iE");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(48, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(127, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(157, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-35), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("?eF#nsnm+DjcT^M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.a929601760 = "QtjO)F;Dr";
      String string0 = "iC";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-76), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-4402), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-23600), problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-12995), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-10433), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(10, problem2_1.a1527387912);
      assertNotNull(problem2_1);
      
      Problem2 problem2_2 = new Problem2();
      assertFalse(problem2_2.equals((Object)problem2_1));
      assertFalse(problem2_2.equals((Object)problem2_0));
      assertEquals((-15), problem2_2.a1087532558);
      assertEquals(1, problem2_2.a1740312253);
      assertEquals(3, problem2_2.a1167917671);
      assertEquals(2, problem2_2.a763381965);
      assertEquals(12, problem2_2.a2000761798);
      assertEquals((-8), problem2_2.a1937683863);
      assertEquals(10, problem2_2.a1527387912);
      assertEquals(11, problem2_2.a1301170684);
      assertEquals(133, problem2_2.a860422652);
      assertEquals(7, problem2_2.a285406335);
      assertEquals(341, problem2_2.a582062018);
      assertEquals(11, problem2_2.a176163228);
      assertTrue(problem2_2.cf);
      assertEquals(8, problem2_2.a38407862);
      assertEquals(4, problem2_2.a1658575004);
      assertEquals(7, problem2_2.a857832659);
      assertEquals(14, problem2_2.a571734306);
      assertEquals(163, problem2_2.a1420659483);
      assertEquals(8, problem2_2.a1232164262);
      assertEquals((-142), problem2_2.a1221761684);
      assertEquals(27, problem2_2.a1652194002);
      assertEquals(128, problem2_2.a1763547350);
      assertEquals((-132), problem2_2.a139631443);
      assertNotNull(problem2_2);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-13168), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-29842), problem2_0.a857832659);
      assertEquals((-11784), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-16087), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(92, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-110), problem2_0.a139631443);
      assertEquals(133, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(134, problem2_0.a857832659);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(8, problem2_1.a1232164262);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      Problem2 problem2_2 = new Problem2();
      assertFalse(problem2_2.equals((Object)problem2_0));
      assertFalse(problem2_2.equals((Object)problem2_1));
      assertEquals(133, problem2_2.a860422652);
      assertEquals(27, problem2_2.a1652194002);
      assertEquals((-142), problem2_2.a1221761684);
      assertEquals((-8), problem2_2.a1937683863);
      assertEquals(2, problem2_2.a763381965);
      assertEquals(7, problem2_2.a857832659);
      assertEquals(163, problem2_2.a1420659483);
      assertEquals(1, problem2_2.a1740312253);
      assertEquals(3, problem2_2.a1167917671);
      assertEquals(8, problem2_2.a38407862);
      assertEquals(128, problem2_2.a1763547350);
      assertEquals(7, problem2_2.a285406335);
      assertEquals((-15), problem2_2.a1087532558);
      assertEquals(11, problem2_2.a1301170684);
      assertTrue(problem2_2.cf);
      assertEquals(4, problem2_2.a1658575004);
      assertEquals(12, problem2_2.a2000761798);
      assertEquals(341, problem2_2.a582062018);
      assertEquals(8, problem2_2.a1232164262);
      assertEquals(14, problem2_2.a571734306);
      assertEquals(11, problem2_2.a176163228);
      assertEquals((-132), problem2_2.a139631443);
      assertEquals(10, problem2_2.a1527387912);
      assertNotNull(problem2_2);
      
      // Undeclared exception!
      try { 
        problem2_2.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      String string0 = "iF";
      problem2_0.calculateOutput("iF");
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iC");
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(32, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iF");
      assertEquals(145, problem2_0.a1937683863);
      assertEquals(295, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(101, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(268, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("5iVi4&V|CyZ}PMp;/z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-69), problem2_0.a139631443);
      
      problem2_0.a158034514 = "iD";
      problem2_0.calculateOutput("iG");
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-4663), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-16296), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-13730), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(305, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(252, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(272, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(10, problem2_1.a1527387912);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertNotNull(problem2_1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      
      // SystemInUtil.addInputLine("Hu6>9e");
      problem2_0.calculateOutput("iG");
      assertEquals((-16296), problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-13730), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-4663), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iG");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(96, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(318, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(260, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(262, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(8, problem2_1.a38407862);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertNotNull(problem2_1);
      
      Problem2 problem2_2 = new Problem2();
      assertFalse(problem2_2.equals((Object)problem2_1));
      assertFalse(problem2_2.equals((Object)problem2_0));
      assertEquals(128, problem2_2.a1763547350);
      assertEquals(8, problem2_2.a38407862);
      assertEquals(7, problem2_2.a285406335);
      assertEquals((-15), problem2_2.a1087532558);
      assertTrue(problem2_2.cf);
      assertEquals(11, problem2_2.a1301170684);
      assertEquals(4, problem2_2.a1658575004);
      assertEquals((-132), problem2_2.a139631443);
      assertEquals(341, problem2_2.a582062018);
      assertEquals(12, problem2_2.a2000761798);
      assertEquals(11, problem2_2.a176163228);
      assertEquals(14, problem2_2.a571734306);
      assertEquals(8, problem2_2.a1232164262);
      assertEquals(10, problem2_2.a1527387912);
      assertEquals(27, problem2_2.a1652194002);
      assertEquals(133, problem2_2.a860422652);
      assertEquals(2, problem2_2.a763381965);
      assertEquals((-142), problem2_2.a1221761684);
      assertEquals((-8), problem2_2.a1937683863);
      assertEquals(7, problem2_2.a857832659);
      assertEquals(1, problem2_2.a1740312253);
      assertEquals(163, problem2_2.a1420659483);
      assertEquals(3, problem2_2.a1167917671);
      assertNotNull(problem2_2);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.a1420659483 = 11;
      problem2_0.calculateOutput("iI");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1420659483);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-2747), problem2_0.a857832659);
      
      problem2_0.a386677241 = "oU";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      String string0 = "iG";
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput(">('Z#==u3K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iI");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iI");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iI");
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(60, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a1301170684 = 70;
      problem2_0.calculateOutput("iJ");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(70, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-109), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(165, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(70, problem2_0.a1301170684);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(103, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(178, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(70, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(293, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(178, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(70, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(293, problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      int int0 = 4;
      problem2_0.a38407862 = 4;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(64, problem2_0.a1937683863);
      
      String string0 = "iC";
      String string1 = "iJ";
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-16087), problem2_0.a1937683863);
      assertEquals((-29842), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-11784), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-13168), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-110), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(92, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(134, problem2_0.a857832659);
      
      problem2_0.a1232164262 = 1449;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iG");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(252, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(265, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(94, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(193, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iA");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(156, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-82), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(112, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iI");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(156, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-82), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(112, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iG");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals((-69), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iD");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iD");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(208, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(329, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(271, problem2_0.a1652194002);
      
      problem2_0.a1573617288 = "iD";
      String string0 = "iH";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(99, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(179, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(264, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(319, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iD");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-27084), problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-9144), problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-24766), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(18132, problem2_0.a860422652);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-14808), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(91, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(162, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-58), problem2_0.a139631443);
      assertEquals(18132, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(73, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("F3+<UIwG1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "?eF#nsnm+DjcT^M";
      problem2_0.a2000761798 = 3;
      problem2_0.a1835836559 = "?eF#nsnm+DjcT^M";
      problem2_0.a1221761684 = 170;
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a291872378 = "iC";
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(61, problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Z+Oc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      
      String string0 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(300, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-29667), problem2_0.a1652194002);
      assertEquals((-10495), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-227), problem2_0.a857832659);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-1931), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-10541), problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = problem2_0.a847287963;
      problem2_0.a2000761798 = 3;
      problem2_0.a1221761684 = 170;
      problem2_0.calculateOutput("iC");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iC");
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(53, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(53, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(53, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(53, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(53, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(170, problem2_0.a1221761684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(53, problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a139631443 = (-1791668416);
      String string0 = "iD";
      problem2_0.a1652194002 = 8;
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(245, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-16832), problem2_0.a1652194002);
      assertEquals((-25028), problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15201), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-29908), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(301, problem2_0.a857832659);
      assertEquals(213, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(270, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      
      problem2_0.a1182231957 = "g";
      problem2_0.a450284012 = "g";
      problem2_0.a820621035 = "iD";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.a139631443 = (-631);
      problem2_0.calculateOutput("iF");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(134, problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-631), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iG");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(134, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(72, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(79, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(243, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iG");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(134, problem2_0.a1087532558);
      assertEquals(256, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(279, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(273, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(102, problem2_0.a139631443);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iB");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-23135), problem2_0.a582062018);
      
      String string0 = "n[-6Y2Dpzv>.K";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("n[-6Y2Dpzv>.K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iD");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a571734306);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-23624), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20376), problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-5941), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-3693), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(213, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(258, problem2_0.a857832659);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(91, problem2_0.a139631443);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(213, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(258, problem2_0.a857832659);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(91, problem2_0.a139631443);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(100, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-29408), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(207, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(102, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(268, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(320, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a1658575004);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(10, problem2_1.a1527387912);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.a158034514 = "iD";
      problem2_0.calculateOutput("iG");
      assertEquals((-16296), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-13730), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-4663), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iD");
      assertEquals(305, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(272, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(252, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iG");
      assertEquals(305, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(272, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(252, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iD");
      assertEquals(305, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(272, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(252, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-14), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a38407862);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(17089, problem2_0.a860422652);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(17089, problem2_0.a860422652);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iJ");
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(17089, problem2_0.a860422652);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(64, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals((-13168), problem2_0.a139631443);
      assertEquals((-11784), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-16087), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-29842), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(92, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-110), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(134, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(92, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-110), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(134, problem2_0.a857832659);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 4490;
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4490, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4490, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a139631443 = (-1532);
      problem2_0.calculateOutput("iG");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(214, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(16, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Bew\"DxlE-L:L3H.!z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iG");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(219, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(117, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(66, problem2_0.a1937683863);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(8, problem2_1.a38407862);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(128, problem2_1.a1763547350);
      assertNotNull(problem2_1);
      
      problem2_0.calculateOutput("iI");
      assertFalse(problem2_0.equals((Object)problem2_1));
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(219, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(117, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(66, problem2_0.a1937683863);
      assertNotSame(problem2_0, problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("oV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(81, problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(107, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(13, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(81, problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(107, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(13, problem2_0.a1937683863);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("0!3dAJjo 6M1oe'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iB");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iB");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertNotNull(problem2_1);
      
      problem2_1.calculateOutput("iC");
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(14, problem2_1.a571734306);
      assertFalse(problem2_1.cf);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(9, problem2_1.a176163228);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertNotSame(problem2_1, problem2_0);
      
      problem2_0.calculateOutput("iE");
      assertFalse(problem2_0.equals((Object)problem2_1));
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(75, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertNotSame(problem2_0, problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("Z&K1(-}|8YfQ{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(68, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-40), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(90, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(190, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("oe|RU2u@)[ZyI/ky}r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1087532558 = (-1575);
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-1575), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals((-1575), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals((-1575), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals((-1575), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-76), problem2_0.a139631443);
      
      problem2_0.a139631443 = 63;
      problem2_0.calculateOutput("iI");
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iG");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(114, problem2_0.a857832659);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(32, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-20), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(167, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-11880), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-17182), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-19576), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-16070), problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.calculateOutput("iB");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iE");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(98, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(87, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-126), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(184, problem2_0.a1652194002);
      assertEquals(74, problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(87, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-126), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(184, problem2_0.a1652194002);
      assertEquals(74, problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(3, problem2_1.a1167917671);
      assertTrue(problem2_1.cf);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.a139631443 = 63;
      problem2_0.calculateOutput("iI");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-2747), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iG");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(167, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-20), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(114, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(32, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iG");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(167, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-20), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(114, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(32, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iG");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(167, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-20), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(114, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(32, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iJ");
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-14), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(96, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-14), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(179, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(319, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(264, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(99, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(169, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(107, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(65, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(169, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(107, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(65, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(169, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(107, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(65, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("'>$&/*lkZ+QA+LG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.a1652194002 = 689;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a763381965 = 3;
      problem2_0.a1652194002 = 4;
      problem2_0.calculateOutput("iF");
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a1087532558 = 3;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      String string0 = "iA";
      problem2_0.calculateOutput("iA");
      assertEquals(50, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(98, problem2_0.a139631443);
      assertEquals(113, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(107, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(81, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.a1937683863 = (-4219);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iG");
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(19, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(167, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(159, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-96), problem2_0.a139631443);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(7, problem2_1.a285406335);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(14, problem2_1.a571734306);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertNotNull(problem2_1);
      
      problem2_1.calculateOutput("iC");
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(7, problem2_1.a285406335);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(9, problem2_1.a176163228);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertFalse(problem2_1.cf);
      assertNotSame(problem2_1, problem2_0);
      
      Problem2 problem2_2 = new Problem2();
      assertFalse(problem2_2.equals((Object)problem2_1));
      assertFalse(problem2_2.equals((Object)problem2_0));
      assertEquals(1, problem2_2.a1740312253);
      assertEquals(7, problem2_2.a285406335);
      assertEquals(4, problem2_2.a1658575004);
      assertEquals(341, problem2_2.a582062018);
      assertEquals(8, problem2_2.a38407862);
      assertEquals(2, problem2_2.a763381965);
      assertEquals((-8), problem2_2.a1937683863);
      assertEquals(27, problem2_2.a1652194002);
      assertEquals(133, problem2_2.a860422652);
      assertEquals(11, problem2_2.a1301170684);
      assertEquals(128, problem2_2.a1763547350);
      assertEquals(12, problem2_2.a2000761798);
      assertEquals(3, problem2_2.a1167917671);
      assertEquals((-142), problem2_2.a1221761684);
      assertEquals(11, problem2_2.a176163228);
      assertEquals(163, problem2_2.a1420659483);
      assertEquals(14, problem2_2.a571734306);
      assertEquals((-132), problem2_2.a139631443);
      assertEquals(7, problem2_2.a857832659);
      assertTrue(problem2_2.cf);
      assertEquals(10, problem2_2.a1527387912);
      assertEquals(8, problem2_2.a1232164262);
      assertEquals((-15), problem2_2.a1087532558);
      assertNotNull(problem2_2);
      
      // Undeclared exception!
      try { 
        problem2_2.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iD");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-21630), problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-21630), problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iJ");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-21630), problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iD");
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-25082), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-26301), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-25082), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-26301), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(318, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iI");
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-25082), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-26301), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(318, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(12, problem2_1.a2000761798);
      assertNotNull(problem2_1);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.equals((Object)problem2_1));
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-25082), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-26301), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(318, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotSame(problem2_0, problem2_1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-10877), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-21630), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-10877), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-21630), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-10877), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-21630), problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iH");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.a1740312253 = 1318;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      
      problem2_0.a861570395 = "iH";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      String string0 = "iA";
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      String string1 = "iD";
      problem2_0.a861570395 = "iA";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 4490;
      problem2_0.a763381965 = 4490;
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4490, problem2_0.a763381965);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4490, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4490, problem2_0.a763381965);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4490, problem2_0.a2000761798);
      
      problem2_0.cf = false;
      problem2_0.a1232164262 = (-1532);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(50, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(113, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(56, problem2_0.a139631443);
      assertEquals(59, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(178, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(56, problem2_0.a139631443);
      assertEquals(59, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(178, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(56, problem2_0.a139631443);
      assertEquals(59, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(178, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.a139631443 = 14;
      problem2_0.calculateOutput("iI");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iE");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(165, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1937683863);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(188, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-114), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iE");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(165, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1937683863);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(188, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-114), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.a820621035 = "iA";
      String string0 = "iF";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      String string0 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(32, problem2_0.a139631443);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.a820621035 = "iF";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      
      String string0 = "iC";
      problem2_0.a820621035 = ")i:s<9gL<}=|fZs";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iH");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iA");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(11, problem2_1.a176163228);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(14, problem2_1.a571734306);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(257, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(302, problem2_0.a857832659);
      assertEquals(89, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(107, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // SystemInUtil.addInputLine("IaPO*Jh(S4kJm|Y>");
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(20, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(161, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(51, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(165, problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-4862), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-9565), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-9498), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-4615), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(88, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(245, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(241, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(88, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(245, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(241, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(88, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(245, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(241, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(44, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(44, problem2_0.a1937683863);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "}";
      problem2_0.a2000761798 = 3;
      problem2_0.a1221761684 = 150;
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(150, problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iI");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(150, problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a2000761798);
      
      problem2_0.a857832659 = 150;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("_#V=r.H]k87");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(106, problem2_0.a139631443);
      assertEquals(234, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(155, problem2_0.a1937683863);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(51, problem2_0.a1937683863);
      assertEquals(129, problem2_0.a1652194002);
      assertEquals(40, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-79), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(136, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(246, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(136, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(246, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(136, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(246, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals((-17396), problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-13730), problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15146), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-16312), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iD");
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(94, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(266, problem2_0.a857832659);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(285, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(94, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(266, problem2_0.a857832659);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(285, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 4490;
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4490, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4490, problem2_0.a2000761798);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a139631443 = (-1532);
      problem2_0.a1740312253 = 3057;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Current state has no transition for this input!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a1652194002 = 14;
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(92, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertEquals(101, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(332, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      
      problem2_0.a2000761798 = 10;
      problem2_0.calculateOutput("iJ");
      assertEquals(187, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-19), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(51, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(40, problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(61, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(181, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(65, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-10), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(61, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(181, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(65, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-10), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.a139631443 = 251;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-109), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(165, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(103, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-109), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(165, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(103, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(12, problem2_1.a2000761798);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      String string0 = "iA";
      problem2_0.calculateOutput("iA");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iH");
      assertEquals(28, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(146, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-63), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(141, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(265, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(257, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(203, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(96, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(265, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(257, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(203, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(96, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a2000761798 = 0;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      String string0 = "iJ";
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(273, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(213, problem2_0.a1937683863);
      
      // SystemInUtil.addInputLine("_=N$($Dse>K");
      problem2_0.a1652194002 = 164;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("HZg!l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "";
      problem2_0.a1652194002 = 1;
      problem2_0.a571734306 = 1;
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(175, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(263, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(179, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(260, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(99, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a1652194002 = 1;
      problem2_0.a2000761798 = 10;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(50, problem2_0.a1937683863);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iG");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-64), problem2_0.a139631443);
      assertEquals(67, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(125, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(11, problem2_1.a176163228);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iG");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a176163228);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      String string0 = "iF";
      problem2_0.calculateOutput("iF");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iD");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iF");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(98, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-17865), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-29285), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-26320), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(20648, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-13623), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-17865), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-29285), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-26320), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(20648, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-13623), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(10, problem2_1.a1527387912);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iH");
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iD");
      assertEquals(17089, problem2_0.a860422652);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iD");
      assertEquals(17089, problem2_0.a860422652);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(17089, problem2_0.a860422652);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(17089, problem2_0.a860422652);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.a1527387912 = (-132);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iI");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(48, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-6), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(140, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-14799), problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iH");
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.a857832659 = 2235;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals(300, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(22, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(52, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(198, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-22745), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-23188), problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-25214), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-4054), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(20996, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("I]vh!w:L!%?a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      // SystemInUtil.addInputLine("f^p8A`t1{:5pw[J;|#");
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-21630), problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-18959), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iI");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-21630), problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-18959), problem2_0.a139631443);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // SystemInUtil.addInputLine((String) null);
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.a1527387912 = 1200;
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1200, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1200, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1200, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(32, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(92, problem2_0.a139631443);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(183, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(204, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(254, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iB");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-25759), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-12791), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-5277), problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-492), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-25376), problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-25759), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-12791), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-5277), problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-492), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-25376), problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iF");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.a1221761684 = (-4695);
      problem2_0.calculateOutput("iF");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-4695), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(76, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-4695), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(89, problem2_0.a139631443);
      assertEquals(153, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(288, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-10356), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(28935, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-4695), problem2_0.a1221761684);
      assertEquals((-24574), problem2_0.a1937683863);
      assertEquals((-24572), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-420), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      
      // SystemInUtil.addInputLine("iI");
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-5687), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-22150), problem2_0.a857832659);
      assertEquals((-28623), problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-17332), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1, problem2_0.a38407862);
      
      problem2_0.a1763547350 = 3480;
      problem2_0.calculateOutput("iG");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-5687), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-22150), problem2_0.a857832659);
      assertEquals((-28623), problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-17332), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(3480, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1, problem2_0.a38407862);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iI");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iI");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(106, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(278, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(106, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(278, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(106, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(278, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(106, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(278, problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iG");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(92, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(285, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(260, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(222, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iD");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15924), problem2_0.a857832659);
      assertEquals((-10792), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15926), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-372), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(18143, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iG");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15924), problem2_0.a857832659);
      assertEquals((-10792), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15926), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-372), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(18143, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iG");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15924), problem2_0.a857832659);
      assertEquals((-10792), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15926), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-372), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(18143, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(70, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(180, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(73, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(49, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(20116, problem2_0.a860422652);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-25702), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-9218), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-27342), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-19224), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iH");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(20116, problem2_0.a860422652);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-25702), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-9218), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-27342), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-19224), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(20116, problem2_0.a860422652);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-25702), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-9218), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-27342), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-19224), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      String string0 = "iA";
      String string1 = "iJ";
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a1527387912);
      
      problem2_0.a1937683863 = (-1);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      String string0 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      
      // SystemInUtil.addInputLine("f");
      problem2_0.a139631443 = 63;
      problem2_0.calculateOutput("iI");
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(240, problem2_0.a1652194002);
      assertEquals(31, problem2_0.a139631443);
      assertEquals(37, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(147, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      
      String string1 = "iD";
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-15891), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-16621), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-29296), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals((-15797), problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.a820621035 = "iD";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // SystemInUtil.addInputLine("dJks.k2:%3P");
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-16039), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-27989), problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15108), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-23379), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-10), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(181, problem2_0.a1652194002);
      assertEquals(65, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(61, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iC");
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-10), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(181, problem2_0.a1652194002);
      assertEquals(65, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(61, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      String string0 = "iH";
      problem2_0.a861570395 = "iE";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.a38407862 = 6;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iE");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(165, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-109), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals(103, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(218, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertFalse(problem2_0.cf);
      assertEquals(265, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(93, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iE");
      assertEquals(218, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertFalse(problem2_0.cf);
      assertEquals(265, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(93, problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      BufferedReader bufferedReader0 = Problem2.stdin;
      assertNotNull(bufferedReader0);
      
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      assertFalse(bufferedReader1.equals((Object)bufferedReader0));
      assertNotNull(bufferedReader1);
      
      Problem2.stdin = bufferedReader1;
      problem2_0.calculateOutput("iI");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iI");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-5108), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-25087), problem2_0.a139631443);
      assertEquals((-25480), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-29165), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iA");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-5108), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-25087), problem2_0.a139631443);
      assertEquals((-25480), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-29165), problem2_0.a857832659);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(7, problem2_1.a285406335);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(8, problem2_1.a38407862);
      assertTrue(problem2_1.cf);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("r2M{*'; ;");
      problem2_0.calculateOutput("iF");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.a1658575004 = 7;
      String string0 = "iB";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = (-2053);
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(81, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.cf = false;
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(81, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-2011), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(81, problem2_0.a1420659483);
      assertEquals((-18978), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-18126), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-23405), problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(8365, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iA");
      assertEquals(79, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(81, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(175, problem2_0.a1652194002);
      assertEquals((-36), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(8365, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(81, problem2_0.a1420659483);
      assertEquals((-14591), problem2_0.a857832659);
      assertEquals((-4327), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-17838), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-2442), problem2_0.a1937683863);
      assertEquals(8365, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.a2000761798 = (-1673);
      // SystemInUtil.addInputLine("i");
      problem2_0.calculateOutput("iJ");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-17147), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-20887), problem2_0.a139631443);
      assertEquals((-22058), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-6156), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-1673), problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(253, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(255, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-1673), problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(265, problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iH");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-22205), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-17223), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-25204), problem2_0.a857832659);
      assertEquals((-22782), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      String string0 = "~r|0oa??";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("~r|0oa??");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a1167917671 = (-1803);
      String string0 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-1803), problem2_0.a1167917671);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(64, problem2_0.a1937683863);
      
      String string1 = "iF";
      problem2_0.a1420659483 = (-164946860);
      problem2_0.a1652194002 = (-164946860);
      // SystemInUtil.addInputLine("f");
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a2000761798);
      
      BufferedReader bufferedReader0 = Problem2.stdin;
      assertNotNull(bufferedReader0);
      
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      assertFalse(bufferedReader1.equals((Object)bufferedReader0));
      assertNotNull(bufferedReader1);
      
      problem2_0.calculateOutput("iG");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(214, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(45, problem2_0.a139631443);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(16, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iG");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(214, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(45, problem2_0.a139631443);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(16, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("%K*wC)NRY,%:edZzfwQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.a1527387912 = 251;
      problem2_0.cf = false;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertTrue(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iB");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.a929601760 = "iB";
      problem2_0.calculateOutput("iJ");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2784), problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iD");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-26301), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-26301), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(318, problem2_0.a582062018);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("T?'('eLJ-)TO=R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = (-4177984);
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iJ");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-4177984), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-54), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(115, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(62, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iE");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-54), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(115, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(62, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iE");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(262, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(171, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(234, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iI");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-13944), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iD");
      assertEquals(6, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-13944), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(10, problem2_1.a1527387912);
      assertTrue(problem2_1.cf);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-76), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.a139631443 = 14;
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iE");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(165, problem2_0.a857832659);
      assertEquals(188, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(90, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-114), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(165, problem2_0.a857832659);
      assertEquals(188, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(90, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-114), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(4, problem2_0.a38407862);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-123), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(4, problem2_0.a38407862);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-123), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(4, problem2_0.a38407862);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-123), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("wnr'r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      String string0 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(132, problem2_0.a857832659);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(75, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(132, problem2_0.a857832659);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(75, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-10785), problem2_0.a857832659);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals((-14745), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-21792), problem2_0.a1652194002);
      assertEquals((-14148), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("!jn;h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("f");
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(43, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.a1527387912 = 937;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 7;
      String string0 = "f,l!(Q";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f,l!(Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(101, problem2_0.a139631443);
      
      problem2_0.a1658575004 = 93;
      String string0 = "iJ";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("oZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      
      String string0 = "iB";
      problem2_0.a857832659 = 35;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(100, problem2_0.a857832659);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(63, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(208, problem2_0.a1937683863);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(329, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(271, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.a847287963 = "iD";
      problem2_0.calculateOutput("iH");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(208, problem2_0.a1937683863);
      assertEquals(100, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(329, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(271, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertTrue(problem2_1.cf);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertNotNull(problem2_1);
      
      problem2_1.calculateOutput("iD");
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(10, problem2_1.a571734306);
      assertEquals((-69), problem2_1.a139631443);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(5, problem2_1.a1658575004);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(218, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(2, problem2_1.a1740312253);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(11, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(9, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(100, problem2_1.a857832659);
      assertFalse(problem2_1.cf);
      assertEquals(63, problem2_1.a1937683863);
      assertNotSame(problem2_1, problem2_0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      String string0 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iC");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      
      String string1 = "y#AEAv2O&R-79";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("y#AEAv2O&R-79");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      String string0 = "iA";
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      
      String string1 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(300, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(184, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(87, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(74, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-126), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(184, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(87, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(74, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-126), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-28915), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-20572), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-1706), problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-16417), problem2_0.a857832659);
      
      BufferedReader bufferedReader0 = Problem2.stdin;
      assertNotNull(bufferedReader0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-28915), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-20572), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-1706), problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-16417), problem2_0.a857832659);
      
      Problem2.stdin = bufferedReader0;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("I]vh!w:L!%?a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(278, problem2_0.a857832659);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(106, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iI");
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-28750), problem2_0.a857832659);
      assertEquals((-23205), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15221), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-869), problem2_0.a139631443);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      String string0 = "`B";
      problem2_0.a1232164262 = 2250;
      problem2_0.a38407862 = 5;
      String string1 = "iC";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("`B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(30, problem2_0.a139631443);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(235, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(7, problem2_1.a285406335);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertNotNull(problem2_1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.cf = problem2_0.cf;
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(64, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-21630), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-21630), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-18959), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-10877), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18612), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-21630), problem2_0.a857832659);
      
      problem2_0.a291872378 = "iI";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(300, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(37, problem2_0.a857832659);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(87, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(37, problem2_0.a857832659);
      assertEquals(53, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(87, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iI");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(75, problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(132, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(75, problem2_0.a1937683863);
      assertEquals(61, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-123), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a571734306);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iB");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-4862), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-9565), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-9498), problem2_0.a1652194002);
      assertEquals((-4615), problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iB");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(88, problem2_0.a139631443);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(241, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(245, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(88, problem2_0.a139631443);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(241, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(245, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      String string1 = "iD";
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.a1527387912 = 252;
      // SystemInUtil.addInputLine("f");
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-5610), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15532), problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-26822), problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals((-22181), problem2_0.a139631443);
      assertEquals((-233), problem2_0.a38407862);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iA");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(332, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iG");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(82, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(101, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-28), problem2_0.a139631443);
      assertEquals(45, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iA");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(91, problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(95, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(216, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iB");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-18131), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-22750), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-24871), problem2_0.a139631443);
      assertEquals((-2306), problem2_0.a1937683863);
      assertEquals((-9260), problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("y-Md2g;s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(49, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(73, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(180, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(70, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-14774), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-1019), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-15038), problem2_0.a1652194002);
      assertEquals(15415, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-23332), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals((-14774), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-1019), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-15038), problem2_0.a1652194002);
      assertEquals(15415, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-23332), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iE");
      assertEquals((-14774), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-1019), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-15038), problem2_0.a1652194002);
      assertEquals(15415, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-23332), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(14, problem2_1.a571734306);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertNotNull(problem2_1);
      
      Problem2 problem2_2 = new Problem2();
      assertFalse(problem2_2.equals((Object)problem2_1));
      assertFalse(problem2_2.equals((Object)problem2_0));
      assertEquals(133, problem2_2.a860422652);
      assertEquals(27, problem2_2.a1652194002);
      assertEquals((-142), problem2_2.a1221761684);
      assertEquals((-8), problem2_2.a1937683863);
      assertEquals(2, problem2_2.a763381965);
      assertEquals(7, problem2_2.a857832659);
      assertEquals(8, problem2_2.a1232164262);
      assertEquals(11, problem2_2.a176163228);
      assertEquals((-132), problem2_2.a139631443);
      assertEquals(14, problem2_2.a571734306);
      assertEquals(10, problem2_2.a1527387912);
      assertEquals(8, problem2_2.a38407862);
      assertEquals(128, problem2_2.a1763547350);
      assertEquals(7, problem2_2.a285406335);
      assertEquals((-15), problem2_2.a1087532558);
      assertEquals(11, problem2_2.a1301170684);
      assertTrue(problem2_2.cf);
      assertEquals(4, problem2_2.a1658575004);
      assertEquals(12, problem2_2.a2000761798);
      assertEquals(341, problem2_2.a582062018);
      assertEquals(163, problem2_2.a1420659483);
      assertEquals(1, problem2_2.a1740312253);
      assertEquals(3, problem2_2.a1167917671);
      assertNotNull(problem2_2);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iD");
      assertEquals(5, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(5, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(146, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(5, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(146, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iD");
      assertEquals(5, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(146, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-26301), problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(318, problem2_0.a582062018);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-26301), problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(318, problem2_0.a582062018);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-26301), problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iH");
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(318, problem2_0.a582062018);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-26301), problem2_0.a1652194002);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a860422652 = (-1);
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-1), problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(76, problem2_0.a857832659);
      assertEquals((-1), problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(38, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals(17722, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-20790), problem2_0.a139631443);
      assertEquals((-13173), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-20908), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-10418), problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iF");
      assertEquals(17722, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-20790), problem2_0.a139631443);
      assertEquals((-13173), problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-20908), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-10418), problem2_0.a1652194002);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(11, problem2_1.a176163228);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("T5NWfyp|'g`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 0;
      String string0 = "?eF#nsnm+DjcT^M";
      problem2_0.a847287963 = "?eF#nsnm+DjcT^M";
      problem2_0.a1221761684 = 12;
      problem2_0.a2000761798 = 4490;
      problem2_0.calculateOutput("iF");
      assertEquals(170, problem2_0.a1087532558);
      assertEquals(0, problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(4490, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.a139631443 = 4490;
      String string1 = "";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("?eF#nsnm+DjcT^M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("f");
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.cf = false;
      problem2_0.calculateOutput("iA");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.a857832659 = 2935;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a139631443 = 4286;
      problem2_0.a38407862 = 6;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iC");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      String string0 = "iA";
      problem2_0.calculateOutput("iC");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(154, problem2_0.a1652194002);
      assertEquals((-25), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(70, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1652194002 = (-3070);
      problem2_0.calculateOutput("iF");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-3070), problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iF");
      assertEquals(31, problem2_0.a857832659);
      assertEquals(109, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-7), problem2_0.a139631443);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a857832659 = (-3070);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("!?;3BnP|H*zb@0b]sH`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iA");
      assertEquals(194, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-19), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(40, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(51, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(187, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iA");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(253, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(96, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(165, problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.a1301170684 = (-1909684981);
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(28, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertFalse(problem2_0.cf);
      assertEquals(62, problem2_0.a139631443);
      assertEquals((-1909684981), problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(177, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(28, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertFalse(problem2_0.cf);
      assertEquals(62, problem2_0.a139631443);
      assertEquals((-1909684981), problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(177, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.a857832659 = (-1909684981);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      problem2_0.a820621035 = "~GUo/u'ZJ=#zKF";
      problem2_0.a38407862 = 5;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("qORD1MR%$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(64, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-2747), problem2_0.a857832659);
      
      problem2_0.a1835836559 = "i";
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-25), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(81, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(166, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(144, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-25), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(81, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(166, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(144, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(167, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(159, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-88), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(167, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(159, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-88), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput(">1^OA'Y]V{Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(14, problem2_1.a571734306);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(4, problem2_1.a1658575004);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(341, problem2_1.a582062018);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(32, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(32, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(7, problem2_1.a857832659);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(10, problem2_1.a1527387912);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertNotNull(problem2_1);
      
      problem2_1.a1527387912 = 341;
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.a857832659 = 0;
      problem2_0.calculateOutput("iD");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(115, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a571734306);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.cf = false;
      problem2_0.calculateOutput("iD");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-25532), problem2_0.a857832659);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(91, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(232, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(225, problem2_0.a1937683863);
      assertEquals(6, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
      
      problem2_0.a1781947387 = "iI";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("TJ!ZDA{?MDy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iD");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(180, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(73, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(49, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(70, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.a1652194002 = 0;
      String string1 = "|%";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("|%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(82, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(221, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-95), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(46, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-5610), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-26822), problem2_0.a1652194002);
      assertEquals((-15532), problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-22181), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(261, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(257, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(225, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(95, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(261, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(257, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(225, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(95, problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("kXgxGCqE/z>hLp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iD");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-26301), problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-26301), problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(318, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iI");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-28003), problem2_0.a857832659);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-26301), problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-25082), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(318, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-19062), problem2_0.a1937683863);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(5004, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertTrue(problem2_1.cf);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-142), problem2_1.a1221761684);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      String string0 = "iH";
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iH");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iH");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(89, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a857832659);
      
      problem2_0.a1740312253 = 5;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a176163228 = 14;
      problem2_0.calculateOutput("iF");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(85, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(52, problem2_0.a1937683863);
      assertEquals(32, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.a1740312253 = 2094;
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(14, problem2_1.a571734306);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a857832659);
      assertNotNull(problem2_1);
      
      problem2_0.a139631443 = 1;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(186, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(186, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.calculateOutput("iB");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("#D)x6S. {lFT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-23135), problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(186, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-23135), problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("ie");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iD");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(186, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iE");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(288, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(186, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iD");
      assertEquals(5, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iF");
      assertEquals(146, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iF");
      assertEquals(146, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iB");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(186, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(186, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-23135), problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Vt6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      
      problem2_0.calculateOutput("iI");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-4822), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-24057), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-14111), problem2_0.a1937683863);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-14267), problem2_0.a857832659);
      
      problem2_0.a929601760 = "iA";
      // SystemInUtil.addInputLine("f");
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.a929601760 = ")K%!fn0)GnbES@7j";
      String string0 = "iJ";
      problem2_0.a857832659 = (-132);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iE");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(136, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(82, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iE");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(136, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(82, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("^%*Q'?Q8m,ksX?\";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("f");
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-11113), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-29532), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-9308), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-16439), problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(163, problem2_1.a1420659483);
      assertTrue(problem2_1.cf);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertNotNull(problem2_1);
      
      Problem2 problem2_2 = new Problem2();
      assertFalse(problem2_2.equals((Object)problem2_0));
      assertFalse(problem2_2.equals((Object)problem2_1));
      assertEquals(1, problem2_2.a1740312253);
      assertEquals(4, problem2_2.a1658575004);
      assertEquals(341, problem2_2.a582062018);
      assertEquals((-15), problem2_2.a1087532558);
      assertEquals(27, problem2_2.a1652194002);
      assertEquals(3, problem2_2.a1167917671);
      assertEquals(128, problem2_2.a1763547350);
      assertEquals(7, problem2_2.a857832659);
      assertEquals(11, problem2_2.a176163228);
      assertEquals(8, problem2_2.a1232164262);
      assertEquals((-132), problem2_2.a139631443);
      assertEquals((-142), problem2_2.a1221761684);
      assertEquals(163, problem2_2.a1420659483);
      assertEquals(133, problem2_2.a860422652);
      assertEquals(11, problem2_2.a1301170684);
      assertEquals(10, problem2_2.a1527387912);
      assertEquals(2, problem2_2.a763381965);
      assertTrue(problem2_2.cf);
      assertEquals(12, problem2_2.a2000761798);
      assertEquals((-8), problem2_2.a1937683863);
      assertEquals(8, problem2_2.a38407862);
      assertEquals(7, problem2_2.a285406335);
      assertEquals(14, problem2_2.a571734306);
      assertNotNull(problem2_2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(60, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(76, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(95, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.a139631443 = 2957;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a1221761684 = 27;
      problem2_0.a582062018 = 7;
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.a1420659483 = 9;
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(104, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a582062018);
      assertEquals(9, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(27, problem2_0.a1221761684);
      assertEquals(270, problem2_0.a857832659);
      assertEquals(284, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(159, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-86), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a582062018);
      assertEquals(9, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(150, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(35, problem2_0.a1937683863);
      
      problem2_0.a1652194002 = 27;
      String string0 = "k-";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(64, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-13944), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-2747), problem2_0.a857832659);
      
      problem2_0.a1232164262 = (-1533);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.a38407862 = 5;
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iB");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(75, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(93, problem2_0.a1221761684);
      assertEquals(83, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a139631443);
      assertEquals(75, problem2_0.a857832659);
      
      problem2_0.a1221761684 = 5;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iE");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(102, problem2_0.a139631443);
      assertEquals(207, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(268, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(320, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iE");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-3294), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-16572), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-9621), problem2_0.a857832659);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-19730), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("oW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iD");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iE");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertNotNull(problem2_1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.cf = true;
      String string0 = "iD";
      problem2_0.calculateOutput("iD");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("J6$oTR2Q)pD,JE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.a1087532558 = 186;
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(186, problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(160, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(186, problem2_0.a1087532558);
      assertEquals((-122), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(157, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(160, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(186, problem2_0.a1087532558);
      assertEquals((-122), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(157, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iB");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(180, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(317, problem2_0.a582062018);
      assertEquals(180, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("%\"Rm3PX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.a509774514 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.a2000761798 = (-191);
      problem2_0.a1167917671 = (-191);
      problem2_0.calculateOutput("iI");
      assertEquals((-191), problem2_0.a2000761798);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(19, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(45, problem2_0.a139631443);
      assertEquals(182, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-191), problem2_0.a2000761798);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(19, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(45, problem2_0.a139631443);
      assertEquals(182, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a763381965 = 3;
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(239, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iA");
      assertEquals(332, problem2_0.a857832659);
      assertEquals(101, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a158034514 = "iD";
      problem2_0.a857832659 = 1;
      problem2_0.cf = false;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iI");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iI");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-27), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(62, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(141, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-27), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(62, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(141, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-27), problem2_0.a139631443);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(62, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(141, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("j:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      
      // SystemInUtil.addInputLine("pKlZR[Vx;");
      problem2_0.calculateOutput("iB");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iF");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(155, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(269, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      
      problem2_0.a1527387912 = (-198);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertNotNull(problem2_0);
      
      problem2_0.a2000761798 = 16;
      problem2_0.calculateOutput("iI");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(236, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iG");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-13038), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-6650), problem2_0.a857832659);
      assertEquals((-24485), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-22131), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iI");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(108, problem2_0.a857832659);
      assertEquals(26, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(191, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(19, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      
      problem2_0.calculateOutput("iH");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(108, problem2_0.a857832659);
      assertEquals(26, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(191, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(19, problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertNotNull(problem2_0);
      
      problem2_0.a857832659 = 0;
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(115, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals((-25532), problem2_0.a857832659);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals((-25532), problem2_0.a857832659);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("IaPO*Jh(S4kJm|Y>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      String string0 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      
      problem2_0.a860422652 = (-177);
      String string1 = "iF";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.a1765418173 = "e";
      problem2_0.calculateOutput("iF");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("iE");
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iE");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iE");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iE");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(70, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(180, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(73, problem2_0.a139631443);
      assertEquals(49, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals((-18545), problem2_0.a1652194002);
      assertEquals((-4844), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15329), problem2_0.a857832659);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-16461), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(12600, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(133, problem2_1.a860422652);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(128, problem2_1.a1763547350);
      assertTrue(problem2_1.cf);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 1;
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a1835836559 = "e";
      problem2_0.calculateOutput("iA");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a892847309 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iH");
      assertEquals(241, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(267, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(106, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertEquals(241, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(267, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(106, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(266, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.a571734306 = 3242;
      // SystemInUtil.addInputLine("");
      problem2_0.a1652194002 = 17636;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(101, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      
      String string0 = "iD";
      problem2_0.a1232164262 = 93;
      problem2_0.cf = false;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      // SystemInUtil.addInputLine("e");
      problem2_0.a2000761798 = (-4177984);
      problem2_0.calculateOutput("iH");
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-4177984), problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iF");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(103, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-109), problem2_0.a139631443);
      assertEquals(165, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      
      String string1 = "iA";
      problem2_0.a857832659 = 1529;
      problem2_0.calculateOutput("iA");
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1529, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-109), problem2_0.a139631443);
      assertEquals(165, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(66, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("r2M{*'; ;");
      problem2_0.calculateOutput("iF");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iE");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(176, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(142, problem2_0.a857832659);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(45, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1167917671);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("r2M{*'; ;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a1301170684 = 7;
      problem2_0.calculateOutput("iB");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iI");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(175, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-95), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(51, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(175, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-95), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(51, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("IaPO*Jh(S4kJm|Y>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iH");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(70, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(180, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(73, problem2_0.a139631443);
      assertEquals(49, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals((-13311), problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-24807), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-4087), problem2_0.a139631443);
      assertEquals(24476, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-1830), problem2_0.a1652194002);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(7, problem2_1.a857832659);
      assertTrue(problem2_1.cf);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertNotNull(problem2_0);
      
      problem2_0.a285406335 = 1137;
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1137, problem2_0.a285406335);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iH");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(51, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(1137, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      
      String string0 = "iD";
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-23962), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-17566), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1137, problem2_0.a285406335);
      assertEquals((-27248), problem2_0.a139631443);
      assertEquals(17089, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-2373), problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.a1740312253 = (-10384350);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      String string0 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(111, problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(97, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(17, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(164, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-12839), problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals((-12839), problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      String string1 = "";
      problem2_0.a139631443 = 1697;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iG");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.a763381965 = 3;
      problem2_0.a1652194002 = (-142);
      problem2_0.calculateOutput("iG");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(46, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(142, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(91, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(46, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(142, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(91, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iC");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(46, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(142, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(91, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iG");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(46, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-24), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(142, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(91, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(128, problem2_1.a1763547350);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.a1301170684 = 1;
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1301170684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1301170684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a139631443);
      assertEquals(1, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(20, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(186, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a139631443);
      assertEquals(1, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(20, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(186, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(94, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("uN@N:r\b1vLg/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      String string0 = "iD";
      problem2_0.calculateOutput("iH");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(51, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      
      problem2_0.a1937683863 = 188;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(236, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iB");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-27223), problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-14641), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-19770), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-26908), problem2_0.a1652194002);
      
      // SystemInUtil.addInputLine("e");
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a176163228);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals((-15), problem2_1.a1087532558);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("('G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iA");
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iA");
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.a509774514 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.a2000761798 = (-191);
      problem2_0.a2000761798 = 3348;
      problem2_0.a1167917671 = (-191);
      problem2_0.calculateOutput("iI");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3348, problem2_0.a2000761798);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals((-118), problem2_0.a139631443);
      assertEquals(51, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(190, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(120, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(3348, problem2_0.a2000761798);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      problem2_0.a285406335 = 1137;
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1137, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(49, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(73, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(70, problem2_0.a1937683863);
      assertEquals(180, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(1137, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      
      String string1 = "iB";
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-12631), problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(158, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals((-29231), problem2_0.a857832659);
      assertEquals((-23291), problem2_0.a139631443);
      assertEquals(1137, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals((-14576), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iE");
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-15049), problem2_0.a582062018);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(93, problem2_0.a857832659);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-26908), problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-14641), problem2_0.a139631443);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-19770), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-27223), problem2_0.a857832659);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(44, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(143, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(10, problem2_1.a1527387912);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a857832659);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("a9.,YXR<Re$1_khB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(98, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      // SystemInUtil.addInputLine("g");
      problem2_0.a1182231957 = "=#d~";
      problem2_0.calculateOutput("iC");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(22, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(52, problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(198, problem2_0.a1652194002);
      assertEquals(94, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-28895), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-9407), problem2_0.a582062018);
      assertEquals((-2267), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-5431), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-18112), problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-28895), problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-9407), problem2_0.a582062018);
      assertEquals((-2267), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-5431), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-18112), problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("57-9u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a1087532558 = 1081;
      // SystemInUtil.addInputLine("f");
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(1081, problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(1081, problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(1081, problem2_0.a1087532558);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(93, problem2_0.a1652194002);
      
      problem2_0.a1527387912 = 937;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals((-25343), problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iH");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(320, problem2_0.a857832659);
      assertEquals(268, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(102, problem2_0.a139631443);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(207, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iE");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-16572), problem2_0.a1937683863);
      assertEquals((-3294), problem2_0.a139631443);
      assertEquals((-19730), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-9621), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iE");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-16572), problem2_0.a1937683863);
      assertEquals((-3294), problem2_0.a139631443);
      assertEquals((-19730), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-9621), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a1781947387 = "";
      problem2_0.calculateOutput("iF");
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iH");
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(68, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(190, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(90, problem2_0.a1937683863);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-40), problem2_0.a139631443);
      
      problem2_0.a820621035 = "iH";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("RoiU&.h-ckowl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = (-2053);
      String string0 = "iA";
      problem2_0.calculateOutput("iA");
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(81, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(111, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      
      String string1 = "iD";
      problem2_0.a857832659 = (-2053);
      problem2_0.cf = false;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      // SystemInUtil.addInputLine("iE");
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a860422652 = (-1);
      problem2_0.calculateOutput("iG");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-1), problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      // SystemInUtil.addInputLine(")l65@4Qqp");
      problem2_0.calculateOutput("iC");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-1), problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(159, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(167, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(19, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-1), problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(14, problem2_1.a571734306);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertTrue(problem2_1.cf);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals((-142), problem2_1.a1221761684);
      assertNotNull(problem2_1);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.equals((Object)problem2_1));
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(261, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(234, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(97, problem2_0.a139631443);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-1), problem2_0.a860422652);
      assertEquals(271, problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotSame(problem2_0, problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iC");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(88, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-91), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(72, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.a820621035 = "iD";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a509774514 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.a2000761798 = (-191);
      problem2_0.a2000761798 = 3348;
      problem2_0.a1167917671 = (-191);
      problem2_0.calculateOutput("iI");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(3348, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(37, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-18), problem2_0.a139631443);
      assertEquals(152, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(73, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3348, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Ya~6~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.a763381965 = 3;
      // SystemInUtil.addInputLine("<;");
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iG");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(16089, problem2_0.a860422652);
      assertEquals((-5469), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-14501), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-3266), problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-20379), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(16089, problem2_0.a860422652);
      assertEquals((-5469), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-14501), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-3266), problem2_0.a1652194002);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-20379), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a1652194002 = (-2);
      String string0 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(135, problem2_0.a1652194002);
      assertEquals((-76), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iE");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-12871), problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-27693), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-17112), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-576), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a1573617288 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.a2000761798 = (-191);
      problem2_0.a2000761798 = (-142);
      problem2_0.a1167917671 = (-191);
      problem2_0.calculateOutput("iI");
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(185, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-13), problem2_0.a139631443);
      assertEquals(71, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(185, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-13), problem2_0.a139631443);
      assertEquals(71, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a2000761798);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      
      problem2_0.calculateOutput("iA");
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iB");
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-18547), problem2_0.a139631443);
      assertEquals((-620), problem2_0.a1937683863);
      assertEquals((-3672), problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-16507), problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-519), problem2_0.a857832659);
      
      String string0 = "<T@UDJA.|$wN,";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("<T@UDJA.|$wN,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iC");
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iH");
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14479, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iE");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(126, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-33), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(77, problem2_0.a857832659);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("TJ!ZDA{?MDy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("iE");
      // SystemInUtil.addInputLine("iF");
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iE");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(132, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iF");
      assertEquals(9, problem2_0.a176163228);
      assertEquals(132, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(153, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(8, problem2_1.a38407862);
      assertEquals((-15), problem2_1.a1087532558);
      assertTrue(problem2_1.cf);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(12, problem2_1.a2000761798);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.cf = true;
      problem2_0.calculateOutput("iD");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iD");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(172, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iB");
      assertEquals(269, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(172, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(11, problem2_1.a1301170684);
      assertTrue(problem2_1.cf);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(11, problem2_1.a176163228);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(10, problem2_1.a1527387912);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("k-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.a1652194002 = 1;
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(175, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(255, problem2_0.a1652194002);
      assertEquals(310, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(6, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(105, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      
      String string0 = "iJ";
      problem2_0.calculateOutput("iJ");
      assertEquals((-21), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(124, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 1;
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(101, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1301170684);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(172, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(172, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(172, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a38407862);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 1;
      problem2_0.calculateOutput("iA");
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iA");
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(194, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iA");
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iC");
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iD");
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iD");
      assertEquals(43, problem2_0.a1937683863);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(93, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(172, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 1;
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(258, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(131, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(237, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iA");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(122, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iC");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(122, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iD");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(4, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(122, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iE");
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(4, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(122, problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a1937683863 = 8;
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iH");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iH");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iE");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(37, problem2_0.a139631443);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(62, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(89, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a857832659);
      
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(11, problem2_1.a176163228);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(7, problem2_1.a285406335);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertTrue(problem2_1.cf);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(163, problem2_1.a1420659483);
      assertEquals(12, problem2_1.a2000761798);
      assertNotNull(problem2_1);
      
      // Undeclared exception!
      try { 
        problem2_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.a857832659 = 1;
      problem2_0.calculateOutput("iA");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(55, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iA");
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(101, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(332, problem2_0.a857832659);
      assertEquals(194, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iH");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(146, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(28, problem2_0.a1937683863);
      assertEquals(141, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-63), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.a1652194002 = 1;
      problem2_0.a2000761798 = 9;
      problem2_0.calculateOutput("iH");
      assertEquals(89, problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(199, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(329, problem2_0.a857832659);
      assertEquals(264, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      
      problem2_0.calculateOutput("iH");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-43), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(116, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(15, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(80, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("f");
      problem2_0.a139631443 = (-2217);
      problem2_0.calculateOutput("iA");
      assertEquals(67, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(41, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals((-19), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(133, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iA");
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(96, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(201, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(310, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a857832659);
      assertEquals(14, problem2_0.a1937683863);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(52, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-42), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iA");
      assertEquals(89, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(213, problem2_0.a857832659);
      assertEquals(98, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iI");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iH");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iB");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iG");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      
      problem2_0.calculateOutput("iA");
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(135, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("pESoe?fb'ZIIdpQY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("f");
      problem2_0.a139631443 = (-2217);
      problem2_0.calculateOutput("iA");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(67, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-19), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(41, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iA");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals(96, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(310, problem2_0.a857832659);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(201, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals(52, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-42), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(128, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iA");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(270, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(89, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(98, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(213, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iI");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iH");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iG");
      assertEquals(135, problem2_0.a1420659483);
      assertEquals(35, problem2_0.a139631443);
      assertEquals(149, problem2_0.a1652194002);
      assertEquals(171, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(57, problem2_0.a1937683863);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("RZ<>tk^m9zvX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 1;
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(94, problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(237, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(258, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(131, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iA");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(122, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(122, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iD");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(122, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iE");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(122, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(153, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iC");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-4200), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-27991), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-13723), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-13196), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iE");
      assertFalse(problem2_0.cf);
      assertEquals(1, problem2_0.a582062018);
      assertEquals((-4200), problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals((-27991), problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-13723), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-13196), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("#&RYdDmiQ5_F=V.`$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.a139631443 = 63;
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-20987), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-13944), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-2747), problem2_0.a857832659);
      assertEquals((-10657), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(37, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(147, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(31, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(240, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-29296), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15797), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-16621), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15891), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iC");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-29296), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15797), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-16621), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15891), problem2_0.a139631443);
      
      problem2_0.a1232164262 = (-12437164);
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-12437164), problem2_0.a1232164262);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-29296), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15797), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-16621), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15891), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iD");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a285406335);
      assertEquals((-12437164), problem2_0.a1232164262);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-29296), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15797), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-16621), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-15891), problem2_0.a139631443);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("fo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertNotNull(problem2_0);
      
      problem2_0.a763381965 = 6175;
      problem2_0.calculateOutput("iB");
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(6175, problem2_0.a763381965);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iE");
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(6175, problem2_0.a763381965);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      
      problem2_0.calculateOutput("iE");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-15049), problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(6175, problem2_0.a763381965);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("V?hH~}-2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iF");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iD");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iF");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iI");
      assertEquals(6, problem2_0.a285406335);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      
      problem2_0.calculateOutput("iF");
      assertEquals(6, problem2_0.a285406335);
      assertEquals(17452, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.a38407862 = 5;
      problem2_0.calculateOutput("iJ");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(269, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(222, problem2_0.a857832659);
      assertEquals(190, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(106, problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.a1652194002 = (-3070);
      problem2_0.calculateOutput("iF");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-3070), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iF");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(31, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(109, problem2_0.a1652194002);
      assertEquals((-7), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(31, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(109, problem2_0.a1652194002);
      assertEquals((-7), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iF");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(31, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(109, problem2_0.a1652194002);
      assertEquals((-7), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-21215), problem2_0.a1652194002);
      assertEquals((-22803), problem2_0.a139631443);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15987), problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-17533), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iI");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-21215), problem2_0.a1652194002);
      assertEquals((-22803), problem2_0.a139631443);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15987), problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-17533), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iB");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-21215), problem2_0.a1652194002);
      assertEquals((-22803), problem2_0.a139631443);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-15987), problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(1, problem2_0.a38407862);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-17533), problem2_0.a1937683863);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iD");
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(100, problem2_0.a857832659);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iH");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-15532), problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-5610), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-26822), problem2_0.a1652194002);
      assertEquals((-22181), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(246, problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(306, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(99, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(272, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.a1937683863 = (-13457);
      problem2_0.calculateOutput("iJ");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(306, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(99, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(272, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-13457), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(306, problem2_0.a857832659);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(99, problem2_0.a139631443);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(272, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-13457), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("C9[Wxj-I54");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      String string0 = "iB";
      problem2_0.a509774514 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.a2000761798 = (-191);
      problem2_0.a2000761798 = 3348;
      problem2_0.a1167917671 = (-191);
      String string1 = "iI";
      problem2_0.a861570395 = "iI";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertTrue(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a857832659 = 0;
      problem2_0.calculateOutput("iD");
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(115, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      
      problem2_0.cf = false;
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-25532), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(100, problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(267, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(208, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(271, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iA");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-11682), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-13921), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-14336), problem2_0.a139631443);
      assertEquals((-4501), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(7, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      
      problem2_0.calculateOutput("iD");
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-11682), problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-13921), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-14336), problem2_0.a139631443);
      assertEquals((-4501), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(7, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iE");
      assertEquals(91, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(284, problem2_0.a857832659);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(262, problem2_0.a1652194002);
      assertEquals(101, problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      String string0 = "i68pa8";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("i68pa8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iG");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iG");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-13491), problem2_0.a582062018);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("`n1}/Z1[COm)\"1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(63, problem2_0.a857832659);
      
      problem2_0.a582062018 = 936;
      problem2_0.calculateOutput("iF");
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(129, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(107, problem2_0.a139631443);
      assertEquals(310, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(936, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(128, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(264, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a1527387912);
      
      problem2_0.a139631443 = (-3044);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a1232164262);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("i");
      problem2_0.calculateOutput("iJ");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-14821), problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-14821), problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(12, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(264, problem2_0.a1652194002);
      assertEquals(319, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(179, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(99, problem2_0.a139631443);
      
      problem2_0.calculateOutput("iD");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-27084), problem2_0.a1652194002);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(18132, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-14808), problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-9144), problem2_0.a1937683863);
      assertEquals((-24766), problem2_0.a857832659);
      
      problem2_0.calculateOutput("iA");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(162, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(18132, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(91, problem2_0.a1937683863);
      assertEquals((-58), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(73, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(162, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(18132, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(91, problem2_0.a1937683863);
      assertEquals((-58), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(73, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iH");
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a1301170684);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(162, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(18132, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(91, problem2_0.a1937683863);
      assertEquals((-58), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(73, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("O%6-q@_ryO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      problem2_0.a1652194002 = 10;
      problem2_0.calculateOutput("iD");
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(10, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(167, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(145, problem2_0.a857832659);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iE");
      assertEquals(10, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-17518), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-4500), problem2_0.a1652194002);
      assertEquals((-3825), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-20703), problem2_0.a1937683863);
      
      problem2_0.calculateOutput("iD");
      assertEquals(10, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-17518), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-4500), problem2_0.a1652194002);
      assertEquals((-3825), problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-20703), problem2_0.a1937683863);
      
      problem2_0.a38407862 = (-4151);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Mp[0=IBV%P[~0L2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertNotNull(problem2_0);
      
      String string0 = "iC";
      // SystemInUtil.addInputLine("iE");
      // SystemInUtil.addInputLine("iF");
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.calculateOutput("iC");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(133, problem2_0.a860422652);
      
      problem2_0.a291872378 = "iG";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("[\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertTrue(problem2_0.cf);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iD");
      assertEquals(5, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iA");
      assertEquals(5, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a176163228);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("E!l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      problem2_0.a857832659 = 0;
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(115, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.cf = true;
      problem2_0.calculateOutput("iD");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-25532), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      
      problem2_0.calculateOutput("iI");
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15107), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-25532), problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-29408), problem2_0.a1937683863);
      assertEquals((-18454), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(1, problem2_0.a38407862);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(163, problem2_0.a1420659483);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(6, problem2_0.a285406335);
      assertEquals(2, problem2_0.a763381965);
      
      String string0 = "U4\"8IL*P";
      problem2_0.a929601760 = "&fPp27\"Uvek,cw";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("U4\"8IL*P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(8, problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(111, problem2_0.a1652194002);
      
      String string0 = "iC";
      problem2_0.calculateOutput("iC");
      assertEquals(8, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(263, problem2_0.a1652194002);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(113, problem2_0.a1937683863);
      assertEquals(300, problem2_0.a857832659);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(98, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a1232164262);
      
      problem2_0.a139631443 = 924;
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(69, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(127, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(66, problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-142), problem2_0.a1221761684);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(178, problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("h");
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(64, problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-76), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(93, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(236, problem2_0.a1652194002);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-14641), problem2_0.a139631443);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-19770), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertFalse(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-27223), problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-26908), problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a1740312253 = 3173;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.a509774514 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      
      // SystemInUtil.addInputLine("$!'.@DZKU|{A:t0Sd");
      problem2_0.a2000761798 = (-191);
      problem2_0.a2000761798 = 3348;
      problem2_0.a1167917671 = (-191);
      problem2_0.calculateOutput("iI");
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3348, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(27, problem2_0.a1652194002);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iH");
      assertEquals(152, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3348, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(73, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(37, problem2_0.a1937683863);
      assertEquals(8, problem2_0.a285406335);
      assertEquals((-18), problem2_0.a139631443);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      
      problem2_0.calculateOutput("iH");
      assertEquals(152, problem2_0.a1652194002);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3348, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(73, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(14331, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(37, problem2_0.a1937683863);
      assertEquals((-18), problem2_0.a139631443);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-191), problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Ya~6~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertNotNull(problem2_0);
      
      String string0 = "iD";
      problem2_0.calculateOutput("iD");
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(63, problem2_0.a1937683863);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      
      String string1 = "iC";
      problem2_0.a857832659 = 1;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertTrue(problem2_0.cf);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(128, problem2_0.a1763547350);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("e");
      problem2_0.calculateOutput("iD");
      assertEquals(2, problem2_0.a763381965);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.cf = false;
      // SystemInUtil.addInputLine("Hu6>9e");
      problem2_0.a1937683863 = 1970;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertTrue(problem2_0.cf);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iJ");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.calculateOutput("iB");
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertFalse(problem2_0.cf);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.a820621035 = "iB";
      problem2_0.a2000761798 = (-191);
      Problem2 problem2_1 = new Problem2();
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(1, problem2_1.a1740312253);
      assertEquals(2, problem2_1.a763381965);
      assertEquals((-8), problem2_1.a1937683863);
      assertEquals(10, problem2_1.a1527387912);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(7, problem2_1.a857832659);
      assertEquals(8, problem2_1.a1232164262);
      assertEquals((-132), problem2_1.a139631443);
      assertEquals(11, problem2_1.a176163228);
      assertTrue(problem2_1.cf);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a38407862);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(27, problem2_1.a1652194002);
      assertEquals(4, problem2_1.a1658575004);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(12, problem2_1.a2000761798);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(163, problem2_1.a1420659483);
      assertNotNull(problem2_1);
      
      problem2_1.calculateOutput("iA");
      assertFalse(problem2_1.equals((Object)problem2_0));
      assertEquals(11, problem2_1.a1527387912);
      assertEquals(3, problem2_1.a1167917671);
      assertEquals(2, problem2_1.a763381965);
      assertEquals(7, problem2_1.a285406335);
      assertEquals((-15), problem2_1.a1087532558);
      assertEquals(111, problem2_1.a1652194002);
      assertEquals(9, problem2_1.a1232164262);
      assertEquals(11, problem2_1.a176163228);
      assertFalse(problem2_1.cf);
      assertEquals(63, problem2_1.a857832659);
      assertEquals(128, problem2_1.a1763547350);
      assertEquals(90, problem2_1.a1420659483);
      assertEquals(14, problem2_1.a571734306);
      assertEquals(8, problem2_1.a38407862);
      assertEquals(5, problem2_1.a1658575004);
      assertEquals(9, problem2_1.a2000761798);
      assertEquals((-142), problem2_1.a1221761684);
      assertEquals(341, problem2_1.a582062018);
      assertEquals(11, problem2_1.a1301170684);
      assertEquals(2, problem2_1.a1740312253);
      assertEquals(8, problem2_1.a139631443);
      assertEquals(133, problem2_1.a860422652);
      assertEquals(50, problem2_1.a1937683863);
      assertNotSame(problem2_1, problem2_0);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      String string0 = "iH";
      problem2_0.calculateOutput("iD");
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(218, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(10, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertFalse(problem2_0.cf);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(63, problem2_0.a1937683863);
      assertEquals((-69), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(100, problem2_0.a857832659);
      
      String string1 = "iD";
      problem2_0.a571734306 = (-1);
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      // SystemInUtil.addInputLine("iE");
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(8, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iE");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(8, problem2_0.a285406335);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(153, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iE");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(153, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(153, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(153, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(4, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a285406335);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(132, problem2_0.a857832659);
      assertEquals(153, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-96), problem2_0.a139631443);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals((-142), problem2_0.a1221761684);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertTrue(problem2_0.cf);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      assertNotNull(problem2_0);
      
      problem2_0.a847287963 = "e";
      // SystemInUtil.addInputLine("g");
      problem2_0.a2000761798 = 133;
      problem2_0.calculateOutput("iC");
      assertEquals(133, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      
      String string0 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a38407862);
      assertEquals(133, problem2_0.a2000761798);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(133, problem2_0.a860422652);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals((-132), problem2_0.a139631443);
      
      problem2_0.a450284012 = "iI";
      problem2_0.calculateOutput("iI");
      assertEquals(3, problem2_0.a38407862);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(62, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-27), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(141, problem2_0.a1652194002);
      assertEquals(44, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      
      problem2_0.a820621035 = "DuS 43Uuz7SJ+V";
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertTrue(problem2_0.cf);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertNotNull(problem2_0);
      
      problem2_0.a1652194002 = (-3089);
      problem2_0.calculateOutput("iF");
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-3089), problem2_0.a1652194002);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertFalse(problem2_0.cf);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      
      problem2_0.calculateOutput("iF");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(84, problem2_0.a139631443);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(72, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a2000761798);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      
      problem2_0.a139631443 = (-5897);
      problem2_0.calculateOutput("iI");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals((-5897), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(72, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      
      problem2_0.calculateOutput("iC");
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(38, problem2_0.a1937683863);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(105, problem2_0.a1652194002);
      assertEquals((-5897), problem2_0.a139631443);
      assertEquals(9, problem2_0.a1232164262);
      assertFalse(problem2_0.cf);
      assertEquals(72, problem2_0.a857832659);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(161, problem2_0.a1087532558);
      assertEquals(133, problem2_0.a860422652);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(4, problem2_0.a1167917671);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(341, problem2_0.a582062018);
      assertNotNull(problem2_0);
      
      problem2_0.a582062018 = 1;
      problem2_0.calculateOutput("iC");
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(27, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      
      problem2_0.calculateOutput("iA");
      assertEquals(131, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1740312253);
      assertEquals(6, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a1527387912);
      assertEquals(10, problem2_0.a1232164262);
      assertEquals(94, problem2_0.a139631443);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(237, problem2_0.a857832659);
      assertEquals(1, problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(258, problem2_0.a1652194002);
      
      problem2_0.calculateOutput("iA");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(122, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(153, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iC");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(10, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(122, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(153, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iD");
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(31, problem2_0.a1937683863);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a582062018);
      assertEquals(122, problem2_0.a1652194002);
      assertFalse(problem2_0.cf);
      assertEquals(11, problem2_0.a1527387912);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-85), problem2_0.a139631443);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(9, problem2_0.a176163228);
      assertEquals(13, problem2_0.a2000761798);
      assertEquals(153, problem2_0.a857832659);
      
      problem2_0.calculateOutput("iB");
      assertEquals((-26764), problem2_0.a1652194002);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(4, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-16836), problem2_0.a857832659);
      assertEquals((-12003), problem2_0.a1937683863);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a582062018);
      assertFalse(problem2_0.cf);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(5, problem2_0.a176163228);
      assertEquals(10, problem2_0.a1301170684);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-2098), problem2_0.a139631443);
      assertEquals(13, problem2_0.a2000761798);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("Kg3j$M]Eu/4b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertTrue(problem2_0.cf);
      assertEquals(14, problem2_0.a571734306);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertNotNull(problem2_0);
      
      problem2_0.calculateOutput("iB");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.calculateOutput("iD");
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(5, problem2_0.a38407862);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(14, problem2_0.a571734306);
      assertFalse(problem2_0.cf);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      
      problem2_0.a1740312253 = 1317;
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertTrue(problem2_0.cf);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      assertNotNull(problem2_0);
      
      problem2_0.a509774514 = "h";
      problem2_0.calculateOutput("iB");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(3, problem2_0.a1167917671);
      
      String string0 = "$!'.@DZKU|{A:t0Sd";
      // SystemInUtil.addInputLine("$!'.@DZKU|{A:t0Sd");
      problem2_0.a2000761798 = (-191);
      problem2_0.a1167917671 = 3348;
      problem2_0.a1937683863 = (-191);
      problem2_0.calculateOutput("iA");
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(7, problem2_0.a285406335);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(14331, problem2_0.a1763547350);
      assertFalse(problem2_0.cf);
      assertEquals((-191), problem2_0.a1937683863);
      assertEquals(3348, problem2_0.a1167917671);
      assertEquals((-191), problem2_0.a2000761798);
      assertEquals(10, problem2_0.a1527387912);
      assertEquals(2, problem2_0.a763381965);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(27, problem2_0.a1652194002);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("&4:i2VImg,iQf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Problem2 problem2_0 = new Problem2();
      assertEquals(27, problem2_0.a1652194002);
      assertEquals(2, problem2_0.a763381965);
      assertEquals((-8), problem2_0.a1937683863);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(163, problem2_0.a1420659483);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(12, problem2_0.a2000761798);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertTrue(problem2_0.cf);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(7, problem2_0.a857832659);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals((-132), problem2_0.a139631443);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertNotNull(problem2_0);
      
      problem2_0.a763381965 = 3;
      // SystemInUtil.addInputLine("<;");
      problem2_0.calculateOutput("iA");
      assertEquals(3, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(9, problem2_0.a2000761798);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iD");
      assertEquals(3, problem2_0.a763381965);
      assertEquals(133, problem2_0.a860422652);
      assertEquals(50, problem2_0.a1937683863);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(2, problem2_0.a1740312253);
      assertEquals(8, problem2_0.a139631443);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals(63, problem2_0.a857832659);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(111, problem2_0.a1652194002);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(5, problem2_0.a1658575004);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(9, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(11, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      problem2_0.calculateOutput("iF");
      assertEquals((-22408), problem2_0.a857832659);
      assertEquals(3, problem2_0.a763381965);
      assertEquals(3, problem2_0.a1167917671);
      assertEquals((-142), problem2_0.a1221761684);
      assertEquals(1, problem2_0.a1740312253);
      assertEquals(128, problem2_0.a1763547350);
      assertEquals(90, problem2_0.a1420659483);
      assertEquals((-14355), problem2_0.a1937683863);
      assertEquals(11, problem2_0.a1301170684);
      assertEquals((-12625), problem2_0.a1652194002);
      assertEquals((-15), problem2_0.a1087532558);
      assertEquals(7, problem2_0.a285406335);
      assertEquals(16, problem2_0.a2000761798);
      assertEquals(341, problem2_0.a582062018);
      assertEquals(8, problem2_0.a38407862);
      assertEquals(25573, problem2_0.a860422652);
      assertEquals(4, problem2_0.a1658575004);
      assertEquals((-29951), problem2_0.a139631443);
      assertEquals(11, problem2_0.a176163228);
      assertEquals(8, problem2_0.a1232164262);
      assertEquals(14, problem2_0.a571734306);
      assertEquals(10, problem2_0.a1527387912);
      assertFalse(problem2_0.cf);
      
      // Undeclared exception!
      try { 
        problem2_0.calculateOutput("N\".|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem2", e);
      }
  }
}
