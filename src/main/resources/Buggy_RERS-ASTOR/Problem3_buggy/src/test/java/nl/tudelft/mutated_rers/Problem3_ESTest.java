package nl.tudelft.mutated_rers;

/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 15 10:34:32 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

public class Problem3_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iE");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(297, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(489, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-58), problem3_0.a1687646642);
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(150, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(18672, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals(336, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-158), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iE");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(187, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(18672, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-14284), problem3_0.a1687646642);
      assertEquals((-17870), problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals((-15116), problem3_0.a26198136);
      assertEquals(8, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iE");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iE");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iH");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(4556, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals((-162), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a815802307);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(391, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("u=Q@]:2k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iE");
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iE");
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a707317537);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(127, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(289, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iE");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(10, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-6204), problem3_0.a2123238300);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iE");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(172, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iE");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(172, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(319, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(11, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(556, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-109), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(172, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("fT?*csE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iE");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(172, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(320, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(172, problem3_0.a2123238300);
      assertEquals((-79), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(467, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(394, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(127, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(20230, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(394, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-689), problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(16545, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals((-3914), problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-13184), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iA");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(348, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(16545, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(528, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-20), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-21855), problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29523), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-5463), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-21855), problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(17022, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29523), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-5463), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-21855), problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(17022, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29523), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-5463), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(15, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-29523), problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-5463), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals((-21855), problem3_0.a31602811);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(15, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-29523), problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-5463), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(17022, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals((-21855), problem3_0.a31602811);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-29523), problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-5463), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(17022, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals((-21855), problem3_0.a31602811);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iD");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-20451), problem3_0.a484228004);
      assertEquals((-5344), problem3_0.a26198136);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-20402), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-4436), problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iE");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iB");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iE");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(242, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(271, problem3_0.a438153559);
      assertEquals(74, problem3_0.a484228004);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iE");
      assertEquals((-33), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(271, problem3_0.a438153559);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(323, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(446, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iE");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("da!.4nRUz O_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(145, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(203, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-11152), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-25750), problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals((-4143), problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("Current state has no transition for this input!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(127, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(127, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2983, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(158, problem3_0.a26198136);
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-4531), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(224, problem3_0.a484228004);
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals((-11152), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-25750), problem3_0.a31602811);
      assertEquals(17855, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iC");
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-4531), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(224, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-11152), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-25750), problem3_0.a31602811);
      assertEquals(17855, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iC");
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-4531), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(224, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-11152), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-25750), problem3_0.a31602811);
      assertEquals(17855, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iC");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(127, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iC");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(2983, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(127, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(158, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iD");
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-11152), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-4531), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(224, problem3_0.a484228004);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-25750), problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iD");
      assertEquals((-14282), problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-11152), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-4531), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(224, problem3_0.a484228004);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-25750), problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iE");
      assertEquals(17144, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(4735, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iF");
      assertEquals(124, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(4735, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iE");
      assertEquals((-14382), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-3736), problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(223, problem3_0.a484228004);
      assertEquals(4735, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-27651), problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iE");
      assertEquals((-14382), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-3736), problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(223, problem3_0.a484228004);
      assertEquals(4735, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-27651), problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-176), problem3_0.a1687646642);
      assertEquals(125, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-4788), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-25711), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(247, problem3_0.a484228004);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-9261), problem3_0.a31602811);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-4788), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-25711), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(247, problem3_0.a484228004);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-9261), problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      int[] intArray0 = new int[6];
      intArray0[2] = 14;
      problem3_0.a370354006 = intArray0;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2623, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(281, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-142), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iJ");
      assertEquals((-26454), problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(12, problem3_0.a955424241);
      assertEquals((-24073), problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-8375), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-181), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-40), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(494, problem3_0.a31602811);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(284, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-40), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(494, problem3_0.a31602811);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(284, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iG");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(28706, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(192, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-146), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iJ");
      assertEquals((-20319), problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-16508), problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-3322), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals((-20319), problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-16508), problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-3322), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-181), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(494, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-40), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(284, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(494, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-40), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(284, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iG");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-146), problem3_0.a1687646642);
      assertEquals(192, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(28706, problem3_0.a26198136);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-20319), problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-16508), problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-3322), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iG");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-20319), problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-16508), problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-3322), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-3), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(449, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(96, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iG");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(423, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-70), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(239, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      
      problem3_0.calculateOutput("iI");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(274, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(146, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-164), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iI");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-63), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(443, problem3_0.a31602811);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("v,\"{hqv8pES]W}(YLu:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iH");
      assertEquals((-4031), problem3_0.a31602811);
      assertEquals((-19546), problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(119, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-11935), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iE");
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(289, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(119, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-135), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iE");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-3509), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(225, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(119, problem3_0.a1814684295);
      assertEquals((-154), problem3_0.a26198136);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals((-19553), problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iF");
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(22609, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(241, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iE");
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(128, problem3_0.a26198136);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(241, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-23), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(420, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(451, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(328, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(16, problem3_0.a1687646642);
      assertEquals(12, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iB");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iH");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iH");
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-18258), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-28287), problem3_0.a26198136);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-14430), problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iB");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(195, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(14066, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals((-152), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iH");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(195, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(14066, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals((-152), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iH");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-29379), problem3_0.a31602811);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals((-28373), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-11491), problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iD");
      assertEquals(232, problem3_0.a31602811);
      assertEquals(16059, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-136), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals(232, problem3_0.a31602811);
      assertEquals(16059, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-136), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      
      problem3_0.calculateOutput("iB");
      assertEquals(16, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      
      problem3_0.calculateOutput("iH");
      assertEquals(16, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(500, problem3_0.a31602811);
      assertEquals(220, problem3_0.a26198136);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-16), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iE");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-27246), problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      assertEquals((-19735), problem3_0.a1687646642);
      assertEquals((-17191), problem3_0.a31602811);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(269, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-138), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(23991, problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-181), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iH");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(491, problem3_0.a31602811);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(220, problem3_0.a26198136);
      assertEquals((-31), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iH");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-14310), problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals((-19803), problem3_0.a1687646642);
      assertEquals((-25729), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(476, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-24), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(314, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(15, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-29), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(15, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-18258), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-28287), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-14430), problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(255, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-172), problem3_0.a1687646642);
      assertEquals(21409, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15925, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-11), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(195, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(469, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-11), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(195, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(469, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iH");
      assertEquals((-19423), problem3_0.a1687646642);
      assertEquals((-17071), problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-25823), problem3_0.a31602811);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.a822056042 = problem3_0.a520869622;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(136, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-13778), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(124, problem3_0.a333984630);
      assertEquals((-14791), problem3_0.a26198136);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-25422), problem3_0.a31602811);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(136, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-129), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(120, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(268, problem3_0.a31602811);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(126, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-7301), problem3_0.a1687646642);
      assertEquals((-10248), problem3_0.a31602811);
      assertEquals(10, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-6739), problem3_0.a26198136);
      
      problem3_0.calculateOutput("iC");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(301, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(126, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(138, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-173), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(253, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-110), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iD");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(145, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-24455), problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a955424241);
      assertEquals((-10095), problem3_0.a26198136);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-267), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iG");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(145, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(193, problem3_0.a31602811);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-164), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(153, problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(409, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iH");
      assertEquals(8, problem3_0.a278964986);
      assertEquals(119, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-11935), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-4031), problem3_0.a31602811);
      assertEquals((-19546), problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("51");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertNotNull(problem3_0);
      
      problem3_0.a955424241 = 13;
      problem3_0.calculateOutput("iB");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.a1084159064 = 3;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iE");
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iB");
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(129, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(295, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(230, problem3_0.a31602811);
      assertEquals(74, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertNotNull(problem3_0);
      
      problem3_0.a1084159064 = 5;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.a111781980 = 294;
      problem3_0.a1084159064 = 5;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.a114512699 = "M";
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("1MUAcgT\"$E{po;2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.a111781980 = (-297);
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-4707), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a31602811);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-20336), problem3_0.a26198136);
      
      problem3_0.calculateOutput("iH");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-4707), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(130, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(2, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-20336), problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iG");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(10691, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iI");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(6202, problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-4363), problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-25709), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-24860), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(281, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-145), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("#lEuwaVI9Wau^}E/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iA");
      assertEquals((-4363), problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-24860), problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-25709), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(255, problem3_0.a31602811);
      assertEquals(138, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals((-148), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-21019), problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("o$KM:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-24860), problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-4363), problem3_0.a26198136);
      assertEquals((-25709), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iE");
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(468, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(292, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(24, problem3_0.a1687646642);
      assertEquals(11, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(299, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iA");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-25709), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-4363), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-24860), problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(132, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(258, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-130), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-95), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(487, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(312, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-95), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(487, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(312, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-25709), problem3_0.a1687646642);
      assertEquals((-24860), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-4363), problem3_0.a26198136);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("WJ9rU0RD?b-%;1|_*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(15925, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iC");
      assertEquals((-25779), problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-23043), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-21506), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("tgfxM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(15925, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iC");
      assertEquals((-23043), problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-25779), problem3_0.a31602811);
      assertEquals((-21506), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iE");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-71), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(402, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(317, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("zG GPU8aI2HVX?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15925, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iC");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-21506), problem3_0.a1687646642);
      assertEquals((-25779), problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-23043), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-166), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(265, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(160, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iE");
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-3624), problem3_0.a31602811);
      assertEquals((-7739), problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-20652), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      problem3_0.a1337672725 = intArray0;
      problem3_0.calculateOutput("iJ");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(118, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-135), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(272, problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-114), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-114), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-957), problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-17016), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-15103), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("[=o8,aq u[I~txoJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(129, problem3_0.a26198136);
      assertEquals(5, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-9310), problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(13, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-3522), problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-27714), problem3_0.a1687646642);
      assertEquals(5, problem3_0.a1084159064);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(129, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iF");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals((-3522), problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-9310), problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-27714), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iF");
      assertEquals(199, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(150, problem3_0.a26198136);
      assertEquals(19613, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-137), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iA");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iG");
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-17760), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-19476), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-22279), problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iG");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(491, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(196, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-19), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iA");
      assertEquals((-26736), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-28044), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-1256), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iE");
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(474, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1687646642);
      assertEquals(322, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iA");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-1256), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-26736), problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-28044), problem3_0.a31602811);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(351, problem3_0.a26198136);
      assertEquals(498, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(5, problem3_0.a1687646642);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iF");
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iA");
      assertEquals((-28044), problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-26736), problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals((-1256), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("5rs=7I?:M<%Hi(u9F%%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iA");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-1256), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-28044), problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-26736), problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-107), problem3_0.a1687646642);
      assertEquals(271, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(558, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iC");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iC");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      
      problem3_0.calculateOutput("iG");
      assertEquals(16, problem3_0.a1687646642);
      assertEquals(525, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(335, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iI");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(514, problem3_0.a31602811);
      assertEquals(184, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(1, problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iE");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(128, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(346, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iE");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-18153), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-16241), problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-8473), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(16, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iE");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(255, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(25241, problem3_0.a26198136);
      assertEquals(16, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iA");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(546, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(208, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-37), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-119), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(227, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-2031), problem3_0.a438153559);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(15, problem3_0.a1188023336);
      assertEquals(445, problem3_0.a31602811);
      assertEquals(282, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-37), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-2031), problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("S,qp.P-x1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iD");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(424, problem3_0.a31602811);
      assertEquals(349, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-89), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("l>3Kfy$ne");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iA");
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-4707), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-20336), problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(2, problem3_0.a31602811);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iA");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(161, problem3_0.a26198136);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(16, problem3_0.a955424241);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(256, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(346, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-155), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(128, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals((-8473), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-16241), problem3_0.a26198136);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-18153), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-120), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(26329, problem3_0.a26198136);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(262, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-120), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(26329, problem3_0.a26198136);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(262, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iE");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(128, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(346, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-155), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iE");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-8473), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-18153), problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(16, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-16241), problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("F@;+S6{|1H/EDQPdc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iA");
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iB");
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals((-15205), problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(20876, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-25598), problem3_0.a31602811);
      assertEquals((-6814), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals((-15205), problem3_0.a333984630);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-24445), problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iA");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-155), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iB");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-15205), problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13166, problem3_0.a26198136);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(421, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a955424241);
      assertEquals((-68), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(322, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10741, problem3_0.a333984630);
      assertEquals((-147), problem3_0.a1687646642);
      assertEquals(111, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(287, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iD");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iG");
      assertEquals(4079, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-18476), problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iD");
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iB");
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-53), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(214, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(444, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iD");
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-53), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(214, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(444, problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iG");
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(121, problem3_0.a333984630);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(128, problem3_0.a26198136);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("D<5O2>'G%3i>mJB-~t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iD");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iA");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iE");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(185, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals((-20), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(512, problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iC");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(127, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(17845, problem3_0.a26198136);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(127, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals((-16823), problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals((-16823), problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(138, problem3_0.a26198136);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iC");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(255, problem3_0.a484228004);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-21988), problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals((-16823), problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-1269), problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-2150), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(16755, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(145, problem3_0.a26198136);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals((-12502), problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("9W5u1,?9[?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(16755, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iG");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(116, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(4321, problem3_0.a333984630);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals((-12502), problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iG");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-13723), problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a484228004);
      assertEquals((-2254), problem3_0.a26198136);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-23465), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(4321, problem3_0.a333984630);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(145, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-5031), problem3_0.a1687646642);
      assertEquals(154, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(17855, problem3_0.a333984630);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals((-4161), problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-19575), problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(537, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(272, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-53), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals((-12022), problem3_0.a1982090304);
      assertEquals(345, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-120), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(29781, problem3_0.a26198136);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iJ");
      assertEquals((-12022), problem3_0.a1982090304);
      assertEquals(345, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-120), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(16433, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iJ");
      assertEquals((-396), problem3_0.a26198136);
      assertEquals((-12022), problem3_0.a1982090304);
      assertEquals((-1252), problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-17847), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(16433, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iF");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(1443, problem3_0.a333984630);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(115, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iA");
      assertEquals(207, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(1443, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(545, problem3_0.a31602811);
      assertEquals(0, problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(119, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(119, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-15205), problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.a278964986 = (-143);
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iB");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iE");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(134, problem3_0.a26198136);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iH");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals((-14275), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-19886), problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-10537), problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iB");
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iE");
      assertEquals(134, problem3_0.a26198136);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-2151), problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-20182), problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-19487), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(342, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iE");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("/,z' ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.a1982090304 = 4481;
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4481, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(131, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("7(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.a1982090304 = 4481;
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4481, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(131, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(21603, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4481, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(131, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iH");
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(113, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals((-17757), problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-110), problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-2573), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(12, problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-137), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(321, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("R3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-158), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(118, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(256, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iF");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-158), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(118, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(256, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iF");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(227, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-56), problem3_0.a1687646642);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(479, problem3_0.a31602811);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(129, problem3_0.a26198136);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(129, problem3_0.a26198136);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(274, problem3_0.a26198136);
      assertEquals(494, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-112), problem3_0.a1687646642);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iG");
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-46), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(269, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(4608, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-161), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iF");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(300, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iB");
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(151, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(300, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iH");
      assertEquals(223, problem3_0.a26198136);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals((-79), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(473, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(235, problem3_0.a26198136);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iB");
      assertEquals(598, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(256, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-158), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(118, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iB");
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(256, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-158), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(118, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iI");
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(252, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-51), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(501, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(151, problem3_0.a26198136);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iG");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(10773, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(151, problem3_0.a26198136);
      assertEquals((-124), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("oU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iE");
      assertEquals(282, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(17144, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(282, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(131, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(5, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iE");
      assertEquals(282, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(131, problem3_0.a26198136);
      assertEquals(17552, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iE");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(137, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(274, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iF");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-9745), problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a955424241);
      assertEquals((-3584), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(282, problem3_0.a484228004);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-21010), problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(17144, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(131, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iA");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(183, problem3_0.a26198136);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(469, problem3_0.a31602811);
      assertEquals((-61), problem3_0.a1687646642);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(17144, problem3_0.a26198136);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(131, problem3_0.a26198136);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iF");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(129, problem3_0.a26198136);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("J`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(235, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-25), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(427, problem3_0.a31602811);
      assertEquals(185, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-25), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(427, problem3_0.a31602811);
      assertEquals(185, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (-203);
      intArray0[2] = (-203);
      problem3_0.a822056042 = intArray0;
      problem3_0.calculateOutput("iF");
      assertEquals((-203), problem3_0.a111781980);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iA");
      assertEquals((-203), problem3_0.a111781980);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-203), problem3_0.a111781980);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(185, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(427, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-25), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iA");
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iA");
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-2650), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-8632), problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-20243), problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iA");
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(313, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(119, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(181, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(440, problem3_0.a31602811);
      assertEquals((-1), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iA");
      assertEquals(230, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iA");
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(230, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iH");
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(230, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iI");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals((-2232), problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(216, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-28806), problem3_0.a26198136);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-1487), problem3_0.a1687646642);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(217, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals((-171), problem3_0.a1687646642);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(215, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-12415), problem3_0.a26198136);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-22004), problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-18715), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10658, problem3_0.a2123238300);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iA");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iG");
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-16), problem3_0.a1687646642);
      assertEquals(234, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(511, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iG");
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-16), problem3_0.a1687646642);
      assertEquals(234, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(511, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(230, problem3_0.a31602811);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iI");
      assertEquals((-19), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(172, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(498, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(230, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-53), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(529, problem3_0.a31602811);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(216, problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iB");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(394, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(127, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a955424241);
      
      problem3_0.a1792652491 = problem3_0.a1862638911;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(127, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(394, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iA");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(127, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(394, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iH");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(227, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-28238), problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-1514), problem3_0.a1687646642);
      assertEquals((-3900), problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(124, problem3_0.a333984630);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(122, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(124, problem3_0.a333984630);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(139, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(124, problem3_0.a333984630);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-577), problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(196, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(124, problem3_0.a333984630);
      assertFalse(problem3_0.cf);
      assertEquals((-9163), problem3_0.a1687646642);
      assertEquals((-17202), problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(283, problem3_0.a31602811);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(15925, problem3_0.a26198136);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iF");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(130, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(283, problem3_0.a31602811);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(15925, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iF");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(130, problem3_0.a26198136);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iF");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(130, problem3_0.a26198136);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(208, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-37), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(546, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(227, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-2031), problem3_0.a438153559);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals((-119), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(122, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(243, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-47), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(416, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-2031), problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("0Jm6sAqaE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iE");
      assertEquals(14, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(128, problem3_0.a26198136);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(346, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a707317537);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(128, problem3_0.a26198136);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(227, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(346, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a707317537);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(352, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(492, problem3_0.a31602811);
      assertEquals(227, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-47), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-114), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iB");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-158), problem3_0.a1687646642);
      assertEquals(256, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(118, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(267, problem3_0.a31602811);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iD");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(165, problem3_0.a26198136);
      assertEquals(560, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("!eK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(122, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(267, problem3_0.a31602811);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-98), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(227, problem3_0.a26198136);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(450, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-98), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(227, problem3_0.a26198136);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(450, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a955424241);
      assertEquals((-150), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(19351, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(144, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iG");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(446, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-66), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(328, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("oW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-100), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(219, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(499, problem3_0.a31602811);
      assertEquals(12, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-100), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(219, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(499, problem3_0.a31602811);
      assertEquals(12, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iE");
      assertEquals(297, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14974, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-158), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-181), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iG");
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(538, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-86), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("]hQ#}:yx|z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iI");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(273, problem3_0.a26198136);
      assertEquals(477, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(0, problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(273, problem3_0.a26198136);
      assertEquals(477, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(0, problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iH");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(17564, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(231, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-181), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(496, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(269, problem3_0.a26198136);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(134, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-181), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(531, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(538, problem3_0.a31602811);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-16), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(246, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iH");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(156, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-118), problem3_0.a1687646642);
      assertEquals(282, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iD");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(247, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-6), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(448, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iH");
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(156, problem3_0.a26198136);
      assertEquals((-118), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(11, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iG");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(293, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(487, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-99), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(14, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iH");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(156, problem3_0.a26198136);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-118), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iJ");
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(444, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-58), problem3_0.a1687646642);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(222, problem3_0.a26198136);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(531, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(352, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(134, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(11, problem3_0.a707317537);
      assertEquals((-141), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iF");
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(125, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals((-176), problem3_0.a1687646642);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(205, problem3_0.a31602811);
      assertEquals((-176), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(125, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iA");
      assertEquals((-45), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(238, problem3_0.a26198136);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(513, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a1084159064);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iE");
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(128, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(346, problem3_0.a31602811);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("Tef`iYEvfM))");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(122, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(539, problem3_0.a31602811);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(288, problem3_0.a26198136);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(539, problem3_0.a31602811);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(288, problem3_0.a26198136);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iI");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(138, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iD");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15854, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals((-14886), problem3_0.a1982090304);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(539, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-14886), problem3_0.a1982090304);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(231, problem3_0.a26198136);
      assertEquals(9, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iI");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(539, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-14886), problem3_0.a1982090304);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(231, problem3_0.a26198136);
      assertEquals(9, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iI");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(138, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15854, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(299, problem3_0.a31602811);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-14886), problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(539, problem3_0.a31602811);
      assertEquals(231, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-14886), problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(539, problem3_0.a31602811);
      assertEquals(231, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(114, problem3_0.a333984630);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-14886), problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(227, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a707317537);
      assertEquals((-98), problem3_0.a1687646642);
      assertEquals(450, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(227, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a707317537);
      assertEquals((-98), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a955424241);
      assertEquals(450, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-23), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(420, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-23), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(420, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-23), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(420, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iI");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-23), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(420, problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-23), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(420, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-23), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(420, problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(96, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iA");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(12, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(12, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iE");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(11, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iA");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(11, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(6, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iA");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iD");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(130, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(289, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iA");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(230, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals((-10), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iG");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(275, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(148, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-169), problem3_0.a1687646642);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-179), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(267, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iD");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(165, problem3_0.a26198136);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(560, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iD");
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-160), problem3_0.a1687646642);
      assertEquals(2805, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-3544), problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(220, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(531, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iC");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(10, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.a111781980 = (-1090502930);
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iI");
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-163), problem3_0.a1687646642);
      assertEquals(115, problem3_0.a26198136);
      assertEquals(218, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iG");
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1084159064);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("^x\"@:%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iI");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(259, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-148), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(11464, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-20), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(476, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(192, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iG");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-20), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(476, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(192, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iG");
      assertEquals(10, problem3_0.a278964986);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals((-20), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(476, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(192, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(7080, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(227, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iB");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(132, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(322, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(462, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-58), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(301, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iI");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-182), problem3_0.a1687646642);
      assertEquals(217, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9461, problem3_0.a26198136);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iA");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iB");
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iB");
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iG");
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("\"~E0N.baY#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(283, problem3_0.a31602811);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(15925, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-11), problem3_0.a1687646642);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(195, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(469, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iC");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-11), problem3_0.a1687646642);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(195, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(469, problem3_0.a31602811);
      assertEquals(12, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(299, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iB");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(192, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-20), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(476, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(192, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-20), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(476, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(192, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(476, problem3_0.a31602811);
      assertEquals((-20), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iG");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(192, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(476, problem3_0.a31602811);
      assertEquals((-20), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 12;
      problem3_0.a1421067070 = intArray0;
      problem3_0.calculateOutput("iG");
      assertEquals((-152), problem3_0.a1687646642);
      assertEquals(125, problem3_0.a26198136);
      assertEquals(230, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(1053, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(342, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iH");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(342, problem3_0.a26198136);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iH");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(138, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-26630), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-22249), problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iH");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(10, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iB");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a1188023336);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(486, problem3_0.a31602811);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iB");
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(118, problem3_0.a26198136);
      assertEquals((-158), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(256, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      int[] intArray0 = new int[8];
      problem3_0.a973906361 = intArray0;
      intArray0[7] = 9;
      problem3_0.a1684818597 = intArray0;
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-40), problem3_0.a1687646642);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(503, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-40), problem3_0.a1687646642);
      assertEquals(598, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(503, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(217, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(217, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(217, problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iJ");
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(250, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-117), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(118, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("S,qp.P-x1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iH");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(156, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-118), problem3_0.a1687646642);
      assertEquals(282, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(247, problem3_0.a26198136);
      assertEquals(4, problem3_0.a1687646642);
      assertEquals(547, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(11, problem3_0.a707317537);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iG");
      assertEquals((-10715), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(11, problem3_0.a707317537);
      assertEquals((-12445), problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals((-1289), problem3_0.a31602811);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(267, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals(227, problem3_0.a26198136);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-98), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(450, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iB");
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(12, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(227, problem3_0.a26198136);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(4, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-98), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(450, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iC");
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(9, problem3_0.a1102122501);
      
      problem3_0.calculateOutput("iF");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-17027), problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-4410), problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-17841), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iC");
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iC");
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iB");
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iB");
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iG");
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(9, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iB");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iI");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iB");
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iJ");
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iA");
      assertEquals((-37), problem3_0.a1687646642);
      assertEquals(208, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(546, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("s;;||>DxFdkUll");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(546, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(208, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-37), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iF");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-29476), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-18075), problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-1558), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(394, problem3_0.a31602811);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(127, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iB");
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(9, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(394, problem3_0.a31602811);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(20230, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a2130629031);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("Bf5vlj={^G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-131), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(283, problem3_0.a31602811);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15925, problem3_0.a26198136);
      assertEquals(11, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iH");
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-118), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(156, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.a755993490 = problem3_0.a565929068;
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(547, problem3_0.a31602811);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(247, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a707317537);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-16694), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-13948), problem3_0.a26198136);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(11, problem3_0.a707317537);
      assertEquals((-24182), problem3_0.a31602811);
      
      problem3_0.calculateOutput("iG");
      assertEquals(3, problem3_0.a111781980);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-173), problem3_0.a1687646642);
      assertEquals(13811, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(304, problem3_0.a31602811);
      assertEquals(11, problem3_0.a707317537);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("t[g3Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(15, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(346, problem3_0.a31602811);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(128, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-155), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iE");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-8473), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-18153), problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-16241), problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(16, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-120), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(262, problem3_0.a31602811);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(26329, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iF");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(14, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-120), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(262, problem3_0.a31602811);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(26329, problem3_0.a26198136);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(205, problem3_0.a31602811);
      assertEquals(134, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals((-181), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(494, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(284, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-40), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iG");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(494, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(284, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-40), problem3_0.a1687646642);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(3591, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals((-125), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iG");
      assertEquals(3591, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10, problem3_0.a1084159064);
      assertFalse(problem3_0.cf);
      assertEquals(300, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals((-125), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iD");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(2350, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-13835), problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(26709, problem3_0.a333984630);
      assertEquals(108, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-13835), problem3_0.a1982090304);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      
      problem3_0.calculateOutput("iF");
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(22609, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(241, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      
      problem3_0.calculateOutput("iH");
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(12, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(241, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(112, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(22609, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(241, problem3_0.a31602811);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a955424241);
      assertEquals(444, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-37), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(213, problem3_0.a26198136);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(241, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(22609, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(275, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(437, problem3_0.a31602811);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(12, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(12, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.calculateOutput("iF");
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(241, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-33), problem3_0.a1982090304);
      assertFalse(problem3_0.cf);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(22609, problem3_0.a26198136);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iD");
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(122, problem3_0.a26198136);
      
      problem3_0.calculateOutput("iD");
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(16755, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.a1982090304 = 9;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("WrY;H^3fXOWyhV#A\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.a1982090304 = 9;
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iE");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(282, problem3_0.a31602811);
      assertEquals(4735, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(17144, problem3_0.a26198136);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-126), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("FeYKs(hK<4Et:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.calculateOutput("iD");
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(3, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(124, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(16755, problem3_0.a26198136);
      assertEquals((-12502), problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      
      problem3_0.a2130629031 = (-1843446670);
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iC");
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iB");
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-5), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iC");
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-5), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(15, problem3_0.a955424241);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(7, problem3_0.a1084159064);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(237, problem3_0.a26198136);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(550, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-5), problem3_0.a1687646642);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iC");
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12807, problem3_0.a26198136);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-180), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(266, problem3_0.a31602811);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      
      problem3_0.a1687646642 = (-1077887544);
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      
      problem3_0.a1687646642 = 13;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertNotNull(problem3_0);
      
      problem3_0.a915182648 = "x";
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.a1687646642 = 61;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertNotNull(problem3_0);
      
      problem3_0.a98451550 = problem3_0.a605633079;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.a1792652491 = problem3_0.a340796073;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("6=[aQfr'^~l(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertNotNull(problem3_0);
      
      problem3_0.a26198136 = 2575;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.a2130629031 = 7;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertNotNull(problem3_0);
      
      problem3_0.a1102122501 = 0;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.a31602811 = 2084;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      
      problem3_0.a822056042 = problem3_0.a130614078;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertTrue(problem3_0.cf);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(299, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.a1102122501 = 133;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(7, problem3_0.a1102122501);
      assertTrue(problem3_0.cf);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(164, problem3_0.a31602811);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(267, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(8, problem3_0.a707317537);
      
      problem3_0.a114512699 = "Wz9|Lg@+kE<qe";
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertEquals(9, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      
      problem3_0.a915182648 = "FPn@GB}aD&3|LK";
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iD");
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(299, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-149), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(10674, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(393, problem3_0.a2123238300);
      
      problem3_0.a26198136 = 9;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("WrY;H^3fXOWyhV#A\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      
      problem3_0.a822056042 = problem3_0.a1862638911;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      assertTrue(problem3_0.cf);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(164, problem3_0.a31602811);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(96, problem3_0.a26198136);
      
      problem3_0.a1600633282 = problem3_0.a868615529;
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-10), problem3_0.a1687646642);
      assertEquals(230, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(409, problem3_0.a31602811);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(230, problem3_0.a31602811);
      assertEquals(139, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(13, problem3_0.a1188023336);
      
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertTrue(problem3_0.cf);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.calculateOutput("iF");
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(4, problem3_0.a111781980);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(8, problem3_0.a1084159064);
      
      problem3_0.a1806195917 = problem3_0.a1574199704;
      problem3_0.calculateOutput("iB");
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(322, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(9, problem3_0.a278964986);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(3, problem3_0.a2130629031);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-127), problem3_0.a1687646642);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(132, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iB");
      assertEquals(457, problem3_0.a31602811);
      assertEquals(5, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals((-6), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(273, problem3_0.a26198136);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(19, problem3_0.a484228004);
      assertTrue(problem3_0.cf);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iH");
      assertEquals(4, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(16, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(12, problem3_0.a1687646642);
      assertEquals(133, problem3_0.a1814684295);
      assertFalse(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(342, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(531, problem3_0.a31602811);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.a915182648 = "J>8-,B+y-_dLbf";
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertTrue(problem3_0.cf);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(13, problem3_0.a1188023336);
      assertFalse(problem3_0.cf);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(15, problem3_0.a815802307);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(7, problem3_0.a1084159064);
      
      problem3_0.a26198136 = (-1591);
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertTrue(problem3_0.cf);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(235, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      
      problem3_0.a31602811 = (-203);
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(2, problem3_0.a111781980);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(6, problem3_0.a1084159064);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iJ");
      assertEquals(14, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(122, problem3_0.a26198136);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(267, problem3_0.a31602811);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(3, problem3_0.a111781980);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.calculateOutput("iD");
      assertEquals(15, problem3_0.a955424241);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals((-75), problem3_0.a1687646642);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(560, problem3_0.a31602811);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(8, problem3_0.a707317537);
      assertEquals(10, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(165, problem3_0.a26198136);
      assertEquals(197, problem3_0.a1982090304);
      
      problem3_0.a114512699 = "iJ";
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertTrue(problem3_0.cf);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a278964986);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iB");
      assertEquals(15, problem3_0.a815802307);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(7, problem3_0.a1084159064);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(15, problem3_0.a955424241);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(207, problem3_0.a438153559);
      assertEquals((-29), problem3_0.a1687646642);
      assertEquals(217, problem3_0.a26198136);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(486, problem3_0.a31602811);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(12, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.a278964986 = 1;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(8, problem3_0.a278964986);
      assertEquals(14, problem3_0.a815802307);
      assertTrue(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals((-203), problem3_0.a1687646642);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iF");
      assertEquals(235, problem3_0.a26198136);
      assertEquals(10, problem3_0.a278964986);
      assertEquals(9, problem3_0.a1102122501);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(4, problem3_0.a111781980);
      assertEquals(495, problem3_0.a31602811);
      assertEquals(19, problem3_0.a484228004);
      assertEquals(4, problem3_0.a2130629031);
      assertEquals(81, problem3_0.a333984630);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(14, problem3_0.a955424241);
      assertEquals((-114), problem3_0.a1687646642);
      assertEquals(8, problem3_0.a1084159064);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(393, problem3_0.a2123238300);
      assertFalse(problem3_0.cf);
      
      problem3_0.a822056042 = problem3_0.a370354006;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Problem3 problem3_0 = new Problem3();
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(14, problem3_0.a955424241);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertTrue(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertNotNull(problem3_0);
      
      problem3_0.calculateOutput("iA");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(164, problem3_0.a31602811);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(96, problem3_0.a26198136);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(2, problem3_0.a2130629031);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(7, problem3_0.a1102122501);
      assertEquals(2, problem3_0.a111781980);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a278964986);
      assertEquals((-203), problem3_0.a1687646642);
      assertFalse(problem3_0.cf);
      assertEquals(197, problem3_0.a1982090304);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      
      problem3_0.calculateOutput("iF");
      assertEquals(81, problem3_0.a333984630);
      assertEquals(22609, problem3_0.a26198136);
      assertEquals(12, problem3_0.a955424241);
      assertEquals(207, problem3_0.a438153559);
      assertEquals(10, problem3_0.a707317537);
      assertEquals(3, problem3_0.a2130629031);
      assertEquals(133, problem3_0.a1814684295);
      assertEquals(6, problem3_0.a1084159064);
      assertEquals(393, problem3_0.a2123238300);
      assertEquals(3, problem3_0.a111781980);
      assertEquals((-179), problem3_0.a1687646642);
      assertEquals(14, problem3_0.a815802307);
      assertEquals(8, problem3_0.a1102122501);
      assertEquals(9, problem3_0.a278964986);
      assertFalse(problem3_0.cf);
      assertEquals(13, problem3_0.a1188023336);
      assertEquals(19, problem3_0.a484228004);
      assertEquals((-33), problem3_0.a1982090304);
      assertEquals(241, problem3_0.a31602811);
      
      problem3_0.a31602811 = 96;
      // Undeclared exception!
      try { 
        problem3_0.calculateOutput("iJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem3", e);
      }
  }
}
