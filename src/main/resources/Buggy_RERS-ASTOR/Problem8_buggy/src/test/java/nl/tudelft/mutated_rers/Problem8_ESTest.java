package nl.tudelft.mutated_rers;

/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 15 12:24:06 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;

public class Problem8_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      //  Problem8.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      String string0 = "mM5Z7tS9X]";
      problem8_0.a46031761 = 0;
      // SystemInUtil.addInputLine("`8P]3n&,($shEU[?.");
      // SystemInUtil.addInputLine("f");
      String string1 = "oW";
      problem8_0.a1625778031 = 13;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("oW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      problem8_0.a191569517 = 354;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iE");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("+8hp{`==AemUm_K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      problem8_0.a541669751 = (-1912);
      problem8_0.a1438701658 = (-1912);
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Al`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iD");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(150, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-61), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(304, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(150, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-61), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(304, problem8_0.a46031761);
      
      // SystemInUtil.addInputLine("f");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(128, problem8_1.a684801399);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(7, problem8_1.a1358616787);
      assertTrue(problem8_1.cf);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(96, problem8_1.a1609282740);
      assertNotNull(problem8_1);
      
      problem8_1.a265817897 = "KH GbLP:7%<=)|RT";
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-69), problem8_0.a541669751);
      
      problem8_0.calculateOutput("iD");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(95, problem8_0.a541669751);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(216, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-88), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(95, problem8_0.a541669751);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(216, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-88), problem8_0.a1758726220);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a1395211234 = "=";
      problem8_0.a1758726220 = (-1);
      // SystemInUtil.addInputLine("Problem8");
      // SystemInUtil.addInputLine("f");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(106, problem8_1.a541669751);
      assertTrue(problem8_1.cf);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(9, problem8_1.a307193304);
      assertNotNull(problem8_1);
      
      problem8_1.a1671467081 = 120;
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertTrue(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      problem8_0.a1928869419 = "]o}7T!wgz";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iD");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(136, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-9), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-73), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(14, problem8_0.a2105667438);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(37, problem8_0.a30313548);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iA");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(176, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f";
      stringArray0[1] = "f";
      // SystemInUtil.addInputLine("iA");
      //  Problem8.main(stringArray0);
      //  Problem8.main(stringArray0);
      String[] stringArray1 = null;
      //  Problem8.main(stringArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // SystemInUtil.addInputLine("iC");
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iH");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("5\u0003O{#l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iG");
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iG");
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-31), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(178, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(142, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1260877377);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertTrue(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      String string0 = "iJ";
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a43586272 = (-24589507);
      problem8_0.a604090397 = (-18);
      problem8_0.calculateOutput("iG");
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-24589507), problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a604090397);
      
      problem8_0.calculateOutput("iG");
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-24589507), problem8_0.a43586272);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals((-18), problem8_0.a604090397);
      
      problem8_0.a191569517 = (-18);
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("~iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iN");
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("'4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iI");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-28344), problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-14863), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-13635), problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-25209), problem8_0.a541669751);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("5x|Omr<Y'~T]|yS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a315983816);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(5, problem8_1.a1319101);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(128, problem8_1.a684801399);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(12, problem8_1.a1625778031);
      assertTrue(problem8_1.cf);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertNotNull(problem8_1);
      
      problem8_1.calculateOutput("iB");
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a315983816);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(5, problem8_1.a1319101);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(128, problem8_1.a684801399);
      assertEquals((-18), problem8_1.a1758726220);
      assertFalse(problem8_1.cf);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(5, problem8_1.a2131549637);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertNotSame(problem8_1, problem8_0);
      
      problem8_1.calculateOutput("iB");
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a315983816);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(5, problem8_1.a1671467081);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(369, problem8_1.a1675975143);
      assertEquals(11, problem8_1.a43586272);
      assertEquals((-15), problem8_1.a541669751);
      assertEquals(128, problem8_1.a684801399);
      assertFalse(problem8_1.cf);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(5, problem8_1.a2131549637);
      assertEquals((-152), problem8_1.a1758726220);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(10, problem8_1.a191569517);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(11, problem8_1.a1625778031);
      assertEquals(143, problem8_1.a46031761);
      assertEquals(114, problem8_1.a131814132);
      assertEquals(6, problem8_1.a1358616787);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertNotSame(problem8_1, problem8_0);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("v/>lq<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iM");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iM");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(325, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-126), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(73, problem8_0.a541669751);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(101, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g";
      problem8_0.calculateOutput("iA");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a191569517);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iF");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iF");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      
      String string0 = "ShF4";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("ShF4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // SystemInUtil.addInputLine("/T9r+m`Iq{hH75");
      // SystemInUtil.addInputLine("iL");
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iL");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      problem8_0.a186714128 = null;
      problem8_0.a1758726220 = 158;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertTrue(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      problem8_0.a1358616787 = (-35036);
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("8F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("g");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g";
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      problem8_0.a1625778031 = 3091;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("7bwV*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      
      problem8_0.a265817897 = "8/f{t(Wy~d";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "h";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iG");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.a265817897 = "";
      // SystemInUtil.addInputLine("i");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "g";
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iK");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iE");
      assertEquals(427, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(48, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(134, problem8_0.a46031761);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-9), problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iG");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iG");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(100, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(279, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-36), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(249, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iD");
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-9), problem8_0.a131814132);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(136, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-73), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iD");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(285, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(121, problem8_0.a541669751);
      assertEquals((-72), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(143, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 9;
      problem8_0.calculateOutput("iE");
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iE");
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-69), problem8_0.a541669751);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(189, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iE");
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // SystemInUtil.addInputLine("iJ");
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "]k<{>VSf&{17AF&m";
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("]k<{>VSf&{17AF&m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      // SystemInUtil.addInputLine("h");
      problem8_0.calculateOutput("iK");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(238, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(133, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-115), problem8_0.a1758726220);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iG");
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-31), problem8_0.a1758726220);
      assertEquals(178, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(142, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-31), problem8_0.a1758726220);
      assertEquals(178, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(142, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 9;
      problem8_0.calculateOutput("iE");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iE");
      assertEquals((-69), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iE");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iE");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // SystemInUtil.addInputLine("iJ");
      // SystemInUtil.addInputLine("iL");
      String[] stringArray0 = new String[0];
      //  Problem8.main(stringArray0);
      //  Problem8.main(stringArray0);
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(238, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(133, problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-115), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iN");
      assertEquals((-25241), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(176, problem8_0.a30313548);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-25106), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-8601), problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(163, problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18811), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iN");
      assertEquals((-25241), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(176, problem8_0.a30313548);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-25106), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-8601), problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(163, problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18811), problem8_0.a1758726220);
      
      //  Problem8.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iG");
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.a30313548 = 125;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iF");
      problem8_0.calculateOutput("iF");
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(296, problem8_0.a46031761);
      assertEquals(91, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(125, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(225, problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-34), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      String[] stringArray0 = new String[0];
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iK");
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iH");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(61, problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(135, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-101), problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-104), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iC");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(205, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(0, problem8_0.a1758726220);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(294, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iC");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(205, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(0, problem8_0.a1758726220);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(294, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      problem8_0.a1438701658 = 1;
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iJ");
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-115), problem8_0.a1758726220);
      assertEquals(133, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(238, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iM");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(295, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(228, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(99, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iM");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(295, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(228, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(99, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-11566), problem8_0.a131814132);
      assertEquals((-12672), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-10007), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-4612), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(18, problem8_0.a625728290);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(193, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-11566), problem8_0.a131814132);
      assertEquals((-12672), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-10007), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-4612), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(18, problem8_0.a625728290);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(193, problem8_0.a30313548);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f";
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals((-25633), problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(18345, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-26764), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-14740), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-10454), problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iA");
      assertEquals(176, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-146), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      
      // SystemInUtil.addInputLine("I:y&M)");
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iA");
      assertEquals(176, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(7411, problem8_0.a604090397);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("%$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 9;
      problem8_0.calculateOutput("iE");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iE");
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(189, problem8_0.a46031761);
      assertEquals((-69), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1260877377);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iJ");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iK");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a131814132);
      assertEquals((-107), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(208, problem8_0.a46031761);
      assertEquals(345, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("'UW8^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iG");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(287, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(142, problem8_0.a541669751);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-31), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(178, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iG");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(287, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(142, problem8_0.a541669751);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-31), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(178, problem8_0.a131814132);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iF");
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.a1609282740 = 200;
      problem8_0.calculateOutput("iF");
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(200, problem8_0.a1609282740);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iF");
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(200, problem8_0.a1609282740);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iF");
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(200, problem8_0.a1609282740);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iE");
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(200, problem8_0.a1609282740);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      
      problem8_0.calculateOutput("iG");
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      
      problem8_0.a552644704 = "iI";
      problem8_0.a30313548 = (-18548323);
      // SystemInUtil.addInputLine("e");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertTrue(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iO");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iG");
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iB");
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(143, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(114, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-15), problem8_0.a541669751);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(369, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-152), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.a684801399 = (-2935);
      problem8_0.a541669751 = (-2935);
      // SystemInUtil.addInputLine("f");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("G~3|QxtcLa3|Zf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "]k<>VS&{17AF&m";
      problem8_0.calculateOutput("iF");
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.a1536944568 = (-179943638);
      problem8_0.calculateOutput("iF");
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-179943638), problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iO");
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-179943638), problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("]k<>VS&{17AF&m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "]k<{>VSf&{17AF&m";
      problem8_0.calculateOutput("iF");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      
      problem8_0.a1536944568 = (-20);
      problem8_0.calculateOutput("iF");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      
      problem8_0.calculateOutput("iO");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(128, problem8_1.a684801399);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(106, problem8_1.a541669751);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(4, problem8_1.a1176528804);
      assertTrue(problem8_1.cf);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(37, problem8_1.a30313548);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(96, problem8_1.a1609282740);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      problem8_0.a1438701658 = 1;
      problem8_0.calculateOutput("iD");
      assertEquals((-9), problem8_0.a131814132);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(136, problem8_0.a46031761);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-73), problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iD");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(121, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(285, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-72), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(143, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iD");
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(121, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(285, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-72), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(143, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals((-5628), problem8_0.a46031761);
      
      problem8_0.calculateOutput("iN");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-13641), problem8_0.a541669751);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-1516), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(160, problem8_0.a625728290);
      assertEquals((-18772), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-11586), problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-13641), problem8_0.a541669751);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-1516), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(160, problem8_0.a625728290);
      assertEquals((-18772), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-11586), problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-13641), problem8_0.a541669751);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-1516), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(160, problem8_0.a625728290);
      assertEquals((-18772), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-11586), problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iG");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(89, problem8_0.a46031761);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.a30313548 = (-18548323);
      // SystemInUtil.addInputLine("e");
      problem8_0.a1758726220 = (-18548323);
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertTrue(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("|");
      problem8_0.calculateOutput("iK");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iJ");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(133, problem8_0.a131814132);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-115), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(238, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iK");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-83), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(214, problem8_0.a131814132);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(95, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iA");
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(93, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(48, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(71, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iA");
      assertFalse(problem8_0.cf);
      assertEquals(284, problem8_0.a684801399);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-17), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(210, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(127, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iA");
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(71, problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals(93, problem8_0.a46031761);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(48, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(71, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(48, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals(93, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a1625778031);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("?.QvlX^0OeWRFg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = (-842);
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals((-842), problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.a9545038 = "iE";
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals((-69), problem8_0.a541669751);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = (-862);
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-862), problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      
      problem8_0.calculateOutput("iE");
      assertEquals(189, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-69), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a131814132);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(103, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals((-22), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(300, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(170, problem8_0.a131814132);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(103, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals((-22), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(300, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(170, problem8_0.a131814132);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(191, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(125, problem8_0.a541669751);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-3), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(316, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("0~SZd/oYn8?I6;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iG");
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iN");
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iD");
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertTrue(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      
      problem8_0.calculateOutput("iN");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iD");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iN");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iD");
      assertEquals((-9), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(136, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-73), problem8_0.a541669751);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5), problem8_0.a1758726220);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(234, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5), problem8_0.a1758726220);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(234, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iD");
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5), problem8_0.a1758726220);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(234, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("");
      problem8_0.calculateOutput("iK");
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(238, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(133, problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-115), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iJ");
      assertEquals((-28), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(88, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(173, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iK");
      assertEquals((-28), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(88, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(173, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine((String) null);
      problem8_0.calculateOutput("iG");
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iG");
      assertFalse(problem8_0.cf);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a9545038 = "|R";
      problem8_0.a1625778031 = 0;
      problem8_0.a684801399 = 3619;
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("m?$9_KV)~xzWMO");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-337), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(124, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18327), problem8_0.a1758726220);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-21964), problem8_0.a131814132);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-13634), problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("uZiD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertTrue(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iN");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-13641), problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-18772), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-1516), problem8_0.a1758726220);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-11586), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(160, problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-13641), problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-18772), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-1516), problem8_0.a1758726220);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-11586), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(160, problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("uZiD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      String string0 = "iA";
      String[] stringArray0 = new String[2];
      problem8_0.a131814132 = 11;
      stringArray0[0] = "g";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "g";
      problem8_0.calculateOutput("iF");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iE");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = "g";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Or[z@k/p2uyr*+D/NM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertTrue(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iF");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-19923), problem8_0.a1438701658);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a191569517 = 1982;
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("?{hSN)\"&I^lU");
      String string0 = "r ";
      // SystemInUtil.addInputLine("r ");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("r ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "g";
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a315983816);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      
      problem8_0.a103685194 = 78;
      String[] stringArray0 = new String[8];
      stringArray0[1] = "g";
      stringArray0[2] = "iF";
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(78, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a315983816);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(78, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a315983816);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      
      problem8_0.a1358616787 = 949;
      String string0 = "h+?O4R'Mq^6";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("h+?O4R'Mq^6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      problem8_0.a1536944568 = (-179943638);
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-179943638), problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iO");
      assertEquals(6, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-179943638), problem8_0.a1536944568);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("JlIAcwV.<FILNfh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iN");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(274, problem8_1.a46031761);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(10, problem8_1.a1260877377);
      assertTrue(problem8_1.cf);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(219, problem8_1.a768931663);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(12, problem8_1.a1625778031);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iD");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.a684801399 = (-1791);
      problem8_0.calculateOutput("iJ");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-1791), problem8_0.a684801399);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      String string0 = "iJ";
      problem8_0.calculateOutput("iE");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-124), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(15031, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-56), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(72, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(103, problem8_0.a46031761);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("IVvXo*%0\"8r/gdT3u=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iK");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-1393), problem8_0.a1758726220);
      assertEquals(134, problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-10890), problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-19917), problem8_0.a46031761);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-12416), problem8_0.a131814132);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(96, problem8_1.a1609282740);
      assertTrue(problem8_1.cf);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(9, problem8_1.a307193304);
      assertEquals((-20), problem8_1.a625728290);
      assertNotNull(problem8_1);
      
      problem8_1.a541669751 = (-19917);
      problem8_1.a186714128 = "[2zl4g|P=:{_wIC;;";
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      String string0 = "iJ";
      problem8_0.a541669751 = 10585;
      // SystemInUtil.addInputLine("iJ");
      String string1 = "iN";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertNotNull(problem8_0);
      
      String string0 = "iK";
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iK");
      problem8_0.calculateOutput("iC");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("Soz0\"V&d6(7d2");
      problem8_0.calculateOutput("iC");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(24, problem8_0.a541669751);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-135), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(170, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(82, problem8_0.a131814132);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(409, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      
      problem8_0.calculateOutput("iK");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-68), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(121, problem8_0.a541669751);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(204, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(283, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(409, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iK");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iH");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(61, problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(135, problem8_0.a46031761);
      assertEquals((-101), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-104), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iC");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(294, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(205, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(0, problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iH");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(294, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(205, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(0, problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      
      // SystemInUtil.addInputLine("\"~h4&Q%T");
      // SystemInUtil.addInputLine((String) null);
      problem8_0.calculateOutput("iH");
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-101), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(135, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(61, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-104), problem8_0.a1758726220);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iH");
      assertEquals(0, problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(283, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(204, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(94, problem8_0.a541669751);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(106, problem8_1.a541669751);
      assertTrue(problem8_1.cf);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(11, problem8_1.a191569517);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a604090397 = (-1620559844);
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iI");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-11942), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(116, problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-16559), problem8_0.a541669751);
      assertEquals((-21072), problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-5206), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(134, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iI");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-11942), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(116, problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-16559), problem8_0.a541669751);
      assertEquals((-21072), problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-5206), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(134, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iL");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iN");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iH");
      assertEquals(127, problem8_0.a625728290);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-29372), problem8_0.a541669751);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(176, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-23624), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-3982), problem8_0.a46031761);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-7309), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(106, problem8_1.a541669751);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals((-18), problem8_1.a1758726220);
      assertTrue(problem8_1.cf);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iE");
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-21607), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-5628), problem8_0.a46031761);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(191, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(125, problem8_0.a541669751);
      assertEquals(316, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-3), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(74, problem8_0.a625728290);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-13875), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-3268), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-15933), problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals((-17325), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(163, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iE");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(74, problem8_0.a625728290);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-13875), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-3268), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-15933), problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals((-17325), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(163, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("wNoSB- lM]vNFr&.x");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iO");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("wNoSB- lM]vNFr&.x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("i");
      // SystemInUtil.addInputLine("e");
      String string0 = "iK";
      problem8_0.calculateOutput("iJ");
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iO");
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iK");
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iK");
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iI");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iI");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      
      problem8_0.calculateOutput("iN");
      assertEquals(211, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iD");
      assertEquals(211, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iN");
      assertEquals(211, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iK");
      assertEquals(211, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(281, problem8_0.a1438701658);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iK");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-22467), problem8_0.a1758726220);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-335), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-22183), problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(137, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-13800), problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iK");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-22467), problem8_0.a1758726220);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-335), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-22183), problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(137, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-13800), problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(5, problem8_1.a1319101);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(106, problem8_1.a541669751);
      assertTrue(problem8_1.cf);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(239, problem8_1.a131814132);
      assertNotNull(problem8_1);
      
      problem8_1.calculateOutput("iJ");
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(5, problem8_1.a2131549637);
      assertEquals(5, problem8_1.a1319101);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a1260877377);
      assertFalse(problem8_1.cf);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(239, problem8_1.a131814132);
      assertNotSame(problem8_1, problem8_0);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iK");
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iD");
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.a1260877377 = (-2818);
      problem8_0.calculateOutput("iO");
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      problem8_0.a103685194 = 364;
      problem8_0.calculateOutput("iN");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(364, problem8_0.a103685194);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iK");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(364, problem8_0.a103685194);
      assertEquals((-44), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(270, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(108, problem8_0.a541669751);
      
      problem8_0.calculateOutput("iK");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(364, problem8_0.a103685194);
      assertEquals((-2694), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(107, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-13900), problem8_0.a541669751);
      assertEquals(28, problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-1645), problem8_0.a1758726220);
      assertEquals((-27934), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      //  Problem8.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iA");
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(27, problem8_0.a131814132);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f";
      problem8_0.calculateOutput("iN");
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(19248, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(27, problem8_0.a131814132);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("ZHu+IidT@F=]HP:\"C");
      problem8_0.calculateOutput("iK");
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iH");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(464, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(61, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(135, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-101), problem8_0.a541669751);
      assertEquals(11, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-104), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-21607), problem8_0.a541669751);
      
      problem8_0.calculateOutput("iD");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.a1671467081 = (-2818);
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iD");
      problem8_0.calculateOutput("iK");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      
      problem8_0.a552644704 = "?}Qbli1YzfM?^zv]9";
      problem8_0.a30313548 = (-18548323);
      // SystemInUtil.addInputLine("e");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertNotNull(problem8_0);
      
      problem8_0.a43586272 = 1308;
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(1308, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(1308, problem8_0.a43586272);
      assertEquals((-56), problem8_0.a541669751);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(15031, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-124), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(103, problem8_0.a46031761);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(72, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(245, problem8_0.a131814132);
      assertEquals(1308, problem8_0.a43586272);
      assertEquals(99, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(15031, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(277, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-84), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a116052342);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("IVvXo*%0\"8r/gdT3u=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a604090397 = (-1620559844);
      problem8_0.calculateOutput("iN");
      assertFalse(problem8_0.cf);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iN");
      assertEquals(303, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals((-52), problem8_0.a131814132);
      assertEquals((-143), problem8_0.a1758726220);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(228, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(170, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("7]+KH;WT-Rbj5m/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iO");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-17331), problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(227, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(193, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(227, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(193, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(227, problem8_0.a46031761);
      
      String[] stringArray0 = new String[2];
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // SystemInUtil.addInputLine("iB");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iB";
      stringArray0[1] = "iB";
      stringArray0[2] = "iB";
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iD");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(12, problem8_0.a116052342);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(120, problem8_0.a541669751);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.a684801399 = (-1791);
      String string0 = "oX";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      problem8_0.a927293118 = 204;
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(204, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iN");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(204, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      // SystemInUtil.addInputLine("oU");
      problem8_0.a541669751 = 2783;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("i");
      String string0 = "iJ";
      // SystemInUtil.addInputLine("e");
      String string1 = "iK";
      problem8_0.calculateOutput("iJ");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iO");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iK");
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      
      problem8_0.calculateOutput("iK");
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iO";
      stringArray0[1] = "iO";
      stringArray0[2] = "iM";
      stringArray0[3] = "g";
      stringArray0[4] = "e";
      String string2 = "i";
      problem8_0.a265817897 = "i";
      stringArray0[5] = "iO";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iG");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1671467081);
      
      problem8_0.a30313548 = 125;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iF");
      problem8_0.calculateOutput("iF");
      assertEquals(296, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(125, problem8_0.a30313548);
      assertEquals(91, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-34), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(225, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iN");
      assertEquals((-10667), problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-4721), problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(181, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-12377), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(57, problem8_0.a625728290);
      assertEquals((-6782), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a191569517);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = (-842);
      problem8_0.calculateOutput("iE");
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-842), problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iE");
      assertEquals(5, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-69), problem8_0.a541669751);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iE");
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iE");
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iD");
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iD");
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(297, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iD");
      assertEquals(136, problem8_0.a46031761);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-73), problem8_0.a541669751);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-9), problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(234, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(234, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iD");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(14, problem8_0.a2105667438);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(234, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.a1928869419 = "iD";
      problem8_0.a1671467081 = 3;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      problem8_0.a131814132 = 2002;
      String string0 = "]k<{>VSf&{17AF&m";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      problem8_0.a2131549637 = 10;
      // SystemInUtil.addInputLine("e");
      problem8_0.a307193304 = (-1500);
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals(4, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(4, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iO");
      assertEquals(4, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(180, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-106), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(32, problem8_0.a541669751);
      assertEquals((-5), problem8_0.a131814132);
      assertEquals(9, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("J# HI)&=(wCq6D1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a1585582837 = ";AnZ_; wg<dH";
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iK");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      // SystemInUtil.addInputLine("");
      problem8_0.calculateOutput("iD");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iI");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iK");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      String string0 = "iA";
      problem8_0.calculateOutput("iN");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals((-21607), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iC");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(97, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(196, problem8_0.a131814132);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals((-35), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(291, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iN");
      assertEquals((-12402), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-25170), problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-4022), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(94, problem8_0.a625728290);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18738), problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iN");
      assertEquals((-12402), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-25170), problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-4022), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(94, problem8_0.a625728290);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18738), problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      
      String string1 = "*Rq{Zpe\")";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("*Rq{Zpe\")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // SystemInUtil.addInputLine("Cm{y_4+%q5v]G_t8sq");
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iK");
      problem8_0.calculateOutput("iC");
      assertFalse(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iJ");
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(238, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(133, problem8_0.a131814132);
      assertEquals((-115), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a1625778031);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("Soz0\"V&d6(7d2");
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(111, problem8_0.a541669751);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(292, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(224, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(274, problem8_1.a46031761);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(7, problem8_1.a1358616787);
      assertTrue(problem8_1.cf);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iK");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-13800), problem8_0.a46031761);
      assertEquals(6, problem8_0.a625728290);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-22467), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-335), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-22183), problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(137, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iM");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-13800), problem8_0.a46031761);
      assertEquals(6, problem8_0.a625728290);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-22467), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-335), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-22183), problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(137, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iD");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-74), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(167, problem8_0.a131814132);
      assertEquals(6, problem8_0.a625728290);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(86, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(263, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(137, problem8_0.a30313548);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      String string0 = "iA";
      // SystemInUtil.addInputLine("mM5Z7tS9X]");
      // SystemInUtil.addInputLine("iI");
      problem8_0.calculateOutput("iI");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-28344), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals((-25209), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-13635), problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-14863), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("mM5Z7tS9X]");
      // SystemInUtil.addInputLine("iI");
      problem8_0.calculateOutput("iI");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-25209), problem8_0.a541669751);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-14863), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-28344), problem8_0.a46031761);
      assertEquals((-13635), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iK");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-125), problem8_0.a1758726220);
      assertEquals(44, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(186, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(56, problem8_0.a541669751);
      assertEquals(409, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-9133), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-27472), problem8_0.a541669751);
      assertEquals((-12040), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-21982), problem8_0.a46031761);
      assertEquals(409, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(13431, problem8_0.a30313548);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("iJ");
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iI");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-14863), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-13635), problem8_0.a131814132);
      assertEquals((-28344), problem8_0.a46031761);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals((-25209), problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iI");
      assertEquals((-47), problem8_0.a541669751);
      assertEquals(436, problem8_0.a1675975143);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(163, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-148), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(436, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-31), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(143, problem8_0.a131814132);
      assertEquals(310, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(125, problem8_0.a541669751);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iI");
      assertEquals(436, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-31), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(143, problem8_0.a131814132);
      assertEquals(310, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(125, problem8_0.a541669751);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a604090397 = (-1620559844);
      problem8_0.calculateOutput("iN");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iK");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-44), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(108, problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(270, problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(11, problem8_1.a43586272);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(239, problem8_1.a131814132);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertTrue(problem8_1.cf);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(11, problem8_1.a2105667438);
      assertNotNull(problem8_1);
      
      problem8_1.calculateOutput("iO");
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(11, problem8_1.a43586272);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(239, problem8_1.a131814132);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(128, problem8_1.a684801399);
      assertFalse(problem8_1.cf);
      assertEquals(11, problem8_1.a2105667438);
      assertNotSame(problem8_1, problem8_0);
      
      problem8_1.calculateOutput("iJ");
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(11, problem8_1.a43586272);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(239, problem8_1.a131814132);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(128, problem8_1.a684801399);
      assertFalse(problem8_1.cf);
      assertEquals(11, problem8_1.a2105667438);
      assertNotSame(problem8_1, problem8_0);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(106, problem8_0.a541669751);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      
      problem8_0.a1585582837 = null;
      problem8_0.calculateOutput("iF");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Wh@42Bk21+oGg[6?[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("w6E[JL<;5tVVjRm(F");
      // SystemInUtil.addInputLine("K^}(.");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(228, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(16524, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-63), problem8_0.a131814132);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(11, problem8_1.a2105667438);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(219, problem8_1.a768931663);
      assertTrue(problem8_1.cf);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(106, problem8_1.a541669751);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("5Bo4`-?*(}Y.&*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a1534041262 = "h";
      problem8_0.calculateOutput("iJ");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(238, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(133, problem8_0.a131814132);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-115), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.a46031761 = 316;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iO");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(32, problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-5), problem8_0.a131814132);
      assertEquals((-106), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(180, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iE");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(32, problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-5), problem8_0.a131814132);
      assertEquals((-106), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(180, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("J# HI)&=(wCq6D1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      String string0 = "8/f{t(Wy~d";
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      
      String[] stringArray0 = new String[4];
      problem8_0.a1395211234 = "h";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "iG";
      // SystemInUtil.addInputLine("iG");
      problem8_0.calculateOutput("iF");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iG");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(202, problem8_0.a46031761);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-137), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-9214), problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-7), problem8_0.a131814132);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-32), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("mHwb/\"%U{Y1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      String string0 = "iE";
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iJ");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      // SystemInUtil.addInputLine("e&7&Tc");
      problem8_0.calculateOutput("iA");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iJ");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      // SystemInUtil.addInputLine("f");
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(11, problem8_1.a2105667438);
      assertTrue(problem8_1.cf);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals((-20), problem8_1.a625728290);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("e&7&Tc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      problem8_0.a2105667438 = (-842);
      problem8_0.a604090397 = (-842);
      problem8_0.calculateOutput("iE");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-842), problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-842), problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iF");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-842), problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a2131549637);
      assertEquals((-842), problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(5, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iK");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-842), problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a2131549637);
      assertEquals((-842), problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(5, problem8_0.a116052342);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g";
      stringArray0[1] = "f";
      stringArray0[2] = "i";
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.a30313548 = 9;
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iN");
      assertEquals(105, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(308, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-91), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a30313548);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(190, problem8_0.a131814132);
      
      String string0 = "k5<wMZ^Ip3M";
      // SystemInUtil.addInputLine("k5<wMZ^Ip3M");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("oW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iE");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      
      // SystemInUtil.addInputLine("h");
      String string0 = "iF";
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iF");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a2131549637);
      
      problem8_0.calculateOutput("iF");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a2131549637);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      String string0 = "iJ";
      problem8_0.a307193304 = 8;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iA");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iK");
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4956, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iK");
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(15063, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-2628), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-7318), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4956, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-1217), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals((-17037), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a1600100453);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(120, problem8_1.a604090397);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a1600100453);
      assertTrue(problem8_1.cf);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(11, problem8_1.a2105667438);
      assertNotNull(problem8_1);
      
      problem8_1.a315983816 = 0;
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.equals((Object)problem8_1));
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(15063, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(81, problem8_0.a541669751);
      assertEquals((-77), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(295, problem8_0.a46031761);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4956, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(267, problem8_0.a684801399);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a1600100453);
      assertNotSame(problem8_0, problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "g";
      problem8_0.calculateOutput("iF");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iE");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = "g";
      stringArray0[2] = "iF";
      problem8_0.calculateOutput("iF");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(6, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iF");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(6, problem8_0.a315983816);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iC");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(155, problem8_0.a30313548);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-9207), problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-19855), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-8362), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(19, problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-17276), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("]B)T}B5SJZl,^Hfy&Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iE");
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(15031, problem8_0.a103685194);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-124), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-56), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(103, problem8_0.a46031761);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(72, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      
      // SystemInUtil.addInputLine("[Tgc");
      problem8_0.calculateOutput("iO");
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(280, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(15031, problem8_0.a103685194);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(89, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(217, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-34), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      
      // SystemInUtil.addInputLine("e");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("]7&xcg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iA");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iA");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iO");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(318, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(290, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(90, problem8_0.a541669751);
      assertEquals((-64), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(265, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      problem8_0.a1176528804 = (-886);
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-886), problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "h";
      problem8_0.calculateOutput("iA");
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(48, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(93, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals((-886), problem8_0.a1176528804);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(71, problem8_0.a541669751);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iO");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(90, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-63), problem8_0.a1758726220);
      assertEquals((-886), problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(277, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(222, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(302, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("8/f{t(Wy~d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = (-842);
      problem8_0.calculateOutput("iE");
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-842), problem8_0.a604090397);
      
      problem8_0.calculateOutput("iE");
      assertEquals(5, problem8_0.a131814132);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(67, problem8_0.a604090397);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-69), problem8_0.a541669751);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1671467081);
      
      String string0 = "h";
      // SystemInUtil.addInputLine("h");
      problem8_0.a46031761 = (-842);
      String string1 = "f";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("i");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iG");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(125, problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.a30313548 = 9;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iF");
      problem8_0.calculateOutput("iI");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(273, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(140, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(122, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a30313548);
      assertEquals((-89), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iG");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(273, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(140, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(122, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a30313548);
      assertEquals((-89), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iF");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(273, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(140, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(122, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a30313548);
      assertEquals((-89), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("aS(@8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a1609282740 = 200;
      problem8_0.calculateOutput("iF");
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(200, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iF");
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(200, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iE");
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(200, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iG");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iD");
      assertEquals(265, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(116, problem8_0.a541669751);
      assertEquals((-35), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(265, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(116, problem8_0.a541669751);
      assertEquals((-35), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iG");
      assertEquals(265, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(116, problem8_0.a541669751);
      assertEquals((-35), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-21607), problem8_0.a541669751);
      
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iD");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a1625778031);
      assertFalse(problem8_0.cf);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iA");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(6, problem8_0.a1319101);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(42, problem8_0.a541669751);
      assertEquals(179, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-21), problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals((-140), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-9523), problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-8164), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iC");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-35), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(291, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(97, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(196, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iN";
      problem8_0.calculateOutput("iO");
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(168, problem8_0.a46031761);
      assertEquals((-70), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-103), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-148), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(167, problem8_0.a604090397);
      
      // SystemInUtil.addInputLine("iC");
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("h");
      problem8_0.calculateOutput("iO");
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(168, problem8_0.a46031761);
      assertEquals((-70), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-103), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-148), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(167, problem8_0.a604090397);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "iG";
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iK");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iK");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-107), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(208, problem8_0.a46031761);
      assertEquals(345, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iE");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-84), problem8_0.a1758726220);
      assertEquals(125, problem8_0.a541669751);
      assertEquals(267, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(268, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(345, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iL");
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iN");
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iH");
      assertFalse(problem8_0.cf);
      assertEquals(127, problem8_0.a625728290);
      assertEquals((-29372), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(176, problem8_0.a30313548);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-3982), problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-23624), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-7309), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      // SystemInUtil.addInputLine("Y}!");
      problem8_0.calculateOutput("iB");
      assertFalse(problem8_0.cf);
      assertEquals(127, problem8_0.a625728290);
      assertEquals((-29372), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(176, problem8_0.a30313548);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-3982), problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-23624), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-7309), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iL");
      assertFalse(problem8_0.cf);
      assertEquals(127, problem8_0.a625728290);
      assertEquals((-29372), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(176, problem8_0.a30313548);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-3982), problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-23624), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-7309), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      String string0 = "zA1M+9\\'";
      // SystemInUtil.addInputLine("zA1M+9'");
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iN");
      assertEquals((-21607), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iK");
      assertFalse(problem8_0.cf);
      assertEquals(270, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(108, problem8_0.a541669751);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-44), problem8_0.a1758726220);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(192, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(192, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-6), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iK");
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(192, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(192, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-6), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("{8 [*,q1G1O5z8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "iG";
      // SystemInUtil.addInputLine("iG");
      problem8_0.calculateOutput("iF");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iG");
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-9214), problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-32), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(202, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-7), problem8_0.a131814132);
      assertEquals((-137), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iF");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-9214), problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(277, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(113, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(220, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-48), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iG");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-9214), problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(277, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(113, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(220, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-48), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      String string0 = "\"~h4&Q%T";
      // SystemInUtil.addInputLine("pK");
      // SystemInUtil.addInputLine("@");
      problem8_0.calculateOutput("iK");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iI");
      assertEquals(480, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-22), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(119, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-145), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-53), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(243, problem8_1.a103685194);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(106, problem8_1.a541669751);
      assertTrue(problem8_1.cf);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(9, problem8_1.a307193304);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(274, problem8_1.a46031761);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(219, problem8_1.a768931663);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      problem8_0.a103685194 = 364;
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iK");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(270, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(108, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-44), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iH");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-27760), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-17825), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-23650), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(179, problem8_0.a30313548);
      assertEquals(65, problem8_0.a625728290);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-5371), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iH");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-27760), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-17825), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-23650), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(179, problem8_0.a30313548);
      assertEquals(65, problem8_0.a625728290);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-5371), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iE");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(72, problem8_0.a131814132);
      assertEquals(15031, problem8_0.a103685194);
      assertEquals((-124), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-56), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(103, problem8_0.a46031761);
      assertEquals(5, problem8_0.a116052342);
      
      // SystemInUtil.addInputLine("oY'3n$0n");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iC");
      assertEquals(15031, problem8_0.a103685194);
      assertEquals(305, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(118, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-88), problem8_0.a1758726220);
      assertEquals(172, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a116052342);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(7, problem8_1.a1358616787);
      assertTrue(problem8_1.cf);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(239, problem8_1.a131814132);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1600100453);
      assertNotNull(problem8_1);
      
      problem8_1.calculateOutput("iG");
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(239, problem8_1.a131814132);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(9, problem8_1.a307193304);
      assertFalse(problem8_1.cf);
      assertEquals(5, problem8_1.a2131549637);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1600100453);
      assertNotSame(problem8_1, problem8_0);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("VfN]M{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("lZ");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iO");
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-17331), problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iO");
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1319101);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-17331), problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1319101);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(193, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      
      // SystemInUtil.addInputLine(">]6kY\"$e");
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(243, problem8_1.a103685194);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(5, problem8_1.a1319101);
      assertTrue(problem8_1.cf);
      assertEquals(10, problem8_1.a1260877377);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      String string0 = "]k<{>VSf&{17AF&m";
      problem8_0.a9545038 = "]k<{>VSf&{17AF&m";
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("]k<{>VSf&{17AF&m");
      problem8_0.a1609282740 = 11;
      problem8_0.calculateOutput("iF");
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iM");
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a1609282740);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput(")626%DfMR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = (-862);
      problem8_0.calculateOutput("iE");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-862), problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iE");
      assertEquals((-69), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      
      String string0 = "${?te";
      problem8_0.calculateOutput("iG");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-35), problem8_0.a1758726220);
      assertEquals(111, problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(172, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(284, problem8_0.a46031761);
      assertEquals(67, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(7478, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("${?te");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iO");
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iA");
      assertEquals(322, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "eph";
      problem8_0.a774214216 = "iG";
      // SystemInUtil.addInputLine("iG");
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iG");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-137), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-7), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(202, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-9214), problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-32), problem8_0.a541669751);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.a541669751 = 0;
      problem8_0.a1358616787 = (-1297);
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("mHwb/\"%U{Y1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = (-862);
      problem8_0.calculateOutput("iE");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-862), problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      // SystemInUtil.addInputLine("${?te");
      String string0 = "iG";
      problem8_0.calculateOutput("iG");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(81, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(87, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(17630, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(14, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-105), problem8_0.a1758726220);
      assertEquals((-36), problem8_0.a541669751);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("${?te");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("i");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iG");
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.a30313548 = 9;
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iF");
      problem8_0.calculateOutput("iI");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a30313548);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(122, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(273, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-89), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(140, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a30313548);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(122, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(273, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-89), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(140, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(10, problem8_1.a315983816);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-18), problem8_1.a1758726220);
      assertTrue(problem8_1.cf);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(439, problem8_1.a1675975143);
      assertNotNull(problem8_1);
      
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.equals((Object)problem8_1));
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a30313548);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(122, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(273, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-89), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(140, problem8_0.a131814132);
      assertNotSame(problem8_0, problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a315983816 = 1917;
      problem8_0.calculateOutput("iN");
      assertEquals((-21607), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(1917, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iN");
      assertEquals(303, problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iN");
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-1516), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-13641), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-11586), problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-18772), problem8_0.a46031761);
      assertEquals(160, problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iJ");
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-1516), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-13641), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-11586), problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-18772), problem8_0.a46031761);
      assertEquals(160, problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iO");
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(40, problem8_0.a541669751);
      assertEquals(33, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(169, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-127), problem8_0.a1758726220);
      assertEquals(189, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(191, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(160, problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      problem8_0.a1438701658 = 1;
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iJ");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iJ");
      assertEquals((-115), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(67, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(133, problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(238, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iM");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(99, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(295, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(228, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iM");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(99, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(295, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(228, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-10007), problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-11566), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-12672), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(193, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-4612), problem8_0.a1758726220);
      assertEquals(18, problem8_0.a625728290);
      
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-10007), problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-11566), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-12672), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(193, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-4612), problem8_0.a1758726220);
      assertEquals(18, problem8_0.a625728290);
      
      problem8_0.calculateOutput("iM");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-10007), problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-11566), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-12672), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(193, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-4612), problem8_0.a1758726220);
      assertEquals(18, problem8_0.a625728290);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(447, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(1, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-10007), problem8_0.a46031761);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals((-11566), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-12672), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(193, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-4612), problem8_0.a1758726220);
      assertEquals(18, problem8_0.a625728290);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals((-18), problem8_1.a1758726220);
      assertTrue(problem8_1.cf);
      assertNotNull(problem8_1);
      
      problem8_1.a1758726220 = (-12672);
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.a1585582837 = null;
      String string0 = "iH";
      problem8_0.calculateOutput("iH");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      String string0 = "iG";
      problem8_0.a774214216 = "iG";
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iK");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      
      problem8_0.a30313548 = (-18548323);
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iK");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-18548323), problem8_0.a30313548);
      assertEquals(9, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(208, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-107), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(345, problem8_0.a1675975143);
      
      problem8_0.a1675975143 = (-18548323);
      problem8_0.calculateOutput("iK");
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-18548323), problem8_0.a30313548);
      assertEquals(9, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(208, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-107), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18548323), problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      
      String string0 = "iC";
      problem8_0.calculateOutput("iN");
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(211, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(303, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iM");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-22769), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-7397), problem8_0.a46031761);
      assertEquals((-14784), problem8_0.a131814132);
      assertEquals((-8038), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(25, problem8_0.a625728290);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(166, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iM");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-22769), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-7397), problem8_0.a46031761);
      assertEquals((-14784), problem8_0.a131814132);
      assertEquals((-8038), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(25, problem8_0.a625728290);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(166, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      problem8_0.a103685194 = 364;
      problem8_0.calculateOutput("iN");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(364, problem8_0.a103685194);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iK");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(364, problem8_0.a103685194);
      assertEquals((-44), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(270, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(108, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iO");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(192, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-6), problem8_0.a131814132);
      assertEquals(192, problem8_0.a46031761);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(364, problem8_0.a103685194);
      assertFalse(problem8_0.cf);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      // SystemInUtil.addInputLine("Mw,VFqR~");
      problem8_0.a1609282740 = 364;
      // SystemInUtil.addInputLine("iN");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f";
      stringArray0[1] = "g";
      stringArray0[2] = "h";
      stringArray0[3] = "M";
      stringArray0[4] = "h";
      stringArray0[5] = "f";
      // SystemInUtil.addInputLine("iO");
      stringArray0[7] = "f";
      problem8_0.calculateOutput("iD");
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(192, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(364, problem8_0.a103685194);
      assertFalse(problem8_0.cf);
      assertEquals((-42), problem8_0.a1758726220);
      assertEquals(139, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(364, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(183, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(278, problem8_0.a46031761);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iI");
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(135, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iA");
      assertEquals(192, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(135, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(305, problem8_0.a46031761);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(95, problem8_0.a541669751);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iG");
      assertEquals(10, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.a30313548 = 9;
      problem8_0.calculateOutput("iA");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-23343), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-10500), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iA");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-23343), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-10500), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iA");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-23343), problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-10500), problem8_0.a1758726220);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iG");
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.a30313548 = 9;
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iI");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-59), problem8_0.a1758726220);
      assertEquals(80, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-59), problem8_0.a1758726220);
      assertEquals(80, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("eph");
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-5628), problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iF");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-5628), problem8_0.a46031761);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("!ZLC#-/l7ef/QWO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      problem8_0.a103685194 = (-21607);
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-21607), problem8_0.a103685194);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(6, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iI");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(135, problem8_0.a103685194);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(6, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iA");
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(305, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(135, problem8_0.a103685194);
      assertEquals(95, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(192, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iI");
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(305, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(135, problem8_0.a103685194);
      assertEquals(95, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(192, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iA");
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(305, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(135, problem8_0.a103685194);
      assertEquals(95, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(192, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iA");
      assertEquals((-51), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(305, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(135, problem8_0.a103685194);
      assertEquals(95, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(192, problem8_0.a131814132);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("m}#Pk0pE");
      problem8_0.calculateOutput("iK");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      
      problem8_0.calculateOutput("iF");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      
      // SystemInUtil.addInputLine("]B)T}B5SJZl,^Hfy&Y");
      // SystemInUtil.addInputLine("");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("<'*F0RcND");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      String string0 = "iN";
      problem8_0.calculateOutput("iN");
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(8, problem8_0.a1536944568);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.a30313548 = 10;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("D9Sf:dT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.a30313548 = (-1075307805);
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iM");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(190, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a541669751);
      assertEquals((-1075307805), problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-38), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(269, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iN");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(190, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(120, problem8_0.a541669751);
      assertEquals((-1075307805), problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-38), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(269, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertTrue(problem8_1.cf);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(239, problem8_1.a131814132);
      assertNotNull(problem8_1);
      
      problem8_1.a684801399 = 243;
      problem8_1.calculateOutput("iM");
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(5, problem8_1.a2131549637);
      assertFalse(problem8_1.cf);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(243, problem8_1.a684801399);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(239, problem8_1.a131814132);
      assertNotSame(problem8_1, problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a931173523 = "/";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.a30313548 = (-1075307805);
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(107, problem8_0.a541669751);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-91), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(299, problem8_0.a46031761);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals((-1075307805), problem8_0.a30313548);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(151, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iM");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(107, problem8_0.a541669751);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-91), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(299, problem8_0.a46031761);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals((-1075307805), problem8_0.a30313548);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(151, problem8_0.a131814132);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "iN";
      // SystemInUtil.addInputLine("iM");
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Iua;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      String string0 = "iK";
      // SystemInUtil.addInputLine("iK");
      problem8_0.a103685194 = 364;
      problem8_0.calculateOutput("iN");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iK");
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(223, problem8_0.a131814132);
      assertEquals(108, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(270, problem8_0.a46031761);
      assertEquals((-44), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iO");
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(192, problem8_0.a604090397);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(192, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-6), problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iN");
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(364, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(192, problem8_0.a604090397);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(192, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-6), problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(128, problem8_1.a684801399);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(6, problem8_1.a1671467081);
      assertTrue(problem8_1.cf);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(9, problem8_1.a307193304);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      problem8_0.a1758726220 = (-1);
      // SystemInUtil.addInputLine("Problem8");
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iO");
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-1), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iA");
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(48, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-17272), problem8_0.a1609282740);
      assertEquals((-129), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(146, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(71, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iO");
      assertEquals(302, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(244, problem8_0.a684801399);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(99, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-17272), problem8_0.a1609282740);
      assertEquals((-63), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(222, problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iD");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(4, problem8_1.a1176528804);
      assertTrue(problem8_1.cf);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(281, problem8_1.a1438701658);
      assertNotNull(problem8_1);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iF");
      assertFalse(problem8_0.equals((Object)problem8_1));
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-61), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(12, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(150, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(304, problem8_0.a46031761);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertNotSame(problem8_0, problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-8164), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-27219), problem8_0.a131814132);
      
      problem8_0.calculateOutput("iN");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iM");
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-22769), problem8_0.a541669751);
      assertEquals((-14784), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-7397), problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(25, problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(166, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-8038), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      
      problem8_0.calculateOutput("iC");
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-22769), problem8_0.a541669751);
      assertEquals((-14784), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(3, problem8_0.a315983816);
      assertEquals((-7397), problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(25, problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(166, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-8038), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(274, problem8_1.a46031761);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(10, problem8_1.a1260877377);
      assertTrue(problem8_1.cf);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(128, problem8_1.a684801399);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(11, problem8_1.a191569517);
      assertNotNull(problem8_1);
      
      Problem8 problem8_2 = new Problem8();
      assertFalse(problem8_2.equals((Object)problem8_1));
      assertFalse(problem8_2.equals((Object)problem8_0));
      assertEquals((-20), problem8_2.a625728290);
      assertEquals(239, problem8_2.a131814132);
      assertEquals(9, problem8_2.a307193304);
      assertEquals(274, problem8_2.a46031761);
      assertEquals(10, problem8_2.a1260877377);
      assertEquals(10, problem8_2.a315983816);
      assertEquals(281, problem8_2.a1438701658);
      assertEquals(6, problem8_2.a1671467081);
      assertEquals(11, problem8_2.a43586272);
      assertEquals(219, problem8_2.a768931663);
      assertEquals(10, problem8_2.a116052342);
      assertEquals(10, problem8_2.a1600100453);
      assertEquals(243, problem8_2.a103685194);
      assertEquals(12, problem8_2.a1625778031);
      assertEquals(120, problem8_2.a604090397);
      assertEquals(439, problem8_2.a1675975143);
      assertEquals(9, problem8_2.a927293118);
      assertEquals(11, problem8_2.a2105667438);
      assertEquals(128, problem8_2.a684801399);
      assertEquals(10, problem8_2.a2131549637);
      assertEquals(11, problem8_2.a191569517);
      assertEquals(96, problem8_2.a1609282740);
      assertEquals(106, problem8_2.a541669751);
      assertEquals(5, problem8_2.a1319101);
      assertTrue(problem8_2.cf);
      assertEquals(4, problem8_2.a1176528804);
      assertEquals(7, problem8_2.a1358616787);
      assertEquals((-18), problem8_2.a1758726220);
      assertEquals(37, problem8_2.a30313548);
      assertEquals(8, problem8_2.a1536944568);
      assertNotNull(problem8_2);
      
      // Undeclared exception!
      try { 
        problem8_2.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 10;
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iA");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      String string0 = "iI";
      problem8_0.calculateOutput("iI");
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(135, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(99, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      String string0 = "iN";
      problem8_0.calculateOutput("iN");
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      
      problem8_0.calculateOutput("iG");
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(292, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(250, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-90), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iG");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-28574), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(94, problem8_0.a625728290);
      assertEquals(121, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-996), problem8_0.a541669751);
      assertEquals((-18622), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-25571), problem8_0.a131814132);
      
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-28574), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(94, problem8_0.a625728290);
      assertEquals(121, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-996), problem8_0.a541669751);
      assertEquals((-18622), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-25571), problem8_0.a131814132);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      problem8_0.calculateOutput("iN");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1358616787);
      assertFalse(problem8_0.cf);
      assertEquals(4, problem8_0.a1671467081);
      
      String string0 = "iC";
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iN");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(303, problem8_0.a46031761);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      
      problem8_0.a46031761 = (-898);
      String string1 = "iM";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("w6E[JL<;5tVVjRm(F");
      // SystemInUtil.addInputLine(")626%DfMR");
      problem8_0.calculateOutput("iN");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-63), problem8_0.a131814132);
      assertEquals(228, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(16524, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iM");
      assertEquals(4, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(200, problem8_0.a131814132);
      assertEquals(81, problem8_0.a541669751);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(16524, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-38), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(281, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a307193304);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("w6E[JL<;5tVVjRm(F");
      // SystemInUtil.addInputLine(")626%DfMR");
      problem8_0.calculateOutput("iN");
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-27219), problem8_0.a131814132);
      
      problem8_0.calculateOutput("iA");
      assertFalse(problem8_0.cf);
      assertEquals(16524, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-63), problem8_0.a131814132);
      assertEquals(228, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iH");
      assertFalse(problem8_0.cf);
      assertEquals(16524, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(268, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-17), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(269, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(109, problem8_0.a541669751);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("-V=K ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iK");
      problem8_0.calculateOutput("iK");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertFalse(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      
      problem8_0.calculateOutput("iA");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(71, problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(33, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(16994, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(79, problem8_0.a46031761);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-118), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      
      // SystemInUtil.addInputLine("N3r2.");
      problem8_0.calculateOutput("iK");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(13535, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-2601), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(16994, problem8_0.a604090397);
      assertEquals((-8383), problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-3369), problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-7296), problem8_0.a46031761);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      problem8_0.a604090397 = 676;
      problem8_0.a315983816 = 29128;
      problem8_0.a46031761 = 29128;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      
      problem8_0.calculateOutput("iN");
      assertEquals(303, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iD");
      assertEquals(303, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(7, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iN");
      assertEquals(303, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(7, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iM");
      assertEquals(303, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-62), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(124, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(211, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(7, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.a30313548 = (-1075307805);
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iN");
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(107, problem8_0.a541669751);
      assertEquals(299, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-1075307805), problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-91), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iA");
      assertEquals((-71), problem8_0.a541669751);
      assertEquals(112, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-25), problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-1075307805), problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(197, problem8_0.a46031761);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-118), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      String string0 = "iK";
      problem8_0.calculateOutput("iN");
      assertEquals((-71), problem8_0.a541669751);
      assertEquals(112, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(12, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-25), problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-1075307805), problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(197, problem8_0.a46031761);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-118), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("w6E[JL<;5tVVjRm(F");
      // SystemInUtil.addInputLine(")626%DfMR");
      problem8_0.calculateOutput("iN");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      
      problem8_0.calculateOutput("iA");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(228, problem8_0.a46031761);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals((-63), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(9, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(16524, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iH");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a307193304);
      assertEquals((-17), problem8_0.a1758726220);
      assertEquals(269, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(109, problem8_0.a541669751);
      assertEquals(268, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(16524, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iM");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a307193304);
      assertEquals((-17), problem8_0.a1758726220);
      assertEquals(269, problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(109, problem8_0.a541669751);
      assertEquals(268, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(16524, problem8_0.a604090397);
      
      String[] stringArray0 = new String[0];
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iE");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a116052342);
      
      problem8_0.a1585582837 = null;
      problem8_0.calculateOutput("iH");
      assertEquals((-47), problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-124), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(108, problem8_0.a604090397);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(5, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(25310, problem8_0.a103685194);
      assertEquals(198, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a116052342);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Problem8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iO");
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-17331), problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iE");
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(193, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(193, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "iN";
      problem8_0.calculateOutput("iO");
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(193, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
      
      problem8_0.calculateOutput("iE");
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-129), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(193, problem8_0.a604090397);
      assertEquals(11, problem8_0.a43586272);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("w6E[JL<;5tVVjRm(F");
      // SystemInUtil.addInputLine(")626%DfMR");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iH");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(277, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(93, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-64), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(189, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iM");
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-8010), problem8_0.a1758726220);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(22, problem8_0.a625728290);
      assertEquals(163, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-8878), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-23823), problem8_0.a541669751);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-13798), problem8_0.a131814132);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(9, problem8_1.a307193304);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(274, problem8_1.a46031761);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(10, problem8_1.a1260877377);
      assertTrue(problem8_1.cf);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals((-18), problem8_1.a1758726220);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("=)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(27, problem8_0.a131814132);
      
      // SystemInUtil.addInputLine("I:y&M)");
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals(27, problem8_0.a131814132);
      
      problem8_0.a265817897 = "ut4T%1vI7ujD }g9J+";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("oV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iN");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iN");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iE");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iN");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a2131549637);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-18), problem8_0.a1758726220);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iG");
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.a30313548 = 9;
      problem8_0.calculateOutput("iA");
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      
      problem8_0.calculateOutput("iG");
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertFalse(problem8_0.cf);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "e";
      stringArray0[1] = "i";
      stringArray0[2] = "f";
      stringArray0[3] = "e";
      stringArray0[4] = "e";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertTrue(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iE");
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iK");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a116052342);
      assertEquals(13837, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-15), problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(17, problem8_0.a131814132);
      assertEquals((-119), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(129, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(127, problem8_0.a46031761);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(7, problem8_1.a1358616787);
      assertTrue(problem8_1.cf);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(4, problem8_1.a1176528804);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      String string0 = "iE";
      problem8_0.a307193304 = 4;
      problem8_0.calculateOutput("iE");
      assertEquals(4, problem8_0.a307193304);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iG");
      assertEquals(4, problem8_0.a307193304);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("${?te");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a604090397 = (-1620559844);
      problem8_0.calculateOutput("iN");
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(9, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iK");
      assertEquals(108, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(270, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-44), problem8_0.a1758726220);
      assertEquals(223, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iN");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-11724), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-13666), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-13551), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(180, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(114, problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-26865), problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iF");
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-11724), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-13666), problem8_0.a131814132);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-13551), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(180, problem8_0.a30313548);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(114, problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-26865), problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a191569517);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iF");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      
      problem8_0.calculateOutput("iB");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(11, problem8_0.a191569517);
      
      String string0 = "Ud)p`sywK\\4.O";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Ud)p`sywK\u0004.O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a1675975143 = (-29608);
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(27, problem8_0.a131814132);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals((-29608), problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iA");
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(176, problem8_0.a46031761);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a191569517);
      assertFalse(problem8_0.cf);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(27, problem8_0.a131814132);
      assertEquals((-31), problem8_0.a541669751);
      assertEquals((-29608), problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(2074, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(110, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(7411, problem8_0.a604090397);
      assertEquals(167, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(254, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-36), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-29608), problem8_0.a1675975143);
      assertEquals((-20), problem8_0.a625728290);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertTrue(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iG");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(89, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.a30313548 = 9;
      problem8_0.calculateOutput("iA");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      problem8_0.calculateOutput("iG");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "e";
      stringArray0[1] = "i";
      problem8_0.calculateOutput("iJ");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      // SystemInUtil.addInputLine("e");
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(106, problem8_1.a541669751);
      assertTrue(problem8_1.cf);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(243, problem8_1.a103685194);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "]k<{>VSf&{17AF&m";
      // SystemInUtil.addInputLine("g");
      String string0 = "iO";
      problem8_0.calculateOutput("iO");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      
      problem8_0.calculateOutput("iF");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(12, problem8_0.a43586272);
      assertEquals((-83), problem8_0.a541669751);
      assertEquals(105, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(60, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals((-130), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a191569517);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Rd*!PH:58HZ^L<yj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      assertNotNull(problem8_0);
      
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(5, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      
      problem8_0.calculateOutput("iF");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(137, problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(144, problem8_0.a625728290);
      
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(137, problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(144, problem8_0.a625728290);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("L<VU7NELrL>");
      problem8_0.calculateOutput("iK");
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(137, problem8_0.a30313548);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(144, problem8_0.a625728290);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(219, problem8_1.a768931663);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(9, problem8_1.a927293118);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(11, problem8_1.a2105667438);
      assertTrue(problem8_1.cf);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(10, problem8_1.a2131549637);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("g");
      // SystemInUtil.addInputLine("AT@");
      String string0 = "iK";
      problem8_0.calculateOutput("iK");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(10, problem8_0.a1600100453);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.calculateOutput("iK");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a541669751);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(345, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals((-107), problem8_0.a1758726220);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(208, problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      
      problem8_0.a1395211234 = "Current state has no transition for this input!";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput(":y\u0002_0Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      
      problem8_0.calculateOutput("iA");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(93, problem8_0.a46031761);
      assertEquals(71, problem8_0.a541669751);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertFalse(problem8_0.cf);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(48, problem8_0.a131814132);
      
      problem8_0.calculateOutput("iH");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(100, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(262, problem8_0.a131814132);
      assertEquals(261, problem8_0.a684801399);
      assertEquals((-17287), problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-102), problem8_0.a1758726220);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iO");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-17331), problem8_0.a604090397);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-129), problem8_0.a1758726220);
      
      // SystemInUtil.addInputLine("e");
      String string0 = "iN";
      problem8_0.calculateOutput("iK");
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-21), problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(84, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(227, problem8_0.a46031761);
      assertEquals(208, problem8_0.a604090397);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1319101);
      assertEquals((-129), problem8_0.a1758726220);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("`x-K_Ge9+N0]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "iG";
      // SystemInUtil.addInputLine("iG");
      problem8_0.calculateOutput("iF");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iG");
      assertEquals(202, problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-137), problem8_0.a1758726220);
      assertEquals((-7), problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-32), problem8_0.a541669751);
      assertEquals((-9214), problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("/qU#E${*l");
      problem8_0.calculateOutput("iG");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertFalse(problem8_0.cf);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-40), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-9214), problem8_0.a604090397);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(255, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(130, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(439, problem8_0.a1675975143);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(5, problem8_1.a1319101);
      assertTrue(problem8_1.cf);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(7, problem8_1.a1358616787);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a116052342);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertNotNull(problem8_0);
      
      problem8_0.a1758726220 = (-1);
      // SystemInUtil.addInputLine("Problem8");
      // SystemInUtil.addInputLine("f");
      problem8_0.calculateOutput("iA");
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(236, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-9), problem8_0.a541669751);
      assertEquals((-141), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(2074, problem8_0.a1609282740);
      
      problem8_0.a9545038 = ">";
      problem8_0.calculateOutput("iO");
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(27, problem8_0.a131814132);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(236, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-11681), problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-9), problem8_0.a541669751);
      assertEquals((-141), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      assertTrue(problem8_0.cf);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iG");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals((-18), problem8_0.a1758726220);
      
      problem8_0.calculateOutput("iG");
      assertEquals(89, problem8_0.a46031761);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-13), problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals((-145), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(125, problem8_0.a131814132);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.a30313548 = 9;
      problem8_0.calculateOutput("iA");
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iA");
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iA");
      assertEquals((-15234), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-10500), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-23343), problem8_0.a541669751);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-6909), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(96, problem8_0.a1609282740);
      
      problem8_0.calculateOutput("iI");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(80, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-59), problem8_0.a1758726220);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(80, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-59), problem8_0.a1758726220);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      
      problem8_0.calculateOutput("iI");
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a1600100453);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(80, problem8_0.a541669751);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(287, problem8_0.a46031761);
      assertEquals(151, problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-59), problem8_0.a1758726220);
      assertEquals(17930, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(425, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "iI";
      stringArray0[1] = "iA";
      //  Problem8.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a604090397 = (-1620559844);
      problem8_0.calculateOutput("iO");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iO");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      
      problem8_0.calculateOutput("iN");
      assertEquals(175, problem8_0.a604090397);
      assertEquals(8, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(47, problem8_0.a541669751);
      assertEquals(110, problem8_0.a46031761);
      assertEquals((-146), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("{8 [*,q1G1O5z8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(125, problem8_0.a541669751);
      assertEquals(316, problem8_0.a46031761);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(191, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals((-3), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iE");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-27893), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(41, problem8_0.a625728290);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-17573), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(154, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-25143), problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-2881), problem8_0.a131814132);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-27893), problem8_0.a541669751);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(41, problem8_0.a625728290);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-17573), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(154, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-25143), problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-2881), problem8_0.a131814132);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iN";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput(">!nSdUWOM:{r(Nd1i)/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertTrue(problem8_0.cf);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("w6E[JL<;5tVVjRm(F");
      // SystemInUtil.addInputLine(")626%DfMR");
      problem8_0.calculateOutput("iN");
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iA");
      assertEquals(16524, problem8_0.a604090397);
      assertEquals(9, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(228, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-63), problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-133), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iN");
      assertEquals(16524, problem8_0.a604090397);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(127, problem8_0.a541669751);
      assertEquals((-37), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(187, problem8_0.a131814132);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(263, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.calculateOutput("iA");
      assertEquals(16524, problem8_0.a604090397);
      assertFalse(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(127, problem8_0.a541669751);
      assertEquals((-37), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(187, problem8_0.a131814132);
      assertEquals(4, problem8_0.a307193304);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(263, problem8_0.a46031761);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      
      problem8_0.a604090397 = 0;
      String string0 = "iD";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("=(Y-t!3f[[PE/|_K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "irG";
      // SystemInUtil.addInputLine("irG");
      problem8_0.calculateOutput("iF");
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iB");
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      
      problem8_0.calculateOutput("iB");
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(7, problem8_0.a2131549637);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(6, problem8_0.a1671467081);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertTrue(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iD");
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(3, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(243, problem8_1.a103685194);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(7, problem8_1.a1358616787);
      assertTrue(problem8_1.cf);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(274, problem8_1.a46031761);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(120, problem8_1.a604090397);
      assertEquals(11, problem8_1.a191569517);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(4, problem8_1.a1176528804);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(439, problem8_1.a1675975143);
      assertNotNull(problem8_1);
      
      // Undeclared exception!
      try { 
        problem8_1.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertTrue(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("*mWV5>G}I5v)Ww/Z");
      // SystemInUtil.addInputLine("e");
      // SystemInUtil.addInputLine("8/f{t(Wy~d");
      problem8_0.calculateOutput("iO");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      problem8_0.calculateOutput("iG");
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("aDXt+p*D#rG{o{yp=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(274, problem8_0.a46031761);
      assertTrue(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iM");
      assertEquals(234, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(270, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals((-97), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iN");
      assertEquals((-4050), problem8_0.a1758726220);
      assertEquals((-12946), problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-26176), problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(109, problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-16461), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(160, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      problem8_0.calculateOutput("iM");
      assertEquals((-4050), problem8_0.a1758726220);
      assertEquals((-12946), problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-26176), problem8_0.a46031761);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(109, problem8_0.a625728290);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-16461), problem8_0.a541669751);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(4, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(160, problem8_0.a30313548);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a931173523 = "/";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      problem8_0.a604090397 = (-1620559844);
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-27219), problem8_0.a131814132);
      
      problem8_0.calculateOutput("iI");
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(289, problem8_0.a46031761);
      assertEquals(119, problem8_0.a541669751);
      assertEquals(159, problem8_0.a131814132);
      assertEquals((-1620559844), problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-59), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("qzi' a2#|@!o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(5, problem8_0.a1319101);
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("e");
      problem8_0.a774214216 = "iG";
      problem8_0.a1319101 = (-594);
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      String string0 = "iK";
      problem8_0.calculateOutput("iK");
      assertEquals(219, problem8_0.a768931663);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-594), problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.a30313548 = 9;
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iK");
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a30313548);
      assertEquals((-107), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-594), problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(208, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(345, problem8_0.a1675975143);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      
      problem8_0.a1675975143 = 4;
      problem8_0.calculateOutput("iK");
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a131814132);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(4, problem8_0.a541669751);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a30313548);
      assertEquals((-107), problem8_0.a1758726220);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(4, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals((-594), problem8_0.a1319101);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(208, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("Eu`amM3pP%12(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertTrue(problem8_0.cf);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      assertNotNull(problem8_0);
      
      problem8_0.a1609282740 = 3;
      problem8_0.a9545038 = "g";
      problem8_0.calculateOutput("iF");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(3, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      
      String string0 = "iE";
      problem8_0.calculateOutput("iE");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(3, problem8_0.a1609282740);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.calculateOutput("iE");
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(106, problem8_0.a541669751);
      assertFalse(problem8_0.cf);
      assertEquals(3, problem8_0.a1609282740);
      assertEquals(6, problem8_0.a1260877377);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(6, problem8_0.a315983816);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-19923), problem8_0.a1438701658);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(37, problem8_0.a30313548);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(11, problem8_0.a191569517);
      
      problem8_0.a315983816 = 144;
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "";
      // SystemInUtil.addInputLine("iK");
      // SystemInUtil.addInputLine("iJ");
      String string0 = "iN";
      problem8_0.calculateOutput("iK");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iN");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iJ");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a625728290);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-335), problem8_0.a541669751);
      assertEquals((-22183), problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-22467), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-13800), problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(137, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      problem8_0.calculateOutput("iK");
      assertEquals(219, problem8_0.a768931663);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(6, problem8_0.a625728290);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a43586272);
      assertEquals((-335), problem8_0.a541669751);
      assertEquals((-22183), problem8_0.a131814132);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(5, problem8_0.a2131549637);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-22467), problem8_0.a1758726220);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals((-13800), problem8_0.a46031761);
      assertEquals(9, problem8_0.a307193304);
      assertFalse(problem8_0.cf);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(137, problem8_0.a30313548);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a1600100453);
      
      String string1 = "iH";
      problem8_0.a1395211234 = "iN";
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("iH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(239, problem8_0.a131814132);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("mM5Z7tS9X]");
      problem8_0.a1536944568 = (-155);
      // SystemInUtil.addInputLine("iI");
      problem8_0.calculateOutput("iI");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals((-13635), problem8_0.a131814132);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-25209), problem8_0.a541669751);
      assertEquals((-155), problem8_0.a1536944568);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-28344), problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(9, problem8_0.a191569517);
      assertEquals((-14863), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      
      problem8_0.calculateOutput("iA");
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(21588, problem8_0.a604090397);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(10, problem8_0.a315983816);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a541669751);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals((-155), problem8_0.a1536944568);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18988), problem8_0.a30313548);
      assertEquals(178, problem8_0.a46031761);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(0, problem8_0.a131814132);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals((-118), problem8_0.a1758726220);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(6, problem8_0.a1358616787);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("8`z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(12, problem8_0.a1625778031);
      assertTrue(problem8_0.cf);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("f");
      // SystemInUtil.addInputLine("i");
      problem8_0.calculateOutput("iN");
      assertEquals(10, problem8_0.a315983816);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      
      problem8_0.calculateOutput("iC");
      assertEquals(97, problem8_0.a541669751);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-35), problem8_0.a1758726220);
      assertEquals(291, problem8_0.a46031761);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(196, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iN";
      stringArray0[1] = "g";
      // SystemInUtil.addInputLine("C5");
      problem8_0.calculateOutput("iO");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(168, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-148), problem8_0.a1758726220);
      assertEquals((-70), problem8_0.a131814132);
      assertEquals(167, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      
      // SystemInUtil.addInputLine("iC");
      // SystemInUtil.addInputLine("e");
      problem8_0.calculateOutput("iI");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1319101);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(168, problem8_0.a46031761);
      assertEquals(128, problem8_0.a684801399);
      assertFalse(problem8_0.cf);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals((-148), problem8_0.a1758726220);
      assertEquals((-70), problem8_0.a131814132);
      assertEquals(167, problem8_0.a604090397);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals((-103), problem8_0.a541669751);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(243, problem8_0.a103685194);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // SverifyException("Problem8", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // SystemInUtil.addInputLine("foXL\\/7udA'\"\" Ic['");
      Problem8 problem8_0 = new Problem8();
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(239, problem8_0.a131814132);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertTrue(problem8_0.cf);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertNotNull(problem8_0);
      
      // SystemInUtil.addInputLine("h");
      problem8_0.calculateOutput("iN");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(9, problem8_0.a191569517);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals((-8164), problem8_0.a1758726220);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(10, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-5628), problem8_0.a46031761);
      assertEquals(4, problem8_0.a1671467081);
      assertEquals(5, problem8_0.a1358616787);
      assertEquals((-21607), problem8_0.a541669751);
      assertEquals((-27219), problem8_0.a131814132);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      String string0 = "iE";
      problem8_0.calculateOutput("iE");
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(259, problem8_0.a131814132);
      assertEquals(105, problem8_0.a541669751);
      assertEquals(313, problem8_0.a46031761);
      assertEquals(5, problem8_0.a1319101);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a307193304);
      assertEquals((-16), problem8_0.a1758726220);
      assertEquals(120, problem8_0.a604090397);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(17160, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(3, problem8_0.a315983816);
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(9, problem8_0.a927293118);
      assertFalse(problem8_0.cf);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      
      // Undeclared exception!
      try { 
        problem8_0.calculateOutput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Problem8 problem8_0 = new Problem8();
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertTrue(problem8_0.cf);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertEquals(5, problem8_0.a1319101);
      assertNotNull(problem8_0);
      
      problem8_0.a9545038 = "]k<{>VSf&{17AF&m";
      // SystemInUtil.addInputLine("g");
      problem8_0.calculateOutput("iO");
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals(11, problem8_0.a43586272);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(239, problem8_0.a131814132);
      assertEquals(128, problem8_0.a684801399);
      assertEquals((-18), problem8_0.a1758726220);
      assertEquals(274, problem8_0.a46031761);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(106, problem8_0.a541669751);
      assertEquals(6, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      problem8_0.calculateOutput("iF");
      assertEquals((-130), problem8_0.a1758726220);
      assertEquals(60, problem8_0.a131814132);
      assertEquals(10, problem8_0.a191569517);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a43586272);
      assertEquals(105, problem8_0.a46031761);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(4, problem8_0.a1176528804);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(5, problem8_0.a1671467081);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-83), problem8_0.a541669751);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(6, problem8_0.a1358616787);
      assertEquals(11, problem8_0.a1625778031);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(10, problem8_0.a1260877377);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      
      // SystemInUtil.addInputLine("(4qzfQ");
      Problem8 problem8_1 = new Problem8();
      assertFalse(problem8_1.equals((Object)problem8_0));
      assertEquals(219, problem8_1.a768931663);
      assertEquals(11, problem8_1.a2105667438);
      assertEquals(5, problem8_1.a1319101);
      assertEquals(11, problem8_1.a191569517);
      assertEquals((-18), problem8_1.a1758726220);
      assertEquals(9, problem8_1.a927293118);
      assertEquals(10, problem8_1.a1600100453);
      assertEquals(10, problem8_1.a315983816);
      assertEquals(128, problem8_1.a684801399);
      assertEquals(281, problem8_1.a1438701658);
      assertEquals(439, problem8_1.a1675975143);
      assertEquals(10, problem8_1.a116052342);
      assertEquals(11, problem8_1.a43586272);
      assertEquals(6, problem8_1.a1671467081);
      assertEquals(106, problem8_1.a541669751);
      assertEquals(9, problem8_1.a307193304);
      assertEquals(96, problem8_1.a1609282740);
      assertEquals(243, problem8_1.a103685194);
      assertEquals(10, problem8_1.a1260877377);
      assertEquals(7, problem8_1.a1358616787);
      assertTrue(problem8_1.cf);
      assertEquals(12, problem8_1.a1625778031);
      assertEquals(10, problem8_1.a2131549637);
      assertEquals(120, problem8_1.a604090397);
      assertEquals((-20), problem8_1.a625728290);
      assertEquals(37, problem8_1.a30313548);
      assertEquals(8, problem8_1.a1536944568);
      assertEquals(274, problem8_1.a46031761);
      assertEquals(239, problem8_1.a131814132);
      assertEquals(4, problem8_1.a1176528804);
      assertNotNull(problem8_1);
      
      problem8_1.a43586272 = 5;
      problem8_0.calculateOutput("iJ");
      assertFalse(problem8_0.equals((Object)problem8_1));
      assertEquals(7, problem8_0.a1358616787);
      assertEquals(243, problem8_0.a103685194);
      assertEquals(96, problem8_0.a1609282740);
      assertEquals(12, problem8_0.a43586272);
      assertEquals(8, problem8_0.a1536944568);
      assertEquals(37, problem8_0.a30313548);
      assertEquals(270, problem8_0.a46031761);
      assertEquals(6, problem8_0.a1176528804);
      assertEquals(12, problem8_0.a1625778031);
      assertEquals(7, problem8_0.a1260877377);
      assertEquals(9, problem8_0.a927293118);
      assertEquals(9, problem8_0.a307193304);
      assertEquals(120, problem8_0.a604090397);
      assertEquals(80, problem8_0.a541669751);
      assertEquals(10, problem8_0.a2131549637);
      assertEquals((-20), problem8_0.a625728290);
      assertEquals(10, problem8_0.a315983816);
      assertEquals(10, problem8_0.a1600100453);
      assertEquals(281, problem8_0.a1438701658);
      assertEquals(11, problem8_0.a191569517);
      assertEquals((-36), problem8_0.a1758726220);
      assertEquals(219, problem8_0.a768931663);
      assertEquals(10, problem8_0.a116052342);
      assertEquals(128, problem8_0.a684801399);
      assertEquals(439, problem8_0.a1675975143);
      assertEquals(11, problem8_0.a2105667438);
      assertEquals(197, problem8_0.a131814132);
      assertEquals(6, problem8_0.a1671467081);
      assertFalse(problem8_0.cf);
      assertEquals(5, problem8_0.a1319101);
      assertNotSame(problem8_0, problem8_1);
  }
}
