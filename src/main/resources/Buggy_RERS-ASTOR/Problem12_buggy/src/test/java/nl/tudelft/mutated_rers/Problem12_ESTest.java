package nl.tudelft.mutated_rers;
/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 15 13:15:55 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;

public class Problem12_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a940884999);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a2137039891);
      assertNotNull(problem12_0);
      
      problem12_0.a723021039 = 1378;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("C8[<M*7'Xj@VYv^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertNotNull(problem12_0);
      
      problem12_0.a1537202397 = 1;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertNotNull(problem12_0);
      
      problem12_0.a175021388 = 7;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertNotNull(problem12_0);
      
      problem12_0.a1986588543 = 6;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(261, problem12_0.a361977403);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a1917006927);
      assertNotNull(problem12_0);
      
      problem12_0.a1735676225 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertNotNull(problem12_0);
      
      problem12_0.a1370310674 = 4;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(1, problem12_0.a1337063325);
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertNotNull(problem12_0);
      
      problem12_0.a1266818133 = 6;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertNotNull(problem12_0);
      
      problem12_0.a1234479259 = 8;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertNotNull(problem12_0);
      
      problem12_0.a1890782545 = "g";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertNotNull(problem12_0);
      
      problem12_0.a594512683 = 261;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertNotNull(problem12_0);
      
      problem12_0.a1319971054 = 5;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(2, problem12_0.a636737486);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a1013753367 = "h";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(14, problem12_0.a1627568885);
      assertTrue(problem12_0.cf);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertNotNull(problem12_0);
      
      problem12_0.a475616344 = "i";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertNotNull(problem12_0);
      
      problem12_0.a391752247 = "g";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(310, problem12_0.a814559931);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertNotNull(problem12_0);
      
      problem12_0.a1735676225 = 209;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a343956675);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertTrue(problem12_0.cf);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertNotNull(problem12_0);
      
      problem12_0.a807105787 = "h";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a940884999);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a956731650 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a723021039 = 8;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertTrue(problem12_0.cf);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertNotNull(problem12_0);
      
      problem12_0.calculateOutput("E");
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertFalse(problem12_0.cf);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals((-3), problem12_0.a1692790867);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-25), problem12_0.a26193894);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertTrue(problem12_0.cf);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(415, problem12_0.a723021039);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertNotNull(problem12_0);
      
      problem12_0.a633508800 = 395;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertNotNull(problem12_0);
      
      problem12_0.a1498204891 = 1;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(16, problem12_0.a1677701610);
      assertTrue(problem12_0.cf);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals((-43), problem12_0.a633508800);
      assertNotNull(problem12_0);
      
      problem12_0.a1850714721 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(95, problem12_0.a1692790867);
      assertNotNull(problem12_0);
      
      problem12_0.a1641996601 = "f";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertTrue(problem12_0.cf);
      assertNotNull(problem12_0);
      
      problem12_0.a1521783311 = "i";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertTrue(problem12_0.cf);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertNotNull(problem12_0);
      
      problem12_0.a1029272520 = "i";
      // SystemInUtil.addInputLine("g");
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertNotNull(problem12_0);
      
      problem12_0.a1889444 = 11;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(261, problem12_0.a361977403);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(87, problem12_0.a1498204891);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a2137039891);
      assertNotNull(problem12_0);
      
      problem12_0.a2085996742 = 110;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertNotNull(problem12_0);
      
      problem12_0.a1950731090 = 332;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertTrue(problem12_0.cf);
      assertNotNull(problem12_0);
      
      problem12_0.a1165002181 = "h";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(12, problem12_0.a802666033);
      assertTrue(problem12_0.cf);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertNotNull(problem12_0);
      
      problem12_0.a633508800 = (-1477);
      problem12_0.a1378705959 = 8;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(14, problem12_0.a1627568885);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a636737486);
      assertNotNull(problem12_0);
      
      problem12_0.a1881430494 = "i";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(9, problem12_0.a1319971054);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertNotNull(problem12_0);
      
      problem12_0.a814559931 = 168;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertNotNull(problem12_0);
      
      problem12_0.a11786010 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertNotNull(problem12_0);
      
      problem12_0.a1013753367 = "f";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(51, problem12_0.a26193894);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertNotNull(problem12_0);
      
      Problem12 problem12_1 = new Problem12();
      assertEquals(4, problem12_1.a845174625);
      assertEquals(101, problem12_1.a1735676225);
      assertEquals(11, problem12_1.a1129073644);
      assertEquals(4, problem12_1.a1589680413);
      assertEquals(1, problem12_1.a1337063325);
      assertEquals(209, problem12_1.a1068791267);
      assertEquals(8, problem12_1.a1322045826);
      assertEquals(1, problem12_1.a1840831942);
      assertEquals(7, problem12_1.a1046380841);
      assertEquals(387, problem12_1.a1889444);
      assertEquals(168, problem12_1.a1753374833);
      assertEquals(51, problem12_1.a26193894);
      assertEquals(110, problem12_1.a1234479259);
      assertEquals(415, problem12_1.a723021039);
      assertEquals(5, problem12_1.a1537202397);
      assertEquals((-43), problem12_1.a633508800);
      assertEquals(16, problem12_1.a1677701610);
      assertEquals(2, problem12_1.a636737486);
      assertEquals(310, problem12_1.a814559931);
      assertEquals(2, problem12_1.a1378705959);
      assertEquals(0, problem12_1.a1747937390);
      assertEquals(0, problem12_1.a1917006927);
      assertEquals(11, problem12_1.a1986588543);
      assertEquals(6, problem12_1.a1328341140);
      assertEquals(5, problem12_1.a175021388);
      assertEquals(7, problem12_1.a2085996742);
      assertEquals(9, problem12_1.a1319971054);
      assertEquals((-10), problem12_1.a594512683);
      assertEquals(12, problem12_1.a802666033);
      assertEquals(14, problem12_1.a1627568885);
      assertEquals(3, problem12_1.a1629448168);
      assertEquals(0, problem12_1.a2137039891);
      assertEquals(340, problem12_1.a1531818209);
      assertEquals(261, problem12_1.a361977403);
      assertEquals(87, problem12_1.a1498204891);
      assertEquals(7, problem12_1.a1603425393);
      assertEquals(9, problem12_1.a1075050815);
      assertEquals(162, problem12_1.a1488983217);
      assertEquals(5, problem12_1.a7711982);
      assertEquals(395, problem12_1.a1266818133);
      assertEquals(265, problem12_1.a1370310674);
      assertEquals(1, problem12_1.a343956675);
      assertEquals(2, problem12_1.a940884999);
      assertEquals(95, problem12_1.a1692790867);
      assertTrue(problem12_1.cf);
      assertEquals(332, problem12_1.a1644522862);
      assertEquals(297, problem12_1.a1950731090);
      assertFalse(problem12_1.equals((Object)problem12_0));
      assertNotNull(problem12_1);
      
      problem12_1.a1068791267 = 415;
      problem12_1.a1000117292 = "i";
      // Undeclared exception!
      try { 
        problem12_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a1677701610 = 332;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("Sh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a1677701610 = 65;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertNotNull(problem12_0);
      
      problem12_0.a1728964547 = "h";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertNotNull(problem12_0);
      
      problem12_0.a7711982 = (-10);
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertNotNull(problem12_0);
      
      problem12_0.a1753374833 = 265;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertNotNull(problem12_0);
      
      problem12_0.a1129073644 = 110;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(2, problem12_0.a940884999);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertNotNull(problem12_0);
      
      problem12_0.a381359865 = "i";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("P16c3/w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(415, problem12_0.a723021039);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a175021388);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      problem12_0.a1046380841 = 5;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      problem12_0.a1986588543 = 3;
      problem12_0.a1950731090 = 101;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertNotNull(problem12_0);
      
      problem12_0.a1498204891 = 16;
      problem12_0.a807105787 = "e";
      problem12_0.a2034787802 = "i";
      problem12_0.a633508800 = 387;
      problem12_0.calculateOutput("f");
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(16, problem12_0.a1498204891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertFalse(problem12_0.cf);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(387, problem12_0.a633508800);
      assertEquals(5, problem12_0.a7711982);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertNotNull(problem12_0);
      
      problem12_0.a1498204891 = 168;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(95, problem12_0.a1692790867);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a1735676225 = 340;
      problem12_0.a845174625 = 0;
      String string0 = "E";
      problem12_0.calculateOutput("E");
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-3), problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(415, problem12_0.a723021039);
      assertEquals((-25), problem12_0.a26193894);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(340, problem12_0.a1735676225);
      assertEquals(0, problem12_0.a845174625);
      assertFalse(problem12_0.cf);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(5, problem12_0.a7711982);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.calculateOutput("I");
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a802666033);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(187, problem12_0.a1068791267);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a1498204891);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(312, problem12_0.a723021039);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1322045826);
      assertFalse(problem12_0.cf);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a2085996742);
      assertEquals(10, problem12_0.a1129073644);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1589680413);
      assertEquals(3, problem12_0.a845174625);
      assertEquals(2, problem12_0.a1234479259);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals((-16), problem12_0.a1692790867);
      assertEquals((-27377), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(5, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-146), problem12_0.a26193894);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(4, problem12_0.a1537202397);
      assertEquals(4, problem12_0.a7711982);
      assertEquals(265, problem12_0.a1370310674);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertNotNull(problem12_0);
      
      problem12_0.a1889444 = 209;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(87, problem12_0.a1498204891);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertNotNull(problem12_0);
      
      problem12_0.a1890782545 = "f";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertNotNull(problem12_0);
      
      problem12_0.a391752247 = "h";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertTrue(problem12_0.cf);
      assertNotNull(problem12_0);
      
      Problem12 problem12_1 = new Problem12();
      assertEquals(1, problem12_1.a1840831942);
      assertEquals(168, problem12_1.a1753374833);
      assertEquals(209, problem12_1.a1068791267);
      assertEquals(387, problem12_1.a1889444);
      assertEquals(7, problem12_1.a1046380841);
      assertEquals(2, problem12_1.a940884999);
      assertEquals(51, problem12_1.a26193894);
      assertEquals(101, problem12_1.a1735676225);
      assertEquals(4, problem12_1.a845174625);
      assertEquals(1, problem12_1.a1337063325);
      assertEquals(332, problem12_1.a1644522862);
      assertEquals(7, problem12_1.a2085996742);
      assertEquals((-10), problem12_1.a594512683);
      assertEquals(5, problem12_1.a175021388);
      assertEquals(95, problem12_1.a1692790867);
      assertEquals(4, problem12_1.a1589680413);
      assertEquals(11, problem12_1.a1129073644);
      assertEquals(0, problem12_1.a2137039891);
      assertEquals(8, problem12_1.a1322045826);
      assertEquals(265, problem12_1.a1370310674);
      assertEquals(14, problem12_1.a1627568885);
      assertEquals(9, problem12_1.a1075050815);
      assertEquals(6, problem12_1.a1328341140);
      assertEquals(2, problem12_1.a1378705959);
      assertEquals(7, problem12_1.a1603425393);
      assertEquals(395, problem12_1.a1266818133);
      assertEquals(0, problem12_1.a1917006927);
      assertEquals(3, problem12_1.a1629448168);
      assertEquals(0, problem12_1.a1747937390);
      assertEquals(297, problem12_1.a1950731090);
      assertEquals(1, problem12_1.a343956675);
      assertTrue(problem12_1.cf);
      assertEquals((-43), problem12_1.a633508800);
      assertEquals(9, problem12_1.a1319971054);
      assertEquals(11, problem12_1.a1986588543);
      assertEquals(12, problem12_1.a802666033);
      assertEquals(2, problem12_1.a636737486);
      assertEquals(415, problem12_1.a723021039);
      assertEquals(5, problem12_1.a1537202397);
      assertEquals(261, problem12_1.a361977403);
      assertEquals(340, problem12_1.a1531818209);
      assertEquals(310, problem12_1.a814559931);
      assertEquals(5, problem12_1.a7711982);
      assertEquals(87, problem12_1.a1498204891);
      assertEquals(162, problem12_1.a1488983217);
      assertEquals(110, problem12_1.a1234479259);
      assertEquals(16, problem12_1.a1677701610);
      assertFalse(problem12_1.equals((Object)problem12_0));
      assertNotNull(problem12_1);
      
      problem12_1.a479748005 = "i";
      // Undeclared exception!
      try { 
        problem12_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertNotNull(problem12_0);
      
      problem12_0.a1378705959 = 87;
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertNotNull(problem12_0);
      
      problem12_0.a1234479259 = 261;
      problem12_0.a391752247 = "g";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("KA-{+)c3w+`p&\u0000[BA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertNotNull(problem12_0);
      
      problem12_0.a1075050815 = 11;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a940884999);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertNotNull(problem12_0);
      
      problem12_0.a1266818133 = 193;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertNotNull(problem12_0);
      
      problem12_0.a1378705959 = 7;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.calculateOutput("J");
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(5, problem12_0.a1328341140);
      assertEquals(4, problem12_0.a1537202397);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1046380841);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(3, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(10, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a7711982);
      assertEquals((-665), problem12_0.a1068791267);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals((-2), problem12_0.a1234479259);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1629448168);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-56), problem12_0.a1498204891);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(3, problem12_0.a845174625);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(246, problem12_0.a723021039);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a802666033);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1322045826);
      assertEquals(6, problem12_0.a2085996742);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(6, problem12_0.a1692790867);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals((-77), problem12_0.a26193894);
      assertFalse(problem12_0.cf);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("rtG7S|_*s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertNotNull(problem12_0);
      
      problem12_0.a594512683 = (-33);
      problem12_0.a956731650 = "f";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(2, problem12_0.a940884999);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a845174625);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 9;
      problem12_0.calculateOutput("y-9:<Quh");
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(2, problem12_0.a940884999);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a845174625);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a343956675);
      assertFalse(problem12_0.cf);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a802666033);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertTrue(problem12_0.cf);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      String string0 = "J";
      problem12_0.calculateOutput("J");
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals((-77), problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(6, problem12_0.a1692790867);
      assertEquals(6, problem12_0.a2085996742);
      assertEquals(3, problem12_0.a1589680413);
      assertEquals(10, problem12_0.a1129073644);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a1322045826);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(246, problem12_0.a723021039);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(261, problem12_0.a361977403);
      assertFalse(problem12_0.cf);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-2), problem12_0.a1234479259);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a1629448168);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals((-665), problem12_0.a1068791267);
      assertEquals(5, problem12_0.a802666033);
      assertEquals((-56), problem12_0.a1498204891);
      assertEquals(3, problem12_0.a845174625);
      assertEquals(3, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1537202397);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(4, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(12, problem12_0.a802666033);
      assertTrue(problem12_0.cf);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a2137039891);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.calculateOutput("B");
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(7, problem12_0.a1322045826);
      assertFalse(problem12_0.cf);
      assertEquals(8, problem12_0.a1046380841);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a2085996742);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1589680413);
      assertEquals(10, problem12_0.a1129073644);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-71), problem12_0.a26193894);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(4, problem12_0.a1629448168);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a802666033);
      assertEquals((-58), problem12_0.a1498204891);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-11), problem12_0.a1234479259);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(4, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(23, problem12_0.a1692790867);
      
      problem12_0.calculateOutput("B");
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(7, problem12_0.a1322045826);
      assertFalse(problem12_0.cf);
      assertEquals(8, problem12_0.a1046380841);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a2085996742);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1589680413);
      assertEquals(10, problem12_0.a1129073644);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-71), problem12_0.a26193894);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(4, problem12_0.a1629448168);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a802666033);
      assertEquals((-58), problem12_0.a1498204891);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-11), problem12_0.a1234479259);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(4, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(23, problem12_0.a1692790867);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(12, problem12_0.a802666033);
      assertTrue(problem12_0.cf);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertNotNull(problem12_0);
      
      problem12_0.a1644522862 = 4786;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("{.jkx uyG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(11, problem12_0.a1986588543);
      assertTrue(problem12_0.cf);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertNotNull(problem12_0);
      
      Problem12 problem12_1 = new Problem12();
      assertEquals(332, problem12_1.a1644522862);
      assertEquals(2, problem12_1.a636737486);
      assertEquals(0, problem12_1.a2137039891);
      assertEquals(2, problem12_1.a940884999);
      assertTrue(problem12_1.cf);
      assertEquals(5, problem12_1.a175021388);
      assertEquals(87, problem12_1.a1498204891);
      assertEquals(162, problem12_1.a1488983217);
      assertEquals(51, problem12_1.a26193894);
      assertEquals(9, problem12_1.a1319971054);
      assertEquals(9, problem12_1.a1075050815);
      assertEquals(6, problem12_1.a1328341140);
      assertEquals(3, problem12_1.a1629448168);
      assertEquals(395, problem12_1.a1266818133);
      assertEquals(340, problem12_1.a1531818209);
      assertEquals(310, problem12_1.a814559931);
      assertEquals(5, problem12_1.a7711982);
      assertEquals(12, problem12_1.a802666033);
      assertEquals(110, problem12_1.a1234479259);
      assertEquals(16, problem12_1.a1677701610);
      assertEquals(415, problem12_1.a723021039);
      assertEquals(11, problem12_1.a1986588543);
      assertEquals(5, problem12_1.a1537202397);
      assertEquals(261, problem12_1.a361977403);
      assertEquals(209, problem12_1.a1068791267);
      assertEquals(2, problem12_1.a1378705959);
      assertEquals(95, problem12_1.a1692790867);
      assertEquals(297, problem12_1.a1950731090);
      assertEquals(1, problem12_1.a343956675);
      assertEquals(7, problem12_1.a2085996742);
      assertEquals((-43), problem12_1.a633508800);
      assertEquals(0, problem12_1.a1747937390);
      assertEquals(0, problem12_1.a1917006927);
      assertEquals(4, problem12_1.a845174625);
      assertEquals((-10), problem12_1.a594512683);
      assertEquals(1, problem12_1.a1337063325);
      assertEquals(7, problem12_1.a1046380841);
      assertEquals(101, problem12_1.a1735676225);
      assertEquals(387, problem12_1.a1889444);
      assertEquals(7, problem12_1.a1603425393);
      assertEquals(11, problem12_1.a1129073644);
      assertEquals(265, problem12_1.a1370310674);
      assertEquals(14, problem12_1.a1627568885);
      assertEquals(8, problem12_1.a1322045826);
      assertEquals(1, problem12_1.a1840831942);
      assertEquals(168, problem12_1.a1753374833);
      assertEquals(4, problem12_1.a1589680413);
      assertFalse(problem12_1.equals((Object)problem12_0));
      assertNotNull(problem12_1);
      
      problem12_1.a894902376 = "i";
      // Undeclared exception!
      try { 
        problem12_1.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertNotNull(problem12_0);
      
      problem12_0.a343956675 = (-4615);
      problem12_0.a594512683 = 265;
      problem12_0.calculateOutput("E");
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(265, problem12_0.a594512683);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals((-4615), problem12_0.a343956675);
      assertEquals(101, problem12_0.a1735676225);
      assertFalse(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-25), problem12_0.a26193894);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-3), problem12_0.a1692790867);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1917006927);
      assertTrue(problem12_0.cf);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      problem12_0.a1641996601 = "i";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("];UTXf*dH[%jZ#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a175021388);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      problem12_0.a1641996601 = "g";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(51, problem12_0.a26193894);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertNotNull(problem12_0);
      
      Problem12 problem12_1 = new Problem12();
      assertEquals(101, problem12_1.a1735676225);
      assertEquals(4, problem12_1.a845174625);
      assertEquals(8, problem12_1.a1322045826);
      assertEquals(7, problem12_1.a1046380841);
      assertEquals(7, problem12_1.a2085996742);
      assertEquals(209, problem12_1.a1068791267);
      assertEquals(4, problem12_1.a1589680413);
      assertEquals(1, problem12_1.a1337063325);
      assertEquals(168, problem12_1.a1753374833);
      assertEquals((-10), problem12_1.a594512683);
      assertEquals(387, problem12_1.a1889444);
      assertEquals(110, problem12_1.a1234479259);
      assertEquals(2, problem12_1.a940884999);
      assertEquals(51, problem12_1.a26193894);
      assertEquals(265, problem12_1.a1370310674);
      assertEquals(1, problem12_1.a343956675);
      assertEquals(1, problem12_1.a1840831942);
      assertEquals(95, problem12_1.a1692790867);
      assertEquals(11, problem12_1.a1129073644);
      assertEquals(332, problem12_1.a1644522862);
      assertEquals(297, problem12_1.a1950731090);
      assertEquals(14, problem12_1.a1627568885);
      assertEquals(87, problem12_1.a1498204891);
      assertEquals(340, problem12_1.a1531818209);
      assertTrue(problem12_1.cf);
      assertEquals(261, problem12_1.a361977403);
      assertEquals(162, problem12_1.a1488983217);
      assertEquals(9, problem12_1.a1075050815);
      assertEquals(7, problem12_1.a1603425393);
      assertEquals(5, problem12_1.a7711982);
      assertEquals(395, problem12_1.a1266818133);
      assertEquals(0, problem12_1.a2137039891);
      assertEquals(0, problem12_1.a1917006927);
      assertEquals(0, problem12_1.a1747937390);
      assertEquals(2, problem12_1.a636737486);
      assertEquals(16, problem12_1.a1677701610);
      assertEquals((-43), problem12_1.a633508800);
      assertEquals(415, problem12_1.a723021039);
      assertEquals(310, problem12_1.a814559931);
      assertEquals(5, problem12_1.a1537202397);
      assertEquals(11, problem12_1.a1986588543);
      assertEquals(2, problem12_1.a1378705959);
      assertEquals(9, problem12_1.a1319971054);
      assertEquals(5, problem12_1.a175021388);
      assertEquals(3, problem12_1.a1629448168);
      assertEquals(6, problem12_1.a1328341140);
      assertEquals(12, problem12_1.a802666033);
      assertFalse(problem12_1.equals((Object)problem12_0));
      assertNotNull(problem12_1);
      
      problem12_1.a1000117292 = "f";
      // Undeclared exception!
      try { 
        problem12_1.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a1589680413);
      assertTrue(problem12_0.cf);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertNotNull(problem12_0);
      
      problem12_0.a2034787802 = "f";
      problem12_0.a802666033 = 5;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(14, problem12_0.a1627568885);
      assertNotNull(problem12_0);
      
      problem12_0.a1378705959 = 8;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertNotNull(problem12_0);
      
      problem12_0.a1735676225 = 387;
      problem12_0.a802666033 = 5;
      problem12_0.calculateOutput("g");
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(387, problem12_0.a1735676225);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertFalse(problem12_0.cf);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a802666033);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertTrue(problem12_0.cf);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals((-43), problem12_0.a633508800);
      assertNotNull(problem12_0);
      
      problem12_0.a1735676225 = 8;
      problem12_0.a802666033 = 5;
      problem12_0.calculateOutput("g");
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertFalse(problem12_0.cf);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(5, problem12_0.a802666033);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(8, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals((-43), problem12_0.a633508800);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.a26193894 = 8;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a636737486);
      assertNotNull(problem12_0);
      
      problem12_0.a2070698626 = "SLc";
      problem12_0.a802666033 = 5;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("bo?sLj1)4ht");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertNotNull(problem12_0);
      
      problem12_0.a2034787802 = "e";
      problem12_0.a64834875 = "i";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(101, problem12_0.a1735676225);
      assertNotNull(problem12_0);
      
      problem12_0.a1521783311 = "i";
      problem12_0.a361977403 = 8;
      problem12_0.a1629448168 = 6;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertNotNull(problem12_0);
      
      problem12_0.a1881430494 = "i";
      problem12_0.a361977403 = (-10);
      problem12_0.a633508800 = 265;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(12, problem12_0.a802666033);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertNotNull(problem12_0);
      
      problem12_0.a1728964547 = "i";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(95, problem12_0.a1692790867);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(6, problem12_0.a1328341140);
      assertNotNull(problem12_0);
      
      Problem12 problem12_1 = new Problem12();
      assertEquals(0, problem12_1.a1747937390);
      assertEquals((-43), problem12_1.a633508800);
      assertEquals(5, problem12_1.a1537202397);
      assertEquals((-10), problem12_1.a594512683);
      assertEquals(7, problem12_1.a2085996742);
      assertEquals(1, problem12_1.a343956675);
      assertEquals(265, problem12_1.a1370310674);
      assertEquals(0, problem12_1.a1917006927);
      assertEquals(4, problem12_1.a845174625);
      assertEquals(87, problem12_1.a1498204891);
      assertEquals(162, problem12_1.a1488983217);
      assertEquals(1, problem12_1.a1337063325);
      assertEquals(209, problem12_1.a1068791267);
      assertEquals(395, problem12_1.a1266818133);
      assertEquals(261, problem12_1.a361977403);
      assertEquals(9, problem12_1.a1075050815);
      assertEquals(110, problem12_1.a1234479259);
      assertEquals(340, problem12_1.a1531818209);
      assertEquals(9, problem12_1.a1319971054);
      assertEquals(5, problem12_1.a175021388);
      assertEquals(310, problem12_1.a814559931);
      assertEquals(12, problem12_1.a802666033);
      assertEquals(3, problem12_1.a1629448168);
      assertEquals(2, problem12_1.a1378705959);
      assertEquals(6, problem12_1.a1328341140);
      assertEquals(415, problem12_1.a723021039);
      assertEquals(11, problem12_1.a1986588543);
      assertEquals(2, problem12_1.a636737486);
      assertEquals(332, problem12_1.a1644522862);
      assertEquals(16, problem12_1.a1677701610);
      assertTrue(problem12_1.cf);
      assertEquals(2, problem12_1.a940884999);
      assertEquals(0, problem12_1.a2137039891);
      assertEquals(5, problem12_1.a7711982);
      assertEquals(387, problem12_1.a1889444);
      assertEquals(51, problem12_1.a26193894);
      assertEquals(7, problem12_1.a1046380841);
      assertEquals(1, problem12_1.a1840831942);
      assertEquals(168, problem12_1.a1753374833);
      assertEquals(7, problem12_1.a1603425393);
      assertEquals(14, problem12_1.a1627568885);
      assertEquals(11, problem12_1.a1129073644);
      assertEquals(297, problem12_1.a1950731090);
      assertEquals(4, problem12_1.a1589680413);
      assertEquals(101, problem12_1.a1735676225);
      assertEquals(95, problem12_1.a1692790867);
      assertEquals(8, problem12_1.a1322045826);
      assertFalse(problem12_1.equals((Object)problem12_0));
      assertNotNull(problem12_1);
      
      problem12_1.a1000117292 = "i";
      // Undeclared exception!
      try { 
        problem12_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertNotNull(problem12_0);
      
      problem12_0.a1627568885 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertTrue(problem12_0.cf);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertNotNull(problem12_0);
      
      problem12_0.a1046380841 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(261, problem12_0.a361977403);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.a1840831942 = 4;
      problem12_0.a1812297667 = "T";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(261, problem12_0.a361977403);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertNotNull(problem12_0);
      
      problem12_0.a11786010 = "f";
      problem12_0.a1266818133 = 340;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a2137039891);
      assertNotNull(problem12_0);
      
      problem12_0.a2106483254 = "g";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertNotNull(problem12_0);
      
      problem12_0.a1322045826 = 11;
      problem12_0.a475616344 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("DQ`]Iz9&H>[@H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertTrue(problem12_0.cf);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertNotNull(problem12_0);
      
      problem12_0.a1498204891 = (-899);
      problem12_0.a1322045826 = 11;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(9, problem12_0.a1075050815);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertNotNull(problem12_0);
      
      Problem12 problem12_1 = new Problem12();
      assertEquals(2, problem12_1.a1378705959);
      assertEquals(1, problem12_1.a343956675);
      assertEquals(6, problem12_1.a1328341140);
      assertEquals(310, problem12_1.a814559931);
      assertEquals(265, problem12_1.a1370310674);
      assertEquals(7, problem12_1.a1603425393);
      assertEquals(9, problem12_1.a1319971054);
      assertEquals(395, problem12_1.a1266818133);
      assertEquals(297, problem12_1.a1950731090);
      assertEquals(9, problem12_1.a1075050815);
      assertEquals((-43), problem12_1.a633508800);
      assertEquals(0, problem12_1.a1747937390);
      assertEquals(0, problem12_1.a1917006927);
      assertTrue(problem12_1.cf);
      assertEquals(4, problem12_1.a1589680413);
      assertEquals(11, problem12_1.a1129073644);
      assertEquals(0, problem12_1.a2137039891);
      assertEquals(14, problem12_1.a1627568885);
      assertEquals(332, problem12_1.a1644522862);
      assertEquals(101, problem12_1.a1735676225);
      assertEquals(1, problem12_1.a1840831942);
      assertEquals(168, problem12_1.a1753374833);
      assertEquals(7, problem12_1.a1046380841);
      assertEquals(95, problem12_1.a1692790867);
      assertEquals(8, problem12_1.a1322045826);
      assertEquals(110, problem12_1.a1234479259);
      assertEquals(5, problem12_1.a175021388);
      assertEquals(387, problem12_1.a1889444);
      assertEquals(2, problem12_1.a940884999);
      assertEquals(16, problem12_1.a1677701610);
      assertEquals(1, problem12_1.a1337063325);
      assertEquals(51, problem12_1.a26193894);
      assertEquals(4, problem12_1.a845174625);
      assertEquals((-10), problem12_1.a594512683);
      assertEquals(7, problem12_1.a2085996742);
      assertEquals(12, problem12_1.a802666033);
      assertEquals(3, problem12_1.a1629448168);
      assertEquals(340, problem12_1.a1531818209);
      assertEquals(5, problem12_1.a7711982);
      assertEquals(2, problem12_1.a636737486);
      assertEquals(261, problem12_1.a361977403);
      assertEquals(87, problem12_1.a1498204891);
      assertEquals(5, problem12_1.a1537202397);
      assertEquals(162, problem12_1.a1488983217);
      assertEquals(209, problem12_1.a1068791267);
      assertEquals(11, problem12_1.a1986588543);
      assertEquals(415, problem12_1.a723021039);
      assertFalse(problem12_1.equals((Object)problem12_0));
      assertNotNull(problem12_1);
      
      problem12_1.a1629448168 = 7;
      // Undeclared exception!
      try { 
        problem12_1.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a479748005 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("}hAq\"v3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a175021388);
      assertTrue(problem12_0.cf);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertNotNull(problem12_0);
      
      problem12_0.a1322045826 = 12;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertNotNull(problem12_0);
      
      problem12_0.a1627568885 = 16;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a1677701610 = 209;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("Errors");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(415, problem12_0.a723021039);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a1521783311 = "h";
      problem12_0.a1881430494 = "i";
      problem12_0.a361977403 = (-10);
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("aY =r1yG@>n7shIOc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertNotNull(problem12_0);
      
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(95, problem12_0.a1692790867);
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertNotNull(problem12_0);
      
      problem12_0.a1328341140 = 1;
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a343956675);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertNotNull(problem12_0);
      
      problem12_0.a381359865 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertTrue(problem12_0.cf);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals((-43), problem12_0.a633508800);
      assertNotNull(problem12_0);
      
      problem12_0.a7711982 = 289;
      problem12_0.a86654319 = "g";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertNotNull(problem12_0);
      
      problem12_0.a814559931 = 265;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(4, problem12_0.a845174625);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 7;
      problem12_0.calculateOutput("kBqAdSe#F;3K45O");
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(4, problem12_0.a845174625);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a802666033);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a343956675);
      assertEquals((-43), problem12_0.a633508800);
      assertFalse(problem12_0.cf);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.a1234479259 = 2;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-43), problem12_0.a633508800);
      assertNotNull(problem12_0);
      
      problem12_0.a1013753367 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(101, problem12_0.a1735676225);
      assertNotNull(problem12_0);
      
      problem12_0.a1165002181 = "oVCMG`aQTQU]9rYg4";
      problem12_0.a802666033 = 5;
      problem12_0.a26193894 = 20;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertNotNull(problem12_0);
      
      problem12_0.a1322045826 = 7;
      problem12_0.calculateOutput("h");
      assertEquals(340, problem12_0.a1531818209);
      assertFalse(problem12_0.cf);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(7, problem12_0.a1322045826);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertNotNull(problem12_0);
      
      problem12_0.a1498204891 = 0;
      problem12_0.a723021039 = 713;
      problem12_0.a594512683 = 0;
      problem12_0.a2034787802 = "h";
      problem12_0.a1322045826 = 2591;
      problem12_0.a1488983217 = 0;
      problem12_0.a807105787 = "e";
      problem12_0.a1850714721 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.a1589680413 = 5;
      problem12_0.a633508800 = 395;
      problem12_0.a1531818209 = 205;
      problem12_0.calculateOutput("I");
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(6, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(10, problem12_0.a1129073644);
      assertEquals(3, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-16), problem12_0.a1692790867);
      assertEquals(312, problem12_0.a723021039);
      assertEquals((-27377), problem12_0.a594512683);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a1378705959);
      assertFalse(problem12_0.cf);
      assertEquals(395, problem12_0.a633508800);
      assertEquals((-146), problem12_0.a26193894);
      assertEquals(7, problem12_0.a1322045826);
      assertEquals(187, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1234479259);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a2085996742);
      assertEquals(10, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a1498204891);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(205, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a802666033);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(3, problem12_0.a845174625);
      assertEquals(4, problem12_0.a1537202397);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(4, problem12_0.a7711982);
      assertEquals(265, problem12_0.a1370310674);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a940884999);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 11;
      problem12_0.a1322045826 = 325;
      problem12_0.a1950731090 = 332;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("@R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(16, problem12_0.a1677701610);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.a26193894 = 87;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(51, problem12_0.a26193894);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(415, problem12_0.a723021039);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertNotNull(problem12_0);
      
      problem12_0.a11786010 = "f";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("uHm.j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(261, problem12_0.a361977403);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(87, problem12_0.a1498204891);
      assertTrue(problem12_0.cf);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(11, problem12_0.a1129073644);
      assertNotNull(problem12_0);
      
      problem12_0.a1165002181 = "%y";
      problem12_0.a1322045826 = 11;
      // SystemInUtil.addInputLine("U");
      problem12_0.a1603425393 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 21840;
      problem12_0.a940884999 = (-3049);
      problem12_0.a1589680413 = (-3049);
      problem12_0.a1314760634 = null;
      problem12_0.a175021388 = 0;
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 7;
      problem12_0.a26193894 = 387;
      problem12_0.calculateOutput("-:5:]7fx,*aqA");
      assertEquals(14, problem12_0.a1627568885);
      assertFalse(problem12_0.cf);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(387, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a802666033);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertTrue(problem12_0.cf);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertNotNull(problem12_0);
      
      problem12_0.a723021039 = (-43);
      problem12_0.a940884999 = 265;
      problem12_0.a175021388 = 1;
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // SystemInUtil.addInputLine((String) null);
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertNotNull(problem12_0);
      
      problem12_0.a1314760634 = "f";
      problem12_0.a343956675 = 9;
      problem12_0.a26193894 = (-10);
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertNotNull(problem12_0);
      
      problem12_0.a1603425393 = 12;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("6RX],Hh^Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertNotNull(problem12_0);
      
      problem12_0.a1603425393 = 6;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertTrue(problem12_0.cf);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      String string0 = null;
      problem12_0.a1314760634 = null;
      problem12_0.a175021388 = 11;
      problem12_0.a1068791267 = 8;
      problem12_0.a1322045826 = 9;
      String string1 = "E";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(1, problem12_0.a343956675);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertTrue(problem12_0.cf);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 5;
      problem12_0.a1234479259 = 310;
      problem12_0.a633508800 = (-16);
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // SystemInUtil.addInputLine("");
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertNotNull(problem12_0);
      
      problem12_0.a1881430494 = "";
      problem12_0.a1322045826 = 939;
      problem12_0.a1735676225 = 310;
      problem12_0.a802666033 = 5;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(4, problem12_0.a1589680413);
      assertNotNull(problem12_0);
      
      problem12_0.a956731650 = "g";
      problem12_0.a1537202397 = 12;
      problem12_0.a1322045826 = 12;
      problem12_0.a1812297667 = "h";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertTrue(problem12_0.cf);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(5, problem12_0.a175021388);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertNotNull(problem12_0);
      
      problem12_0.a1129073644 = (-1441);
      problem12_0.a940884999 = 265;
      problem12_0.a1314760634 = null;
      problem12_0.a175021388 = 1;
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a1917006927);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      problem12_0.a1314760634 = "g";
      problem12_0.a1322045826 = 9;
      problem12_0.calculateOutput("H");
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1322045826);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(6, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertFalse(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a940884999);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a1917006927);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(11, problem12_0.a1986588543);
      assertTrue(problem12_0.cf);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a2137039891);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      problem12_0.a1322045826 = 9;
      problem12_0.calculateOutput("I");
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(11, problem12_0.a1603425393);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(42, problem12_0.a594512683);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(11, problem12_0.a1322045826);
      assertEquals(3, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(340, problem12_0.a1531818209);
      assertFalse(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a940884999);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a2137039891);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertNotNull(problem12_0);
      
      problem12_0.a1322045826 = 12;
      problem12_0.a1328341140 = (-437);
      problem12_0.a1812297667 = "h";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      problem12_0.a1850714721 = "g";
      problem12_0.a1322045826 = 9;
      problem12_0.calculateOutput("e");
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(265, problem12_0.a940884999);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(4, problem12_0.a845174625);
      assertFalse(problem12_0.cf);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(9, problem12_0.a1322045826);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertNotNull(problem12_0);
      
      problem12_0.a723021039 = 297;
      problem12_0.a940884999 = 265;
      problem12_0.a1850714721 = "g";
      problem12_0.a175021388 = 1;
      problem12_0.a1322045826 = 9;
      problem12_0.calculateOutput("e");
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(0, problem12_0.a2137039891);
      assertFalse(problem12_0.cf);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(297, problem12_0.a723021039);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(265, problem12_0.a940884999);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(1, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(9, problem12_0.a1322045826);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertNotNull(problem12_0);
      
      problem12_0.a1254945847 = "f";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("Errors");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(101, problem12_0.a1735676225);
      assertTrue(problem12_0.cf);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      problem12_0.a1314760634 = "g";
      problem12_0.a1322045826 = 9;
      problem12_0.a1165002181 = "mLLO>$CxZP]g";
      String string0 = "I";
      // SystemInUtil.addInputLine("g");
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(101, problem12_0.a1735676225);
      assertTrue(problem12_0.cf);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertNotNull(problem12_0);
      
      problem12_0.a1322045826 = 9;
      problem12_0.a1537202397 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertTrue(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      problem12_0.a2070698626 = "";
      problem12_0.a1850714721 = "g";
      problem12_0.a175021388 = 1;
      // SystemInUtil.addInputLine("h");
      problem12_0.a1322045826 = 9;
      problem12_0.calculateOutput("6Q@7~3Pxe4");
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a175021388);
      assertEquals(265, problem12_0.a940884999);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(9, problem12_0.a1322045826);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertFalse(problem12_0.cf);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(395, problem12_0.a1266818133);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      problem12_0.a1322045826 = 9;
      problem12_0.calculateOutput("J");
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals((-1), problem12_0.a343956675);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1322045826);
      assertEquals(265, problem12_0.a940884999);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(29, problem12_0.a594512683);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(5, problem12_0.a7711982);
      assertFalse(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(16, problem12_0.a1677701610);
      assertTrue(problem12_0.cf);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertNotNull(problem12_0);
      
      problem12_0.a1378705959 = (-58);
      problem12_0.a594512683 = (-58);
      problem12_0.a2106483254 = "h";
      problem12_0.calculateOutput("E");
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-3), problem12_0.a1692790867);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(387, problem12_0.a1889444);
      assertFalse(problem12_0.cf);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals((-58), problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals((-58), problem12_0.a594512683);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals((-25), problem12_0.a26193894);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(310, problem12_0.a814559931);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertTrue(problem12_0.cf);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      problem12_0.a1498204891 = 261;
      problem12_0.a1322045826 = 11;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertNotNull(problem12_0);
      
      problem12_0.a802666033 = 7;
      problem12_0.a26193894 = 1;
      problem12_0.calculateOutput("f");
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(1, problem12_0.a26193894);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a845174625);
      assertFalse(problem12_0.cf);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(7, problem12_0.a802666033);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(14, problem12_0.a1627568885);
      assertTrue(problem12_0.cf);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertNotNull(problem12_0);
      
      problem12_0.a1322045826 = 9;
      problem12_0.calculateOutput("J");
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(29, problem12_0.a594512683);
      assertEquals(101, problem12_0.a1735676225);
      assertFalse(problem12_0.cf);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-1), problem12_0.a343956675);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(9, problem12_0.a1322045826);
      
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertTrue(problem12_0.cf);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(4, problem12_0.a845174625);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      // SystemInUtil.addInputLine("g");
      problem12_0.a1881430494 = "I";
      problem12_0.a1629448168 = 5;
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(310, problem12_0.a814559931);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(168, problem12_0.a1753374833);
      assertTrue(problem12_0.cf);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a343956675);
      assertNotNull(problem12_0);
      
      problem12_0.a940884999 = 265;
      problem12_0.a1881430494 = "B";
      problem12_0.a175021388 = 1;
      // SystemInUtil.addInputLine("g");
      problem12_0.a1322045826 = 9;
      String string0 = "J";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(12, problem12_0.a802666033);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertTrue(problem12_0.cf);
      assertNotNull(problem12_0);
      
      problem12_0.a175021388 = 1;
      problem12_0.a845174625 = 58;
      problem12_0.a1692790867 = 9;
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(2, problem12_0.a636737486);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(332, problem12_0.a1644522862);
      assertTrue(problem12_0.cf);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a1378705959 = 1;
      problem12_0.a1071493151 = "e";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(387, problem12_0.a1889444);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(0, problem12_0.a1917006927);
      assertTrue(problem12_0.cf);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(168, problem12_0.a1753374833);
      assertNotNull(problem12_0);
      
      String string0 = "f";
      problem12_0.a1322045826 = (-1736);
      problem12_0.a807105787 = "f";
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertTrue(problem12_0.cf);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(261, problem12_0.a361977403);
      assertNotNull(problem12_0);
      
      problem12_0.a1234479259 = 180;
      problem12_0.a1322045826 = 101;
      problem12_0.a802666033 = 7;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(7, problem12_0.a2085996742);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(3, problem12_0.a1629448168);
      assertTrue(problem12_0.cf);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(4, problem12_0.a845174625);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(340, problem12_0.a1531818209);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(16, problem12_0.a1677701610);
      assertNotNull(problem12_0);
      
      problem12_0.a1013753367 = "e";
      problem12_0.a2106483254 = problem12_0.a2106483254;
      problem12_0.a1322045826 = 11;
      problem12_0.a1735676225 = 455;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Problem12 problem12_0 = new Problem12();
      assertEquals(7, problem12_0.a2085996742);
      assertEquals(11, problem12_0.a1129073644);
      assertEquals((-10), problem12_0.a594512683);
      assertEquals(101, problem12_0.a1735676225);
      assertEquals(95, problem12_0.a1692790867);
      assertEquals(415, problem12_0.a723021039);
      assertEquals(11, problem12_0.a1986588543);
      assertEquals(5, problem12_0.a1537202397);
      assertEquals(168, problem12_0.a1753374833);
      assertEquals(209, problem12_0.a1068791267);
      assertEquals(8, problem12_0.a1322045826);
      assertEquals(1, problem12_0.a1840831942);
      assertEquals(7, problem12_0.a1046380841);
      assertEquals(4, problem12_0.a1589680413);
      assertEquals(6, problem12_0.a1328341140);
      assertEquals(5, problem12_0.a175021388);
      assertEquals(387, problem12_0.a1889444);
      assertEquals(7, problem12_0.a1603425393);
      assertEquals((-43), problem12_0.a633508800);
      assertEquals(265, problem12_0.a1370310674);
      assertEquals(1, problem12_0.a1337063325);
      assertEquals(9, problem12_0.a1319971054);
      assertEquals(0, problem12_0.a1917006927);
      assertEquals(0, problem12_0.a1747937390);
      assertEquals(12, problem12_0.a802666033);
      assertEquals(0, problem12_0.a2137039891);
      assertEquals(340, problem12_0.a1531818209);
      assertTrue(problem12_0.cf);
      assertEquals(14, problem12_0.a1627568885);
      assertEquals(3, problem12_0.a1629448168);
      assertEquals(5, problem12_0.a7711982);
      assertEquals(261, problem12_0.a361977403);
      assertEquals(2, problem12_0.a636737486);
      assertEquals(87, problem12_0.a1498204891);
      assertEquals(162, problem12_0.a1488983217);
      assertEquals(2, problem12_0.a1378705959);
      assertEquals(2, problem12_0.a940884999);
      assertEquals(110, problem12_0.a1234479259);
      assertEquals(310, problem12_0.a814559931);
      assertEquals(1, problem12_0.a343956675);
      assertEquals(16, problem12_0.a1677701610);
      assertEquals(9, problem12_0.a1075050815);
      assertEquals(395, problem12_0.a1266818133);
      assertEquals(297, problem12_0.a1950731090);
      assertEquals(332, problem12_0.a1644522862);
      assertEquals(51, problem12_0.a26193894);
      assertEquals(4, problem12_0.a845174625);
      assertNotNull(problem12_0);
      
      problem12_0.a845174625 = 180;
      problem12_0.a7711982 = (-3304);
      problem12_0.a1322045826 = 9;
      // Undeclared exception!
      try { 
        problem12_0.calculateOutput(")2E<{ECj*8yl%c8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem12", e);
      }
  }
}
