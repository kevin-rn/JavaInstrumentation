package nl.tudelft.mutated_rers;

/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 15 13:19:20 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;

public class Problem13_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      
      problem13_0.a810914124 = 456;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1458471526);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals(265, problem13_1.a661472947);
      assertEquals(8, problem13_1.a1127751596);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(9, problem13_1.a1021882616);
      assertTrue(problem13_1.cf);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals(1, problem13_1.a384960957);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals(1, problem13_1.a1403822458);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals((-127), problem13_1.a1432939547);
      assertEquals(5, problem13_1.a1290874579);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals(3, problem13_1.a1170294566);
      assertEquals(0, problem13_1.a979809558);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(456, problem13_1.a1557002549);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(0, problem13_1.a990630382);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(421, problem13_1.a416677077);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(0, problem13_1.a357424721);
      assertEquals(1, problem13_1.a798263149);
      assertEquals(7, problem13_1.a810914124);
      assertEquals(1, problem13_1.a812372003);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(7, problem13_1.a433024764);
      assertEquals(0, problem13_1.a867204110);
      assertEquals(1, problem13_1.a67256091);
      assertEquals(2, problem13_1.a821255838);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(0, problem13_1.a835535657);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      problem13_1.a229444636 = problem13_0.a1162458185;
      // Undeclared exception!
      try { 
        problem13_1.calculateOutput("Error code:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      
      problem13_0.a1804214504 = 456;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      
      problem13_0.a1804214504 = 0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      
      problem13_0.a2131868080 = "e";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.a839337571 = "i";
      problem13_0.calculateOutput("h");
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertTrue(problem13_0.cf);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      
      problem13_0.a1534261430 = 1;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1445580586);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      
      // SystemInUtil.addInputLine("h");
      problem13_0.a1314340093 = problem13_0.a505937283;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      
      problem13_0.a1525279227 = "f";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      
      problem13_0.calculateOutput("A");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(421, problem13_0.a416677077);
      
      problem13_0.calculateOutput("E");
      assertEquals((-15171), problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-11828), problem13_0.a1534261430);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(11, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      
      problem13_0.calculateOutput("A");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(66, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(285, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(4, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a821255838);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(166, problem13_0.a1823860477);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(11, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      
      problem13_0.a505937283 = problem13_0.a1201149902;
      problem13_0.a189556773 = 0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.a439993392 = 7;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      
      problem13_0.a2131868080 = "g";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.calculateOutput("H");
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a1516569447);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1516569447);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a867204110);
      
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a867204110);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      
      problem13_0.a2101662305 = (-1753);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a725030305);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      
      problem13_0.a1804214504 = 9;
      problem13_0.a810914124 = 456;
      problem13_0.a2101662305 = 0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Ju%vLuh{,5_d:.p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      
      problem13_0.a2015917294 = problem13_0.a1461611542;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("E.~Fr");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.a1039246420 = 2;
      problem13_0.a529370746 = problem13_0.a1201149902;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("E|c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      
      problem13_0.a1114773494 = (-1644);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      
      problem13_0.a2131868080 = "h";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1445580586);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      
      problem13_0.a189556773 = 2;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      
      problem13_0.a839337571 = "f";
      problem13_0.calculateOutput("h");
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(7, problem13_1.a810914124);
      assertEquals(1, problem13_1.a384960957);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(7, problem13_1.a433024764);
      assertEquals(2, problem13_1.a821255838);
      assertEquals(0, problem13_1.a835535657);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals(5, problem13_1.a1290874579);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(0, problem13_1.a979809558);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(456, problem13_1.a1557002549);
      assertEquals(8, problem13_1.a1127751596);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(265, problem13_1.a661472947);
      assertEquals((-127), problem13_1.a1432939547);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(1, problem13_1.a812372003);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals(1, problem13_1.a67256091);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(0, problem13_1.a867204110);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals(3, problem13_1.a1170294566);
      assertTrue(problem13_1.cf);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals(0, problem13_1.a357424721);
      assertEquals(421, problem13_1.a416677077);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(0, problem13_1.a990630382);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(1, problem13_1.a798263149);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals(9, problem13_1.a1021882616);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals(1, problem13_1.a1403822458);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      String[] stringArray0 = new String[5];
      problem13_0.a1242525595 = 1948;
      stringArray0[0] = "g";
      stringArray0[1] = "h";
      stringArray0[2] = "AUy#.!&wF'q";
      stringArray0[3] = "f";
      stringArray0[4] = "f";
      //  Problem13.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      
      problem13_0.a1454490324 = 16;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("D@:5{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertTrue(problem13_0.cf);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      
      problem13_0.a421304736 = "i";
      String string0 = "I";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a810914124);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.a661472947 = 7;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      
      problem13_0.a1625453606 = problem13_0.a1966032504;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.a256357310 = "e";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a318343844);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      
      problem13_0.a318343844 = 1;
      // SystemInUtil.addInputLine("f");
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.calculateOutput("H");
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.calculateOutput("G");
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a433024764);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      
      problem13_0.calculateOutput("H");
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertFalse(problem13_0.cf);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      
      problem13_0.calculateOutput("B");
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertFalse(problem13_0.cf);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-177), problem13_0.a1534261430);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1127751596);
      
      problem13_0.calculateOutput("B");
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertFalse(problem13_0.cf);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-177), problem13_0.a1534261430);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1127751596);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      
      problem13_0.a189556773 = 11;
      int[] intArray0 = new int[8];
      intArray0[1] = 11;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 183;
      intArray0[5] = 0;
      intArray0[6] = 3;
      intArray0[7] = 2;
      problem13_0.a2015917294 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("XEF(*5Y0SK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      
      problem13_0.a189556773 = 11;
      String string0 = "^,5j>z'`a/yjAg]<";
      // SystemInUtil.addInputLine("g");
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("^,5j>z'`a/yjAg]<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      
      problem13_0.a1682811574 = "e";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-185), problem13_0.a1534261430);
      
      problem13_0.a661472947 = (-29);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Errors");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      
      problem13_0.a460687002 = "i";
      problem13_0.a1021882616 = (-152);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      
      problem13_0.a1804214504 = 456;
      problem13_0.a810914124 = 456;
      problem13_0.a2101662305 = 183;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertTrue(problem13_0.cf);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.a1804214504 = 2;
      problem13_0.a810914124 = 456;
      problem13_0.a2101662305 = 183;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      
      // SystemInUtil.addInputLine("h");
      problem13_0.a1039246420 = 7;
      problem13_0.calculateOutput("C");
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      
      problem13_0.a1516569447 = 1337;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput(";c>{0Js1l`Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.a1823860477 = 456;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput(" #J<@&#!o\"Jwa-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.a1039246420 = 0;
      problem13_0.a2101662305 = (-1);
      problem13_0.a1170294566 = 1;
      problem13_0.calculateOutput("A");
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals((-1), problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(118, problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(405, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("J2wA&aOg{u\"MSY7c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-89), problem13_0.a1114773494);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      
      problem13_0.a1432939547 = 3195;
      // SystemInUtil.addInputLine("e");
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.a1736675153 = 23296;
      problem13_0.a1823860477 = 23296;
      problem13_0.a1638321298 = 23296;
      problem13_0.a810914124 = 23296;
      int[] intArray0 = new int[8];
      intArray0[0] = (-185);
      intArray0[1] = 3;
      problem13_0.a181939302 = intArray0;
      intArray0[3] = (-2948);
      intArray0[4] = 0;
      intArray0[6] = (-185);
      intArray0[7] = 23296;
      String string0 = "l!PYcTh1Ei$ts2iA&@";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("l!PYcTh1Ei$ts2iA&@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      
      // SystemInUtil.addInputLine("i");
      problem13_0.a354562930 = problem13_0.a294681005;
      problem13_0.a810914124 = 11;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 9;
      problem13_0.a127397619 = intArray0;
      problem13_0.a1516569447 = 9;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertTrue(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-49), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(319, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(121, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-49), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(319, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(121, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      
      problem13_0.a1736675153 = 23296;
      problem13_0.a1823860477 = 23296;
      problem13_0.a1638321298 = 23296;
      problem13_0.a810914124 = 23296;
      int[] intArray0 = new int[8];
      intArray0[0] = (-11544);
      intArray0[1] = 3;
      problem13_0.a181939302 = intArray0;
      intArray0[3] = (-2948);
      intArray0[4] = 0;
      problem13_0.a384960957 = (-2948);
      intArray0[6] = (-185);
      intArray0[7] = 23296;
      problem13_0.a651284356 = intArray0;
      problem13_0.a2101662305 = (-2948);
      problem13_0.a189556773 = (-2948);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      
      problem13_0.a1039246420 = 4501;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.a1039246420 = 0;
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a1701271195);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-15199), problem13_0.a1823860477);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.a812372003 = 0;
      problem13_0.a839337571 = "C";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(1, problem13_1.a67256091);
      assertEquals(1, problem13_1.a812372003);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals(0, problem13_1.a867204110);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(3, problem13_1.a1170294566);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(8, problem13_1.a1127751596);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(265, problem13_1.a661472947);
      assertEquals(7, problem13_1.a810914124);
      assertEquals(1, problem13_1.a384960957);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(7, problem13_1.a433024764);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(2, problem13_1.a821255838);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(5, problem13_1.a1290874579);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals(0, problem13_1.a835535657);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals(456, problem13_1.a1557002549);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals(0, problem13_1.a979809558);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(421, problem13_1.a416677077);
      assertEquals(0, problem13_1.a357424721);
      assertTrue(problem13_1.cf);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(0, problem13_1.a990630382);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals(1, problem13_1.a798263149);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals((-127), problem13_1.a1432939547);
      assertEquals(9, problem13_1.a1021882616);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals(1, problem13_1.a1403822458);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      problem13_0.a894055859 = problem13_1.a2015917294;
      problem13_0.a1313879316 = problem13_1.a780210513;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("A");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      
      problem13_0.a1736675153 = 10;
      problem13_0.a810914124 = 8;
      int[] intArray0 = new int[8];
      problem13_0.a1402785178 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      
      problem13_0.a979809558 = 421;
      problem13_0.a810914124 = 12;
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a979809558);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(12, problem13_0.a810914124);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("t@FrL?4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // SystemInUtil.addInputLine("H");
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.a867204110 = 1;
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.a1290874579 = 7;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Problem13");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-2), problem13_0.a357424721);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      
      // SystemInUtil.addInputLine("h");
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(0, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a990630382);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.a1736675153 = 1735;
      problem13_0.a1444658772 = 1735;
      problem13_0.a1804214504 = 1735;
      problem13_0.a2101662305 = 421;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("w`9C:DU}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(421, problem13_0.a416677077);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-15971), problem13_0.a1823860477);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.calculateOutput("H");
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertFalse(problem13_0.cf);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.a189556773 = 8;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      
      problem13_0.a1039246420 = 1;
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-15236), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      
      problem13_0.a1021882616 = 8;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      
      problem13_0.a1557002549 = 9;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      
      problem13_0.a1736675153 = 10;
      problem13_0.a810914124 = 1;
      int[] intArray0 = new int[14];
      problem13_0.a1402785178 = intArray0;
      problem13_0.a125040026 = 0;
      problem13_0.a1516569447 = 2115;
      intArray0[2] = 11;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = (-185);
      intArray0[7] = 10;
      problem13_0.a2015917294 = intArray0;
      problem13_0.a979809558 = (-127);
      String string0 = "";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // SystemInUtil.addInputLine("/Dikj][}[Hg");
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      
      problem13_0.a1432939547 = (-89);
      problem13_0.a439993392 = 0;
      problem13_0.a2131868080 = "h";
      problem13_0.a1005553932 = "f";
      problem13_0.calculateOutput("f");
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      
      problem13_0.calculateOutput("f");
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.a1804214504 = 456;
      problem13_0.a810914124 = 456;
      problem13_0.a2101662305 = 1;
      // SystemInUtil.addInputLine("e");
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a1127751596);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.calculateOutput("C");
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals(5, problem13_1.a1290874579);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(2, problem13_1.a821255838);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(8, problem13_1.a1127751596);
      assertEquals(7, problem13_1.a433024764);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(0, problem13_1.a979809558);
      assertEquals(1, problem13_1.a384960957);
      assertEquals(0, problem13_1.a835535657);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals((-127), problem13_1.a1432939547);
      assertEquals(421, problem13_1.a416677077);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(9, problem13_1.a1021882616);
      assertEquals(1, problem13_1.a1403822458);
      assertEquals(1, problem13_1.a798263149);
      assertTrue(problem13_1.cf);
      assertEquals(0, problem13_1.a357424721);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(3, problem13_1.a1170294566);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals(0, problem13_1.a867204110);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals(0, problem13_1.a990630382);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(1, problem13_1.a812372003);
      assertEquals(456, problem13_1.a1557002549);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(1, problem13_1.a67256091);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals(265, problem13_1.a661472947);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(7, problem13_1.a810914124);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      problem13_1.a442036279 = problem13_0.a2015917294;
      // Undeclared exception!
      try { 
        problem13_1.calculateOutput("Invalid input: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1458471526);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.a2131868080 = "fCux~[pfSD4/ ";
      problem13_0.a661472947 = 6;
      problem13_0.a2101662305 = 183;
      String string0 = "";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(3, problem13_0.a1638321298);
      
      problem13_0.calculateOutput("H");
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      
      problem13_0.a318343844 = (-793);
      String string0 = "I";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      
      problem13_0.a1432939547 = (-89);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      
      problem13_0.calculateOutput("H");
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      
      problem13_0.calculateOutput("G");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a433024764);
      
      problem13_0.calculateOutput("H");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-19054), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(195, problem13_0.a416677077);
      assertEquals((-15240), problem13_0.a1039246420);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a725030305);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      
      problem13_0.a1682811574 = "h";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a318343844);
      assertTrue(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      problem13_0.a1804214504 = 456;
      problem13_0.a1516569447 = 8;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("AsuBBAy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.calculateOutput("H");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      
      problem13_0.a189556773 = 2;
      problem13_0.a2015917294 = problem13_0.a2015917294;
      problem13_0.a661472947 = 254;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("XC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(421, problem13_0.a416677077);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "\\/Dikj][}[Hg";
      // SystemInUtil.addInputLine("/Dikj][}[Hg");
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      
      problem13_0.a1736675153 = (-89);
      problem13_0.a439993392 = 0;
      problem13_0.a1682811574 = "h";
      problem13_0.a839337571 = "/Dikj][}[Hg";
      problem13_0.a1005553932 = "f";
      problem13_0.a357424721 = 214;
      problem13_0.a1804214504 = 2;
      problem13_0.a1672803082 = 0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      
      problem13_0.a1444658772 = 8;
      // SystemInUtil.addInputLine("e");
      problem13_0.a189556773 = 8;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[2] = 8;
      intArray0[2] = 0;
      intArray0[4] = 8;
      intArray0[5] = 7;
      problem13_0.a2101662305 = 7;
      problem13_0.a661472947 = 254;
      intArray0[6] = 3;
      problem13_0.a780210513 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      
      problem13_0.a189556773 = 9;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("p0)2 moFd73x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      
      problem13_0.a1005553932 = "h";
      problem13_0.calculateOutput("R");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.a1444658772 = (-640);
      problem13_0.a1534261430 = (-640);
      problem13_0.calculateOutput("H");
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-640), problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-640), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.calculateOutput("H");
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-640), problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-92), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-640), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.a318343844 = 4;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      
      problem13_0.calculateOutput("F");
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      
      problem13_0.calculateOutput("F");
      assertEquals(82, problem13_0.a1534261430);
      assertEquals(420, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(17117, problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      
      problem13_0.calculateOutput("F");
      assertEquals(82, problem13_0.a1534261430);
      assertEquals(420, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(17117, problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      
      problem13_0.a1039246420 = (-43);
      problem13_0.calculateOutput("H");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      
      problem13_0.calculateOutput("H");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      
      problem13_0.calculateOutput("D");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // SystemInUtil.addInputLine("/Dikj][}[Hg");
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      
      problem13_0.a1736675153 = (-89);
      problem13_0.a318343844 = 0;
      problem13_0.a1682811574 = "h";
      problem13_0.a416677077 = 46;
      problem13_0.a1804214504 = (-89);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.a256357310 = "i";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      
      problem13_0.a460687002 = "g";
      // SystemInUtil.addInputLine("e");
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.a1432939547 = (-40);
      problem13_0.a439993392 = 0;
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      problem13_0.a839337571 = "}e6JOo:%5*Bp8 jc2";
      intArray0[1] = (-185);
      intArray0[2] = 7;
      problem13_0.a886902940 = intArray0;
      problem13_0.a1005553932 = "h";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      
      problem13_0.a1804214504 = 456;
      problem13_0.a810914124 = 456;
      problem13_0.a2101662305 = 183;
      // SystemInUtil.addInputLine("e");
      String string0 = "A";
      problem13_0.calculateOutput("A");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertFalse(problem13_0.cf);
      assertEquals(183, problem13_0.a2101662305);
      assertEquals(456, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1804214504);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Jr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      
      problem13_0.a439993392 = 0;
      problem13_0.a839337571 = "h";
      problem13_0.calculateOutput("h");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "\\/ik][}[Hg";
      // SystemInUtil.addInputLine("/ik][}[Hg");
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      
      problem13_0.a1736675153 = (-89);
      problem13_0.a318343844 = 0;
      problem13_0.a1682811574 = "h";
      String string1 = "f";
      problem13_0.a1005553932 = "f";
      problem13_0.a1672803082 = 10;
      problem13_0.calculateOutput("R");
      assertEquals(0, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(10, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-89), problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      
      problem13_0.a1290874579 = (-819);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.calculateOutput("A");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.a1039246420 = 3722;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("3!S>le5N#)Q[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1445580586);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      
      int[] intArray0 = new int[11];
      problem13_0.a2015917294 = intArray0;
      intArray0[4] = 11;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a810914124);
      assertFalse(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      
      String string0 = "F";
      problem13_0.calculateOutput("F");
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1672803082);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      
      problem13_0.a1127751596 = (-3152);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-127), problem13_0.a1432939547);
      
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-127), problem13_0.a1432939547);
      
      String string0 = "mDYs-X";
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-127), problem13_0.a1432939547);
      
      problem13_0.a1127751596 = (-756);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("mDYs-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      
      problem13_0.a2131868080 = "e";
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a867204110);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.calculateOutput("D");
      assertEquals(0, problem13_0.a867204110);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(133, problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.a839337571 = "g";
      problem13_0.calculateOutput("e");
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.calculateOutput("e");
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.calculateOutput((String) null);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = 5;
      intArray0[4] = 0;
      problem13_0.a990630382 = 0;
      intArray0[5] = 2;
      problem13_0.a1373669551 = intArray0;
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      
      problem13_0.calculateOutput("C");
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1170294566);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(3, problem13_1.a1170294566);
      assertEquals(421, problem13_1.a416677077);
      assertEquals(0, problem13_1.a867204110);
      assertEquals(0, problem13_1.a990630382);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(1, problem13_1.a798263149);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals(0, problem13_1.a357424721);
      assertEquals(1, problem13_1.a1403822458);
      assertEquals(0, problem13_1.a979809558);
      assertEquals((-127), problem13_1.a1432939547);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(1, problem13_1.a384960957);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(8, problem13_1.a1127751596);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals(5, problem13_1.a1290874579);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(265, problem13_1.a661472947);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals(7, problem13_1.a810914124);
      assertTrue(problem13_1.cf);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(9, problem13_1.a1021882616);
      assertEquals(1, problem13_1.a67256091);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(1, problem13_1.a812372003);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(7, problem13_1.a433024764);
      assertEquals(2, problem13_1.a821255838);
      assertEquals(0, problem13_1.a835535657);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(456, problem13_1.a1557002549);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      problem13_0.calculateOutput("D");
      assertNotSame(problem13_0, problem13_1);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1170294566);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(133, problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertFalse(problem13_0.equals((Object)problem13_1));
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(421, problem13_0.a416677077);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      
      problem13_0.a189556773 = 9;
      problem13_0.a1557002549 = 3;
      problem13_0.calculateOutput("A");
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      
      problem13_0.a189556773 = 9;
      problem13_0.calculateOutput("C");
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(9, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      
      problem13_0.calculateOutput("I");
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-183), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(218, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      
      problem13_0.calculateOutput("I");
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-183), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(13, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(218, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals((-24840), problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertFalse(problem13_0.cf);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertFalse(problem13_0.cf);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a1127751596);
      
      problem13_0.a416677077 = 123;
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals(8, problem13_1.a1127751596);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(265, problem13_1.a661472947);
      assertEquals(0, problem13_1.a835535657);
      assertTrue(problem13_1.cf);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(2, problem13_1.a821255838);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals((-127), problem13_1.a1432939547);
      assertEquals(1, problem13_1.a67256091);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(1, problem13_1.a798263149);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(9, problem13_1.a1021882616);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(456, problem13_1.a1557002549);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(0, problem13_1.a867204110);
      assertEquals(7, problem13_1.a433024764);
      assertEquals(0, problem13_1.a990630382);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(0, problem13_1.a357424721);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(3, problem13_1.a1170294566);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(1, problem13_1.a1403822458);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(1, problem13_1.a812372003);
      assertEquals(421, problem13_1.a416677077);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals(0, problem13_1.a979809558);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(1, problem13_1.a384960957);
      assertEquals(7, problem13_1.a810914124);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(5, problem13_1.a1290874579);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.a1966032504 = problem13_0.a2058765146;
      problem13_0.a1290874579 = 9;
      problem13_0.calculateOutput("h");
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertFalse(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("H");
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("H");
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("G");
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("G");
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("H");
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a67256091);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-1), problem13_0.a798263149);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-134), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a979809558);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.a1005553932 = "e";
      problem13_0.calculateOutput("G");
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(5, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("wg?:^dyL{]ZRLQet65)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.a839337571 = "i";
      int[] intArray0 = new int[8];
      intArray0[0] = 265;
      problem13_0.a117015366 = intArray0;
      intArray0[1] = 7;
      intArray0[2] = 0;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 0;
      problem13_0.a505937283 = intArray0;
      problem13_0.calculateOutput("Error code:");
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.calculateOutput("Error code:");
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1743511459);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      
      problem13_0.a1444658772 = 16;
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals(8, problem13_1.a1127751596);
      assertTrue(problem13_1.cf);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals(0, problem13_1.a835535657);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(7, problem13_1.a433024764);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals(5, problem13_1.a1290874579);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(1, problem13_1.a67256091);
      assertEquals(7, problem13_1.a810914124);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(1, problem13_1.a812372003);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(2, problem13_1.a821255838);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(265, problem13_1.a661472947);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(0, problem13_1.a990630382);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(3, problem13_1.a1170294566);
      assertEquals(0, problem13_1.a357424721);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(456, problem13_1.a1557002549);
      assertEquals(0, problem13_1.a867204110);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(0, problem13_1.a979809558);
      assertEquals(9, problem13_1.a1021882616);
      assertEquals(1, problem13_1.a384960957);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(1, problem13_1.a1403822458);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals(1, problem13_1.a798263149);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(421, problem13_1.a416677077);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals((-127), problem13_1.a1432939547);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a67256091);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a433024764);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      
      problem13_0.calculateOutput("H");
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      
      problem13_0.a1682811574 = "H";
      problem13_0.calculateOutput("H");
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      
      String string0 = "Y";
      problem13_0.calculateOutput("G");
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      
      problem13_0.calculateOutput("G");
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      
      problem13_0.a1021882616 = 151;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a835535657);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(5, problem13_0.a1638321298);
      
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(5, problem13_0.a1638321298);
      
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-149), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a433024764);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-2), problem13_0.a1242525595);
      assertEquals((-5), problem13_0.a1445580586);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(198, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(5, problem13_0.a1638321298);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      
      problem13_0.a1039246420 = (-43);
      problem13_0.calculateOutput("C");
      assertEquals(10, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-13608), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      
      problem13_0.calculateOutput("E");
      assertEquals(10, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-13608), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-2), problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(234, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-61), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a1127751596);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.a894055859 = problem13_0.a1314340093;
      problem13_0.calculateOutput("H");
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      
      problem13_0.calculateOutput("G");
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(421, problem13_0.a416677077);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      
      int[] intArray0 = new int[8];
      problem13_0.a894055859 = intArray0;
      // SystemInUtil.addInputLine("f");
      intArray0[3] = 0;
      problem13_0.calculateOutput("A");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      
      problem13_0.a1022317260 = 1;
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      
      problem13_0.calculateOutput("D");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(133, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      
      problem13_0.calculateOutput("D");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-21622), problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-185), problem13_0.a1534261430);
      assertTrue(problem13_0.cf);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.a1039246420 = (-43);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = (-152);
      intArray0[3] = 3;
      intArray0[4] = (-89);
      intArray0[5] = 0;
      intArray0[6] = 7;
      // SystemInUtil.addInputLine("");
      problem13_0.a960163293 = intArray0;
      problem13_0.calculateOutput("H");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.calculateOutput("H");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.calculateOutput("H");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.calculateOutput("x6[tu`<dnf]=8<SwqV");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.calculateOutput("");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 183;
      problem13_0.a1454302062 = intArray0;
      problem13_0.a1039246420 = 3;
      problem13_0.calculateOutput("C");
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-15310), problem13_0.a1823860477);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      
      String string0 = "I";
      problem13_0.a1127751596 = 183;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.a661472947 = (-2269);
      problem13_0.a1362118597 = null;
      problem13_0.a2101662305 = 9;
      problem13_0.a1039246420 = (-43);
      problem13_0.calculateOutput("H");
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-2269), problem13_0.a661472947);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-43), problem13_0.a1039246420);
      
      problem13_0.calculateOutput("H");
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-2269), problem13_0.a661472947);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-43), problem13_0.a1039246420);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a810914124);
      
      problem13_0.a1804214504 = 456;
      problem13_0.a810914124 = 9;
      problem13_0.a384960957 = 183;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      
      problem13_0.a189556773 = 9;
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a189556773);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1701271195);
      
      problem13_0.calculateOutput("I");
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(218, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a433024764);
      assertEquals((-183), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertFalse(problem13_0.cf);
      assertEquals(13, problem13_0.a189556773);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      
      problem13_0.a2131868080 = "f";
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      
      problem13_0.calculateOutput("E");
      assertEquals(0, problem13_0.a125040026);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(234, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-2), problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-177), problem13_0.a1534261430);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("[TB@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(3, problem13_0.a1638321298);
      
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertFalse(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertFalse(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      
      problem13_0.calculateOutput("G");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      
      problem13_0.calculateOutput("E");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      
      problem13_0.a1895220770 = 77;
      problem13_0.calculateOutput("H");
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(77, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      
      problem13_0.cf = false;
      problem13_0.calculateOutput("H");
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(77, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      
      problem13_0.calculateOutput("G");
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(77, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      
      problem13_0.calculateOutput("F");
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(6, problem13_0.a810914124);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(77, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.a1895220770 = 77;
      String string0 = "H";
      problem13_0.calculateOutput("H");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(77, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a433024764);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-433);
      problem13_0.a2058765146 = intArray0;
      problem13_0.calculateOutput("H");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(77, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-129), problem13_0.a1114773494);
      
      problem13_0.calculateOutput("G");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(8, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(77, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a990630382);
      
      problem13_0.a318343844 = (-433);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.a1895220770 = 63;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 124;
      intArray0[3] = 1;
      intArray0[4] = 9819;
      intArray0[6] = 11;
      problem13_0.a1039246420 = 0;
      problem13_0.a181939302 = intArray0;
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(63, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.a1022317260 = 9819;
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(63, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9819, problem13_0.a1022317260);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-35), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(63, problem13_0.a1895220770);
      assertEquals(9820, problem13_0.a1022317260);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-35), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.calculateOutput("F");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a810914124);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(63, problem13_0.a1895220770);
      assertEquals(9820, problem13_0.a1022317260);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-35), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a810914124);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(63, problem13_0.a1895220770);
      assertEquals(9820, problem13_0.a1022317260);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-35), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      
      String string0 = "A";
      problem13_0.calculateOutput("A");
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(12, problem13_0.a1823860477);
      assertFalse(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.a1039246420 = (-606);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      
      problem13_0.a798263149 = 0;
      problem13_0.calculateOutput("H");
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(6, problem13_0.a1701271195);
      
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(4, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(6, problem13_0.a1701271195);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.calculateOutput("A");
      assertEquals(0, problem13_0.a990630382);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      
      problem13_0.calculateOutput("E");
      assertEquals(0, problem13_0.a990630382);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-11828), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1022317260);
      assertEquals(11, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-15171), problem13_0.a1039246420);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Errors");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      
      problem13_0.a1039246420 = 1;
      problem13_0.calculateOutput("C");
      assertEquals(10, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-15236), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      
      problem13_0.calculateOutput("I");
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals((-15236), problem13_0.a1823860477);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(201, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(10, problem13_0.a1021882616);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      
      problem13_0.a1290874579 = (-2163);
      problem13_0.a1432939547 = 1;
      problem13_0.a2131868080 = "h";
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      problem13_0.a1005553932 = "h";
      problem13_0.a117015366 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Errors");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      
      problem13_0.a1039246420 = 0;
      problem13_0.a1170294566 = (-1);
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-1), problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-1), problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.a835535657 = (-1);
      problem13_0.a416677077 = 79;
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-50), problem13_0.a1534261430);
      assertEquals((-17578), problem13_0.a1823860477);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(79, problem13_0.a416677077);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-1), problem13_0.a835535657);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-1), problem13_0.a1170294566);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertTrue(problem13_0.cf);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.a1895220770 = problem13_0.a1895220770;
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.cf = false;
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("F");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a810914124);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(421, problem13_0.a416677077);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(121, problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-49), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(319, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("O.*k)");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(121, problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-49), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(319, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.a318343844 = 10;
      problem13_0.calculateOutput("Current state has no transition for this input!");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(10, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(121, problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-49), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(319, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertTrue(problem13_0.cf);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.a384960957 = (-152);
      problem13_0.a2058765146 = problem13_0.a294681005;
      problem13_0.a529370746 = problem13_0.a90022965;
      problem13_0.calculateOutput("H");
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-152), problem13_0.a384960957);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertTrue(problem13_0.cf);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.a1039246420 = 0;
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      
      problem13_0.a1534261430 = 480;
      problem13_0.a1701271195 = 1;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("F");
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a901780004);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("]xQ~hx$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      problem13_0.a979809558 = 421;
      problem13_0.a810914124 = 12;
      problem13_0.calculateOutput("H");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(421, problem13_0.a979809558);
      assertEquals(12, problem13_0.a810914124);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      problem13_0.calculateOutput("H");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(421, problem13_0.a979809558);
      assertEquals(12, problem13_0.a810914124);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("t@FrL?4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1454490324);
      assertFalse(problem13_0.cf);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.calculateOutput("G");
      assertEquals(8, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1454490324);
      assertFalse(problem13_0.cf);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.calculateOutput("E");
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-19857), problem13_0.a1534261430);
      assertEquals((-2), problem13_0.a725030305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(195, problem13_0.a416677077);
      assertEquals((-13446), problem13_0.a1039246420);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(11, problem13_0.a1454490324);
      assertFalse(problem13_0.cf);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-1), problem13_0.a1022317260);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a901780004);
      
      // SystemInUtil.addInputLine("f");
      int[] intArray0 = new int[4];
      intArray0[1] = 3;
      problem13_0.a354562930 = intArray0;
      problem13_0.a810914124 = 12;
      // SystemInUtil.addInputLine("g");
      problem13_0.calculateOutput("A");
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(12, problem13_0.a810914124);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.a1525279227 = "J56|%[3pc6|03?z; ,";
      problem13_0.a780210513 = intArray0;
      // SystemInUtil.addInputLine("g");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A";
      stringArray0[1] = "i";
      stringArray0[2] = "h";
      stringArray0[3] = "g";
      stringArray0[4] = "g";
      stringArray0[5] = "}bz+zQ5Kpzu\"uGl$`7$n";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("Ju%vLuh{,5_d:.p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.a189556773 = 9;
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(9, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.calculateOutput("I");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-183), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(218, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      
      problem13_0.a1534261430 = (-378);
      problem13_0.calculateOutput("H");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-378), problem13_0.a1534261430);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      
      problem13_0.calculateOutput("G");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertFalse(problem13_0.cf);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(242, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-154), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(20741, problem13_0.a2101662305);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(194, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      
      problem13_0.calculateOutput("J");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-28225), problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-17968), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a798263149);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(20741, problem13_0.a2101662305);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(11, problem13_0.a189556773);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(194, problem13_0.a416677077);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(3, problem13_0.a1638321298);
      
      problem13_0.a1039246420 = (-43);
      String string0 = "H";
      problem13_0.calculateOutput("H");
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      
      problem13_0.calculateOutput("G");
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(6852, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      
      int[] intArray0 = new int[8];
      // SystemInUtil.addInputLine("g");
      problem13_0.a1672803082 = 976;
      intArray0[0] = 10;
      intArray0[1] = 6;
      intArray0[2] = 8;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 474;
      intArray0[6] = 6852;
      problem13_0.a421304736 = "G";
      intArray0[7] = 3;
      problem13_0.a2015917294 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(421, problem13_0.a416677077);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      
      String string0 = "C";
      problem13_0.a1039246420 = 7;
      problem13_0.calculateOutput("C");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      
      String string1 = "I";
      problem13_0.calculateOutput("I");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-143), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(196, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(456, problem13_0.a1557002549);
      assertFalse(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a798263149);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      
      problem13_0.a1039246420 = 7;
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a433024764);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.calculateOutput("I");
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-143), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(196, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.calculateOutput("I");
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-143), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(13, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-13058), problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(196, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.calculateOutput("I");
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-143), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(13, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-13058), problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(196, problem13_0.a1039246420);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      
      problem13_0.a1039246420 = (-43);
      problem13_0.calculateOutput("H");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      
      problem13_0.calculateOutput("H");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      
      problem13_0.calculateOutput("F");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      
      problem13_0.calculateOutput("H");
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-140), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1672803082);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(250, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(5, problem13_0.a798263149);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1638321298);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      
      String string0 = "H";
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(9, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a1170294566);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      
      problem13_0.a416677077 = 121;
      Problem13 problem13_1 = new Problem13();
      assertNotNull(problem13_1);
      assertEquals(1, problem13_1.a812372003);
      assertEquals(0, problem13_1.a1743511459);
      assertEquals(0, problem13_1.a867204110);
      assertEquals((-89), problem13_1.a1114773494);
      assertEquals(1, problem13_1.a67256091);
      assertEquals(3, problem13_1.a1170294566);
      assertEquals(0, problem13_1.a1542365894);
      assertEquals(11, problem13_1.a1454490324);
      assertEquals(3, problem13_1.a318343844);
      assertEquals(2, problem13_1.a1736675153);
      assertEquals(421, problem13_1.a416677077);
      assertEquals(12, problem13_1.a189556773);
      assertEquals(0, problem13_1.a357424721);
      assertEquals(3, problem13_1.a1895220770);
      assertEquals(0, problem13_1.a990630382);
      assertEquals((-152), problem13_1.a1804214504);
      assertEquals(183, problem13_1.a1039246420);
      assertEquals(2, problem13_1.a901780004);
      assertEquals(7, problem13_1.a1516569447);
      assertEquals(1, problem13_1.a1242525595);
      assertEquals(1, problem13_1.a798263149);
      assertEquals((-185), problem13_1.a1534261430);
      assertEquals((-127), problem13_1.a1432939547);
      assertTrue(problem13_1.cf);
      assertEquals(9, problem13_1.a1021882616);
      assertEquals(1, problem13_1.a1403822458);
      assertEquals(1, problem13_1.a725030305);
      assertEquals(480, problem13_1.a2101662305);
      assertEquals(1, problem13_1.a384960957);
      assertEquals(1, problem13_1.a1672803082);
      assertEquals(7, problem13_1.a810914124);
      assertEquals(10, problem13_1.a1444658772);
      assertEquals(0, problem13_1.a125040026);
      assertEquals(3, problem13_1.a1638321298);
      assertEquals(7, problem13_1.a433024764);
      assertEquals(2, problem13_1.a821255838);
      assertEquals((-43), problem13_1.a1823860477);
      assertEquals(5, problem13_1.a1290874579);
      assertEquals(11, problem13_1.a1881202620);
      assertEquals(8, problem13_1.a1127751596);
      assertEquals(0, problem13_1.a835535657);
      assertEquals(0, problem13_1.a979809558);
      assertEquals(8, problem13_1.a439993392);
      assertEquals(456, problem13_1.a1557002549);
      assertEquals(2, problem13_1.a1022317260);
      assertEquals(0, problem13_1.a1458471526);
      assertEquals(1, problem13_1.a1445580586);
      assertEquals(2, problem13_1.a1701271195);
      assertEquals(265, problem13_1.a661472947);
      assertFalse(problem13_1.equals((Object)problem13_0));
      
      problem13_0.a651284356 = problem13_1.a529370746;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      problem13_0.a1039246420 = 0;
      problem13_0.a1170294566 = (-127);
      problem13_0.a1444658772 = (-1861);
      problem13_0.calculateOutput("H");
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a433024764);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      problem13_0.a835535657 = 60;
      problem13_0.a867204110 = 2;
      problem13_0.a416677077 = 0;
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(21, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(60, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-17578), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      problem13_0.calculateOutput("D");
      assertEquals(0, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(133, problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(21, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(60, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1403822458);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(21, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-130), problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(60, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-12305), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 456;
      intArray0[2] = 12;
      intArray0[3] = 3;
      intArray0[4] = 989;
      intArray0[5] = 421;
      intArray0[6] = 421;
      intArray0[7] = 1;
      intArray0[8] = 265;
      problem13_0.a960163293 = intArray0;
      problem13_0.a1039246420 = 1;
      // SystemInUtil.addInputLine("_K");
      problem13_0.calculateOutput("C");
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(12, problem13_0.a189556773);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals((-15236), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      
      String string0 = "I";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // SystemInUtil.addInputLine("");
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(265, problem13_0.a661472947);
      
      int[] intArray0 = new int[1];
      problem13_0.a2101662305 = 183;
      problem13_0.a1454302062 = intArray0;
      problem13_0.a1039246420 = 3;
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-15310), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.a1039246420 = (-43);
      String string0 = "H";
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a798263149);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(6852, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1881202620);
      assertFalse(problem13_0.cf);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(8, problem13_0.a433024764);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 6;
      intArray0[2] = 8;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 474;
      intArray0[6] = 6852;
      problem13_0.a433024764 = 3;
      problem13_0.a2015917294 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.a2131868080 = "f";
      // SystemInUtil.addInputLine("h");
      problem13_0.calculateOutput("C");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.calculateOutput("E");
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-2), problem13_0.a821255838);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-177), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(234, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(2, problem13_0.a901780004);
      
      problem13_0.a433024764 = 2446;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.a1290874579 = 8;
      problem13_0.calculateOutput("e");
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertFalse(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(8, problem13_0.a1290874579);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      
      problem13_0.calculateOutput("h");
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-43), problem13_0.a1823860477);
      assertFalse(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(8, problem13_0.a1290874579);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      
      problem13_0.a1895220770 = problem13_0.a1895220770;
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 421;
      intArray0[2] = 12;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 8;
      problem13_0.a1162458185 = intArray0;
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a990630382);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      
      problem13_0.cf = false;
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a990630382);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      
      problem13_0.calculateOutput("G");
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      
      problem13_0.calculateOutput("F");
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(6, problem13_0.a810914124);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      
      problem13_0.calculateOutput("G");
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(6, problem13_0.a810914124);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.a189556773 = 9;
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = 0;
      intArray0[2] = 2147483645;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 183;
      problem13_0.a294681005 = intArray0;
      problem13_0.calculateOutput("C");
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1127751596);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(9, problem13_0.a189556773);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      
      problem13_0.a416677077 = 7;
      problem13_0.calculateOutput("I");
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-4), problem13_0.a1542365894);
      assertEquals(7, problem13_0.a416677077);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-183), problem13_0.a1534261430);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(218, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(13, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1454490324);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1701271195);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.calculateOutput("F");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(5, problem13_0.a798263149);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(250, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(10, problem13_0.a810914124);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-140), problem13_0.a1534261430);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-3), problem13_0.a812372003);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1672803082);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-127), problem13_0.a1432939547);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      
      // SystemInUtil.addInputLine("f");
      problem13_0.a354562930 = problem13_0.a181939302;
      problem13_0.a810914124 = 11;
      problem13_0.calculateOutput("H");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      
      problem13_0.calculateOutput("H");
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a867204110);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(2, problem13_0.a901780004);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      
      problem13_0.calculateOutput("C");
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals((-15971), problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(10, problem13_0.a1444658772);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = " Rl){nIl";
      // SystemInUtil.addInputLine(" Rl){nIl");
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a812372003);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1638321298);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(8, problem13_0.a439993392);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      problem13_0.a1362118597 = intArray0;
      intArray0[1] = 13;
      intArray0[2] = 0;
      problem13_0.a894055859 = problem13_0.a181939302;
      problem13_0.a1682811574 = "e";
      // SystemInUtil.addInputLine(" kQ&\"-6  ");
      problem13_0.a780210513 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput(".qVV9nFi}`Fo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertTrue(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      
      // SystemInUtil.addInputLine("f");
      int[] intArray0 = new int[4];
      intArray0[1] = 3;
      problem13_0.a354562930 = intArray0;
      problem13_0.a810914124 = 12;
      problem13_0.calculateOutput("A");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertFalse(problem13_0.cf);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(12, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      
      problem13_0.a821255838 = (-152);
      problem13_0.a780210513 = intArray0;
      // SystemInUtil.addInputLine("g");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A";
      problem13_0.a839337571 = "i";
      stringArray0[2] = "h";
      stringArray0[3] = "g";
      stringArray0[4] = "i";
      stringArray0[5] = "}bz+zQ5Kpzu\"uGl$`7$n";
      problem13_0.calculateOutput("}bz+zQ5Kpzu\"uGl$`7$n");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1895220770);
      assertFalse(problem13_0.cf);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-152), problem13_0.a821255838);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(12, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      
      problem13_0.a1039246420 = (-43);
      problem13_0.calculateOutput("H");
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      
      problem13_0.a1444658772 = 14;
      problem13_0.calculateOutput("H");
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertFalse(problem13_0.cf);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      
      // SystemInUtil.addInputLine("i");
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertTrue(problem13_0.cf);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      
      problem13_0.calculateOutput("A");
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a821255838);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(12, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(402, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(49, problem13_0.a1534261430);
      assertEquals(12, problem13_0.a1823860477);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertTrue(problem13_0.cf);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      
      problem13_0.a384960957 = 1898;
      problem13_0.a2058765146 = problem13_0.a294681005;
      problem13_0.a529370746 = problem13_0.a90022965;
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1898, problem13_0.a384960957);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a318343844);
      
      problem13_0.calculateOutput("H");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(121, problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1898, problem13_0.a384960957);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(319, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-49), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
      
      problem13_0.calculateOutput("f");
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertFalse(problem13_0.cf);
      assertEquals(121, problem13_0.a1823860477);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(1898, problem13_0.a384960957);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(319, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals((-49), problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a979809558);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertTrue(problem13_0.cf);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      
      problem13_0.a1039246420 = 0;
      problem13_0.a1170294566 = (-1);
      String string0 = "H";
      problem13_0.calculateOutput("H");
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-1), problem13_0.a1170294566);
      
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(195, problem13_0.a416677077);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1736675153);
      assertFalse(problem13_0.cf);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals((-1), problem13_0.a1170294566);
      
      problem13_0.a835535657 = (-1);
      problem13_0.a867204110 = (-940);
      problem13_0.a1525279227 = "G";
      problem13_0.a416677077 = 79;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.a1039246420 = (-43);
      problem13_0.calculateOutput("H");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a318343844);
      assertFalse(problem13_0.cf);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      
      problem13_0.calculateOutput("G");
      assertEquals(1, problem13_0.a67256091);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(10, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(6852, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(4, problem13_0.a318343844);
      
      int[] intArray0 = new int[22];
      intArray0[0] = 10;
      intArray0[1] = 6;
      intArray0[2] = 8;
      intArray0[3] = 6852;
      intArray0[4] = 3;
      intArray0[5] = 474;
      intArray0[6] = 6852;
      problem13_0.a1127751596 = 928;
      problem13_0.a2015917294 = intArray0;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("RT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.a125040026 = 0;
      problem13_0.a1170294566 = (-1);
      String string0 = "H";
      problem13_0.calculateOutput("H");
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals((-185), problem13_0.a1534261430);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-1), problem13_0.a1170294566);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1021882616);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(20924, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-1), problem13_0.a1170294566);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      
      problem13_0.a1021882616 = (-1);
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a1701271195);
      
      problem13_0.a1039246420 = (-43);
      problem13_0.calculateOutput("H");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(0, problem13_0.a867204110);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertFalse(problem13_0.cf);
      
      problem13_0.calculateOutput("H");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1039246420);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(10, problem13_0.a1444658772);
      assertFalse(problem13_0.cf);
      
      problem13_0.calculateOutput("H");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      
      problem13_0.calculateOutput("H");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      
      problem13_0.calculateOutput("<;8o'GZ`bO/Mz%^h");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = (-152);
      intArray0[6] = 265;
      intArray0[7] = 11;
      problem13_0.a2015917294 = intArray0;
      problem13_0.calculateOutput("<;8o'GZ`bO/Mz%^h");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
      
      problem13_0.calculateOutput("g");
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a867204110);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(303, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(97, problem13_0.a1823860477);
      assertEquals(2, problem13_0.a1534261430);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a189556773);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-32), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(14, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(1, problem13_0.a1445580586);
      assertFalse(problem13_0.cf);
      assertEquals(11, problem13_0.a1021882616);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a990630382);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(3, problem13_0.a1895220770);
      
      int[] intArray0 = new int[1];
      problem13_0.a1162458185 = intArray0;
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a990630382);
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.calculateOutput("G");
      assertFalse(problem13_0.cf);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-129), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a1895220770);
      
      problem13_0.calculateOutput("G");
      assertFalse(problem13_0.cf);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a439993392);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-129), problem13_0.a1114773494);
      
      problem13_0.calculateOutput("F");
      assertFalse(problem13_0.cf);
      assertEquals((-6), problem13_0.a125040026);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(2, problem13_0.a835535657);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a725030305);
      assertEquals(5, problem13_0.a1638321298);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a189556773);
      assertEquals(1, problem13_0.a867204110);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(5, problem13_0.a1895220770);
      assertEquals(0, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(5, problem13_0.a439993392);
      assertEquals((-2), problem13_0.a357424721);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(6, problem13_0.a1290874579);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(4, problem13_0.a1170294566);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals((-129), problem13_0.a1114773494);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertTrue(problem13_0.cf);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      
      problem13_0.a1039246420 = 7;
      problem13_0.calculateOutput("C");
      assertEquals(5, problem13_0.a318343844);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(40, problem13_0.a1534261430);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(335, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(480, problem13_0.a2101662305);
      assertFalse(problem13_0.cf);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a979809558);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-15458), problem13_0.a1823860477);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(0, problem13_0.a990630382);
      assertEquals((-89), problem13_0.a1114773494);
      
      problem13_0.a1823860477 = 100;
      String string0 = "I";
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertTrue(problem13_0.cf);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-43), problem13_0.a1823860477);
      
      problem13_0.a1039246420 = 0;
      problem13_0.a1170294566 = (-127);
      problem13_0.a1444658772 = (-1861);
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(421, problem13_0.a416677077);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals((-43), problem13_0.a1823860477);
      
      String string0 = "G";
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(0, problem13_0.a835535657);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals((-43), problem13_0.a1823860477);
      
      problem13_0.a835535657 = 60;
      problem13_0.a867204110 = 2;
      problem13_0.a416677077 = 0;
      problem13_0.calculateOutput("G");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a416677077);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(21, problem13_0.a1534261430);
      assertEquals(60, problem13_0.a835535657);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a433024764);
      assertEquals((-17578), problem13_0.a1823860477);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-127), problem13_0.a1170294566);
      
      String string1 = "D";
      problem13_0.calculateOutput("D");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a416677077);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(133, problem13_0.a1823860477);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(21, problem13_0.a1534261430);
      assertEquals(60, problem13_0.a835535657);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      assertEquals((-127), problem13_0.a1170294566);
      
      problem13_0.calculateOutput("H");
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a416677077);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(21, problem13_0.a1534261430);
      assertEquals(60, problem13_0.a835535657);
      assertEquals((-130), problem13_0.a1170294566);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals((-12305), problem13_0.a1823860477);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      
      problem13_0.calculateOutput("D");
      assertEquals(122, problem13_0.a1823860477);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(11, problem13_0.a1021882616);
      assertEquals(5, problem13_0.a1516569447);
      assertEquals(299, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(9, problem13_0.a1444658772);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a416677077);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a867204110);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(21, problem13_0.a1534261430);
      assertEquals(60, problem13_0.a835535657);
      assertEquals((-130), problem13_0.a1170294566);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(9, problem13_0.a433024764);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(0, problem13_0.a1743511459);
      assertFalse(problem13_0.cf);
      assertEquals(2, problem13_0.a990630382);
      assertEquals(10, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(5, problem13_0.a318343844);
      assertEquals(8, problem13_0.a439993392);
      
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertTrue(problem13_0.cf);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      
      problem13_0.a1005553932 = "i";
      problem13_0.calculateOutput("H");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
      
      // SystemInUtil.addInputLine("Error code:");
      problem13_0.calculateOutput("7");
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(1, problem13_0.a67256091);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(0, problem13_0.a867204110);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(1, problem13_0.a798263149);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(7, problem13_0.a810914124);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a125040026);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(265, problem13_0.a661472947);
      assertFalse(problem13_0.cf);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Problem13 problem13_0 = new Problem13();
      assertNotNull(problem13_0);
      assertEquals(2, problem13_0.a821255838);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(10, problem13_0.a1444658772);
      assertEquals(2, problem13_0.a1701271195);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(183, problem13_0.a1039246420);
      assertEquals(265, problem13_0.a661472947);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(5, problem13_0.a1290874579);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(3, problem13_0.a1170294566);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertTrue(problem13_0.cf);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      
      problem13_0.a1039246420 = 0;
      problem13_0.a1170294566 = (-127);
      problem13_0.a1444658772 = (-1861);
      problem13_0.calculateOutput("H");
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(8, problem13_0.a1127751596);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(480, problem13_0.a2101662305);
      assertEquals((-185), problem13_0.a1534261430);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(0, problem13_0.a1039246420);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(3, problem13_0.a318343844);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(1, problem13_0.a67256091);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals(421, problem13_0.a416677077);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(9, problem13_0.a1021882616);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(7, problem13_0.a433024764);
      assertEquals(0, problem13_0.a867204110);
      
      // SystemInUtil.addInputLine("e");
      problem13_0.calculateOutput("G");
      assertEquals(2, problem13_0.a821255838);
      assertEquals(6, problem13_0.a1701271195);
      assertEquals(0, problem13_0.a125040026);
      assertEquals(1, problem13_0.a725030305);
      assertEquals(1, problem13_0.a384960957);
      assertEquals(3, problem13_0.a1638321298);
      assertEquals(0, problem13_0.a835535657);
      assertEquals(7, problem13_0.a810914124);
      assertEquals((-152), problem13_0.a1804214504);
      assertEquals((-43), problem13_0.a1823860477);
      assertEquals((-127), problem13_0.a1170294566);
      assertEquals(1, problem13_0.a1445580586);
      assertEquals(8, problem13_0.a433024764);
      assertEquals(0, problem13_0.a1458471526);
      assertEquals(265, problem13_0.a661472947);
      assertEquals((-1861), problem13_0.a1444658772);
      assertEquals(0, problem13_0.a979809558);
      assertEquals(1, problem13_0.a1672803082);
      assertEquals(11, problem13_0.a1881202620);
      assertEquals(0, problem13_0.a1542365894);
      assertEquals(1, problem13_0.a1403822458);
      assertEquals(1, problem13_0.a812372003);
      assertEquals(0, problem13_0.a1743511459);
      assertEquals(10, problem13_0.a1021882616);
      assertEquals(11, problem13_0.a1454490324);
      assertEquals(0, problem13_0.a990630382);
      assertEquals(9, problem13_0.a1127751596);
      assertEquals(15237, problem13_0.a2101662305);
      assertEquals(1, problem13_0.a67256091);
      assertFalse(problem13_0.cf);
      assertEquals((-127), problem13_0.a1432939547);
      assertEquals((-89), problem13_0.a1114773494);
      assertEquals((-151), problem13_0.a1534261430);
      assertEquals(7, problem13_0.a1516569447);
      assertEquals(3, problem13_0.a1895220770);
      assertEquals(2, problem13_0.a1022317260);
      assertEquals(1, problem13_0.a1242525595);
      assertEquals(12, problem13_0.a189556773);
      assertEquals(2, problem13_0.a901780004);
      assertEquals(2, problem13_0.a1736675153);
      assertEquals(8, problem13_0.a439993392);
      assertEquals(456, problem13_0.a1557002549);
      assertEquals(0, problem13_0.a357424721);
      assertEquals(1, problem13_0.a798263149);
      assertEquals(4, problem13_0.a318343844);
      assertEquals(230, problem13_0.a1039246420);
      assertEquals(195, problem13_0.a416677077);
      assertEquals(3, problem13_0.a1290874579);
      assertEquals(0, problem13_0.a867204110);
      
      problem13_0.a318343844 = 4003;
      // Undeclared exception!
      try { 
        problem13_0.calculateOutput("^ CC+#kW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current state has no transition for this input!
         //
         // verifyException("Problem13", e);
      }
  }
}
